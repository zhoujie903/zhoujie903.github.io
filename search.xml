<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Charles的应用</title>
    <url>/2019/09/28/Charles%E7%9A%84%E5%BA%94%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Rewrite应用"><a href="#Rewrite应用" class="headerlink" title="Rewrite应用"></a>Rewrite应用</h2><h3 id="案例01"><a href="#案例01" class="headerlink" title="案例01"></a>案例01</h3><p>问题：<code>今日头条极速版</code>App每天的<code>阅读推送文章</code>任务因为每天收到的推送很少，因而不能得很高的积分，怎样把普通文章的阅读变为推送文章的阅读呢？</p>
<p>思考：对比普通文章的阅读与推送文章的阅读发出的网络数据，找出差异</p>
<p>普通文章的阅读与推送文章的阅读达到奖励标准时，都用相同的接口<code>https://is.snssdk.com/score_task/v1/task/get_read_bonus/</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 普通阅读文章&#x2F;视频</span><br><span class="line">https:&#x2F;&#x2F;is.snssdk.com&#x2F;score_task&#x2F;v1&#x2F;task&#x2F;get_read_bonus&#x2F;?fp&#x3D;xxx&amp;...&amp;group_id&#x3D;6689697061983486472</span><br><span class="line"></span><br><span class="line"># 推送文章的阅读</span><br><span class="line">https:&#x2F;&#x2F;is.snssdk.com&#x2F;score_task&#x2F;v1&#x2F;task&#x2F;get_read_bonus&#x2F;?fp&#x3D;xxx&amp;...&amp;&amp;impression_type&#x3D;push&amp;group_id&#x3D;6689697061983486472</span><br></pre></td></tr></table></figure>
<p>对比上面的接口数据发现：<br>推送阅读只比普通阅读<strong>多出了impression_type=push</strong>的Query String</p>
<p>解决：用Charles的<code>Rewrite功能Add Query Param</code>来增加impression_type=push解决问题</p>
<p><img src="http://upload-images.jianshu.io/upload_images/281540-64acc9462bb437c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Add Query Param"></p>
<p>上面的get_read_bonus重写规则Export导出的get_read_bonus.xml文件内容如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;?xml version&#x3D;&#39;1.0&#39; encoding&#x3D;&#39;UTF-8&#39; ?&gt;</span><br><span class="line">&lt;?charles serialisation-version&#x3D;&#39;2.0&#39; ?&gt;</span><br><span class="line">&lt;rewriteSet-array&gt;</span><br><span class="line">  &lt;rewriteSet&gt;</span><br><span class="line">    &lt;active&gt;true&lt;&#x2F;active&gt;</span><br><span class="line">    &lt;name&gt;get_read_bonus&lt;&#x2F;name&gt;</span><br><span class="line">    &lt;hosts&gt;</span><br><span class="line">      &lt;locationPatterns&gt;</span><br><span class="line">        &lt;locationMatch&gt;</span><br><span class="line">          &lt;location&gt;</span><br><span class="line">            &lt;protocol&gt;https&lt;&#x2F;protocol&gt;</span><br><span class="line">            &lt;host&gt;is.snssdk.com&lt;&#x2F;host&gt;</span><br><span class="line">            &lt;path&gt;&#x2F;score_task&#x2F;v1&#x2F;task&#x2F;get_read_bonus&#x2F;&lt;&#x2F;path&gt;</span><br><span class="line">          &lt;&#x2F;location&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;&#x2F;enabled&gt;</span><br><span class="line">        &lt;&#x2F;locationMatch&gt;</span><br><span class="line">      &lt;&#x2F;locationPatterns&gt;</span><br><span class="line">    &lt;&#x2F;hosts&gt;</span><br><span class="line">    &lt;rules&gt;</span><br><span class="line">      &lt;rewriteRule&gt;</span><br><span class="line">        &lt;active&gt;true&lt;&#x2F;active&gt;</span><br><span class="line">        &lt;ruleType&gt;8&lt;&#x2F;ruleType&gt;</span><br><span class="line">        &lt;matchHeader&gt;&lt;&#x2F;matchHeader&gt;</span><br><span class="line">        &lt;matchValue&gt;&lt;&#x2F;matchValue&gt;</span><br><span class="line">        &lt;matchHeaderRegex&gt;false&lt;&#x2F;matchHeaderRegex&gt;</span><br><span class="line">        &lt;matchValueRegex&gt;false&lt;&#x2F;matchValueRegex&gt;</span><br><span class="line">        &lt;matchRequest&gt;false&lt;&#x2F;matchRequest&gt;</span><br><span class="line">        &lt;matchResponse&gt;false&lt;&#x2F;matchResponse&gt;</span><br><span class="line">        &lt;newHeader&gt;impression_type&lt;&#x2F;newHeader&gt;</span><br><span class="line">        &lt;newValue&gt;push&lt;&#x2F;newValue&gt;</span><br><span class="line">        &lt;newHeaderRegex&gt;false&lt;&#x2F;newHeaderRegex&gt;</span><br><span class="line">        &lt;newValueRegex&gt;false&lt;&#x2F;newValueRegex&gt;</span><br><span class="line">        &lt;matchWholeValue&gt;false&lt;&#x2F;matchWholeValue&gt;</span><br><span class="line">        &lt;caseSensitive&gt;false&lt;&#x2F;caseSensitive&gt;</span><br><span class="line">        &lt;replaceType&gt;2&lt;&#x2F;replaceType&gt;</span><br><span class="line">      &lt;&#x2F;rewriteRule&gt;</span><br><span class="line">    &lt;&#x2F;rules&gt;</span><br><span class="line">  &lt;&#x2F;rewriteSet&gt;</span><br><span class="line">&lt;&#x2F;rewriteSet-array&gt;</span><br></pre></td></tr></table></figure>

<p>重写规则设置正确与否验证：<br><img src="http://upload-images.jianshu.io/upload_images/281540-ea8dc4743ec32001.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="规则设置正确与否验证"></p>
<p>在上面的<code>Notes</code>列上会显示<code>Rewrite Tool: query added &quot;impression_type: push&quot;</code></p>
<p><strong>应用：</strong></p>
<ol>
<li>打开Charles并生效上面的Rewrite设置</li>
<li>手机设置代理为Charles的代理地址</li>
<li>正常阅读普通文章\视频达到奖励时点</li>
<li>查找<code>我的收益</code>页面，验证成功与否</li>
</ol>
<h3 id="案例02"><a href="#案例02" class="headerlink" title="案例02"></a>案例02</h3><p>问题：<code>趣消除</code>、<code>趣键盘</code>、<code>东方头条</code>等App都看广告得金币，怎样减少广告的时间？</p>
<p>思考：广告是哪里来的？广告时长是怎么来的？<br>当点击App上的按钮弹出广告时，3个App都调用了接口：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">https:&#x2F;&#x2F;is.snssdk.com&#x2F;api&#x2F;ad&#x2F;union&#x2F;sdk&#x2F;get_ads&#x2F;</span><br></pre></td></tr></table></figure>
<p>响应如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">		&quot;video&quot;: &#123;</span><br><span class="line">			&quot;cover_height&quot;: 1280,</span><br><span class="line">			&quot;cover_url&quot;: &quot;http:&#x2F;&#x2F;sf1-ttcdn-tos.pstatp.com&#x2F;img&#x2F;mosaic-legacy&#x2F;1be91000a8c62c6ba6221~noop.jpg&quot;,</span><br><span class="line">			&quot;cover_width&quot;: 720,</span><br><span class="line">			&quot;endcard&quot;: &quot;https:&#x2F;&#x2F;www.toutiaopage.com&#x2F;union&#x2F;endcard&#x2F;1629848424707111&#x2F;?rit&#x3D;909946692\u0026req_id&#x3D;ED6EC127-C359-4C18-A41E-3A5F6F499250u3183\u0026ad_sdk_version&#x3D;1.9.9.0\u0026os&#x3D;ios\u0026lang&#x3D;cn\u0026style_id&#x3D;1104\u0026ad_id&#x3D;1629844369912839\u0026_toutiao_params&#x3D;%7B%22cid%22%3A1629848424707111%2C%22device_id%22%3A9724339963504202%2C%22log_extra%22%3A%22%7B%5C%22ad_price%5C%22%3A%5C%22XOub4AAGRWZc65vgAAZFZgz-hMMMgth42hwxAg%5C%22%2C%5C%22convert_id%5C%22%3A1629408290774020%2C%5C%22orit%5C%22%3A900000000%2C%5C%22req_id%5C%22%3A%5C%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%5C%22%2C%5C%22rit%5C%22%3A909946692%7D%22%2C%22orit%22%3A900000000%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%2C%22sign%22%3A%22D41D8CD98F00B204E9800998ECF8427E%22%2C%22uid%22%3A9724339963504202%2C%22ut%22%3A14%7D\u0026append&#x3D;%7B%22openurl%22%3A%22%22%2C%22postdata%22%3A%5B%7B%22__type__%22%3A%22req_id%22%2C%22cid%22%3A1629848424707111%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%7D%5D%7D&quot;,</span><br><span class="line">			&quot;resolution&quot;: &quot;720x1280&quot;,</span><br><span class="line">			&quot;size&quot;: 5628226,</span><br><span class="line">			&quot;video_duration&quot;: 29.04,</span><br><span class="line">			&quot;video_url&quot;: &quot;http:&#x2F;&#x2F;vd2.bdstatic.com&#x2F;mda-jesntzw6569xqudw&#x2F;mda-jesntzw6569xqudw.mp4&quot;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;],</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>广告就是从上面的接口获取而来的，广告时长由<code>video_url</code>字段对应的mp4的时长决定</p>
<p>解决：用Charles的<code>Rewrite功能Body</code>替换<code>video_url</code>字段的值<br><img src="https://upload-images.jianshu.io/upload_images/281540-e80209bd2b222ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Body"></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">&quot;video_url&quot;:&quot;(.+)&quot;&#125;</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">&quot;video_url&quot;:&quot;http:&#x2F;&#x2F;vd2.bdstatic.com&#x2F;mda-jesntzw6569xqudw&#x2F;mda.mp4&quot;&#125;</span><br></pre></td></tr></table></figure>

<p>提供一个只有3秒的素材：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">http:&#x2F;&#x2F;vd2.bdstatic.com&#x2F;mda-jesntzw6569xqudw&#x2F;mda-jesntzw6569xqudw.mp4</span><br></pre></td></tr></table></figure>
<h3 id="案例03"><a href="#案例03" class="headerlink" title="案例03"></a>案例03</h3><p>问题：<code>章鱼输入法</code>App有看广告得金币，没有像<code>案例02</code>那样找到相应的接口api返回广告视频的URL，怎样减少广告的时间？</p>
<p>思考：尝试替换广告视频的请求<br>比如广告视频的请求如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Get https:&#x2F;&#x2F;v3-ad.ixigua.com&#x2F;...&#x2F;video&#x2F;m&#x2F;...&#x2F;toutiao.mp4</span><br><span class="line"></span><br><span class="line">替换为只有3秒的视频地址</span><br><span class="line">Get http:&#x2F;&#x2F;vd2.bdstatic.com&#x2F;...&#x2F;3seconds.mp4</span><br></pre></td></tr></table></figure>

<p>解决：用Charles的<code>Rewrite功能URL</code>替换请求<br><img src="https://upload-images.jianshu.io/upload_images/281540-aa27f7180fd280a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:URL"></p>
<h3 id="案例04"><a href="#案例04" class="headerlink" title="案例04"></a>案例04</h3><p>问题：<code>扶我起来学数学</code>App的<code>作战休息区</code>有一个游戏<code>伪装者</code>，在上报成绩时，接口有hash字段，修改成绩字段，hash会验证不通过，达到了防止伪造成绩的功能，怎样在hash前伪造成绩？<br><img src="https://upload-images.jianshu.io/upload_images/281540-88406cb857175e0b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成绩上报接口"><br>思考：hash算法一般难破解，与其破解hash算法，不如转变思路：修改传入hash的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">value肯定与成绩相关</span><br><span class="line">hash(value)</span><br></pre></td></tr></table></figure>
<p>那value具体是怎么样的呢？通过抓包的数据可以判定为是个h5游戏，在js代码中可能包含相要的答案<br><img src="https://upload-images.jianshu.io/upload_images/281540-685fef5fb145856f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>在浏览器中打开上面中的<code>game.html</code>验证确实是一个h5游戏：<br><img src="https://upload-images.jianshu.io/upload_images/281540-05b3b4529eb81455.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p>解决：</p>
<ul>
<li>用Charles的<code>Mirror功能</code>把抓包的数据自动保存为文件，再在文本编辑器中检查代码</li>
<li>在<code>game.html</code>文件中查找<code>rest/game_report</code>，因为有这个网络包，所以先查找这个关键字，结果如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function _gameReport(score, callBack, hash, time)&#123;</span><br><span class="line">    var oAjax &#x3D; null;</span><br><span class="line">    &#x2F;&#x2F;这里进行HTTP请求</span><br><span class="line">    oAjax &#x3D; new XMLHttpRequest();</span><br><span class="line">    oAjax.open(&#39;post&#39;,HOSTURLAPI+&quot;&#x2F;rest&#x2F;game_report&quot;+&quot;?uid&#x3D;&quot;+UID+&quot;&amp;gameid&#x3D;&quot;+GAMEID+&quot;&amp;score&#x3D;&quot;+score+&quot;&amp;tm&#x3D;&quot;+time+&quot;&amp;hash&#x3D;&quot;+hash,true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>查找<code>_gameReport</code>函数的调用者</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function gameReport(score, callBack)&#123;</span><br><span class="line">    var timeData &#x3D; new Date().getTime();</span><br><span class="line">    var hashValue &#x3D; UID+GAMEID+score+timeData;</span><br><span class="line">    var hash &#x3D; &#39;&#39;;</span><br><span class="line">    dsBridge.call(&#39;hashCode&#39;,hashValue,function(data)&#123;</span><br><span class="line">        hash &#x3D; data;</span><br><span class="line">        _gameReport(score, callBack, hash, timeData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gameReport(b[0], function(success, old_score)&#123;&#125;)</span><br></pre></td></tr></table></figure>
<p>js代码调用到App的<code>hashCode</code>方法，<code>hashValue = UID+GAMEID+score+timeData</code><br>用Charles的<code>Rewrite功能Body</code>替换：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">gameReport(b[0]</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">gameReport(&#39;99&#39;</span><br></pre></td></tr></table></figure>
<p><img src="https://upload-images.jianshu.io/upload_images/281540-95aa5d5d7a03c5e6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<ul>
<li>成绩已修改，hash验证已通过</li>
</ul>
<h2 id="Mirror应用"><a href="#Mirror应用" class="headerlink" title="Mirror应用"></a>Mirror应用</h2><p>文档：<a href="https://www.charlesproxy.com/documentation/tools/mirror/">https://www.charlesproxy.com/documentation/tools/mirror/</a></p>
<blockquote>
<p>The Mirror tool saves responses to disk as they are received, creating a mirror copy of websites as you browse them.</p>
</blockquote>
<p>Mirror把响应保存为文件到硬盘上</p>
<p><img src="https://upload-images.jianshu.io/upload_images/281540-9a4d5b1810506685.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p>
<p><img src="https://upload-images.jianshu.io/upload_images/281540-64531455206484fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mirror保存下来的文件"></p>
<h2 id="No-Caching-和-Block-Cookies应用"><a href="#No-Caching-和-Block-Cookies应用" class="headerlink" title="No Caching 和 Block Cookies应用"></a>No Caching 和 Block Cookies应用</h2><p>在案例：<code>扶我起来学数学</code>App的<code>伪装者</code>游戏通过Rewrite功能修改了js文件中的内容；但有时js文件不是每次都会传输，而是使用了缓存，这时Rewrite功能就失效了，因为没有发生网络请求；通过<code>No Caching 和 Block Cookies</code>使网络请求每次都发生</p>
<h2 id="Map-Local应用"><a href="#Map-Local应用" class="headerlink" title="Map Local应用"></a>Map Local应用</h2><table>
<thead>
<tr>
<th>Map Local应用场景</th>
</tr>
</thead>
<tbody><tr>
<td>修改js文件来改变App行为:</td>
</tr>
<tr>
<td>1. 使用No Caching 和 Block Cookies功能保证js文件通过网络请求加载到App</td>
</tr>
<tr>
<td>2. 使用Mirror功能把js文件保存到电脑上</td>
</tr>
<tr>
<td>3. 使用Map Local功能使App加载修改后的js文件</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS、Android快速设置代理</title>
    <url>/2019/09/27/ios-switch-proxy/</url>
    <content><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>手动设置wifi的步骤非常长：</p>
<ol>
<li>点击“设置”</li>
<li>点击“无线局域网”</li>
<li>点击已连接的wifi</li>
<li>点击“配置代理”</li>
<li>点击“手动”</li>
<li>定位服务器输入框，输入ip</li>
<li>定位端口输入框，输入port</li>
<li>点击“存储”</li>
</ol>
<h2 id="iOS解决"><a href="#iOS解决" class="headerlink" title="iOS解决"></a>iOS解决</h2><p>用iOS上的Shadowrocket和Mac上的Charles来快速设置代理<br>iOS和Mac在同一wifi</p>
<ol>
<li>启动Charles，假设代理地址为：192.168.0.100:8888</li>
<li>Shadowrocket设置<code>全局路由</code>为<code>代理</code></li>
<li>Shadowrocket添加<code>HTTP</code>类型的节点</li>
<li>Shadowrocket打开连接</li>
</ol>
<p><strong>添加<code>HTTP</code>类型的节点:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-3a3a4df908ac1248.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加节点"></p>
<p><strong>结果:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-c94d3b52048e63e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>
<h2 id="Android解决"><a href="#Android解决" class="headerlink" title="Android解决"></a>Android解决</h2><p>用Android上的Kitsunebi和Mac上的Charles来快速设置代理<br>Android和Mac在同一wifi</p>
<ol>
<li>开启Charles的Http Proxy和SOCKS Proxy</li>
<li>Kitsunebi添加<code>socks</code>类型的节点</li>
<li>Kitsunebi打开连接</li>
</ol>
<p><img src="https://gitee.com/zhoujie903/image-repo/raw/master/img/charles-socks-proxy.png" alt="开启Charles的Http Proxy和SOCKS Proxy"><br><img src="https://gitee.com/zhoujie903/image-repo/raw/master/img/Kitsunebi-socks-proxy.jpg" alt="Kitsunebi-socks-proxy"></p>
]]></content>
      <tags>
        <tag>代理</tag>
        <tag>iOS</tag>
        <tag>Shadowrocket</tag>
        <tag>Kitsunebi</tag>
      </tags>
  </entry>
  <entry>
    <title>mitmproxy与charles的抓包应用</title>
    <url>/2019/09/29/mitmproxy-and-charles-use/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>mitmproxy是命令行界面，不太方便查看，自己遇到的问题有：</p>
<ul>
<li>在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情</li>
<li>json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文</li>
<li>不知道怎么复制界面中显示的内容</li>
</ul>
<p>Charles的编程能力弱</p>
<p>把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展</p>
<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>电脑和手机都连接到同一个Wi-Fi, 比如TP_LINK_629F<br>电脑: ip=192.168.1.100; 运行着Charles、mitmproxy<br>Charles: 192.168.1.100:8888<br>mitmproxy: 192.168.1.100:8080<br>手机: 设置代理地址为Charles的地址192.168.1.100:8888</p>
<p>Charles - External Proxy Settings功能开启：</p>
<ul>
<li>Web Proxy(HTTP) - Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li>
<li>Secure Web Proxy(HTTPS) - Secure Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li>
</ul>
<table>
<thead>
<tr>
<th align="center">手机</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2bq3vglj30u01hcaak.jpg"></td>
</tr>
<tr>
<td align="center"></td>
</tr>
<tr>
<td align="center">Charles - External Proxy Settings</td>
</tr>
<tr>
<td align="center"></td>
</tr>
<tr>
<td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2ks0wauj31am0qe76x.jpg"></td>
</tr>
</tbody></table>
<h2 id="补充-mitmproxy设置上游代理"><a href="#补充-mitmproxy设置上游代理" class="headerlink" title="补充: mitmproxy设置上游代理"></a>补充: mitmproxy设置上游代理</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump --mode&#x3D;upstream:http:&#x2F;&#x2F;127.0.0.1:8888 --ssl-insecure</span><br></pre></td></tr></table></figure>

<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>应用：自动生成接口的python代码</p>
<p>以<code>趣头条App</code>为例：<br>阅读得积分的接口为: <code>https://api.1sapp.com/readtimer/report</code><br>自动生成的代码大约如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def readtimer_report(self):</span><br><span class="line"></span><br><span class="line">    headers &#x3D; &#123;</span><br><span class="line">		&#39;User-Agent&#39;: &#39;qukan_android;retrofit&#x2F;2.4.0 okhttp&#x2F;3.11.0;os&#x2F;7.0 M5 Note Meizu;device&#x2F;862546036581345;version&#x2F;3.9.41.000.0904.1121;channel&#x2F;012&#39;,</span><br><span class="line">		&#39;Host&#39;: &#39;api.1sapp.com&#39;,</span><br><span class="line">		&#39;Accept-Encoding&#39;: &#39;gzip&#39;,</span><br><span class="line">		&#39;Connection&#39;: &#39;keep-alive&#39;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    params &#x3D; &#123;</span><br><span class="line">		&#39;qdata&#39;: &#39;NzVFNkE3Mjc0RjEzRkYwRTM5OTEzNjAyRUZBMDMzQTAuY0dGeVlXMGZPR0kyTldKalltTXRNVGczT1MwME9EZGlMVGszT0RBdE1EUmlOVEV3TWpOak9UazRIblpsY25OcGIyNGZNVEVlY0d4aGRHWnZjbTBmWVc1a2NtOXBaQjVsWXg4eC46LxvyIvgD62&#x2F;T93SlANmywpigTwlOwcfCHe0iZ1D8mH1zpslt2JCRPdiHOj1M20bU0zDX0odUOBig6Kt51mheNJuQYeDvp15R8RSGTT3LR9s55nBCGvWyTLq+3pjEvkyERElR9E2I384&#x2F;nHQR4iqxqv7LKQ4rBA0R6bNG8sksHqNl1izSbF87G&#x2F;4&#x2F;Qw5vVYcuNUfU0BM6vvIbsy2CTPWlJ51YCzadQZZLONuaYTpyhuOiUV4vnx6qkvpYDNp9XpPPjbXxJAb7fikqjWSdyx167hXDPzUkNZGndjZsv7kQANDkIk2Dm+g5YW1I49xnkOzJkmxvyrLevnsSb9S5fSEUEyfq0GlPHE0RRBeSjFxVltH1zdZraTtk13Z+MvA7HBYQONz&#x2F;0OwyMnujc1Ety91uKh6YCCVEDvBO+RTOzoRDa3nlRo3FTo9OeRBsyL20qIP24977MMYXEoxinTuwNonipCjnjSYIrhOu6cyv7uxuLd6FxtmTsydawNGMPI&#x2F;K+habIKXNUFsQMCUcAGhYpoKQJvkQqHEq6lPyZZzXDot1EsN6bsGj56xQdiuJZLMFyZaGNR6E9FmVlI0LAVT8ttVpOvs+5f08T0iMxMNb0VQk6DOySpYHp7EVjc9YFpPcVxj8aXvuTjoPkaNGhSKQ0fgBd8HVRLslcnzX0QLJkTuU7NQ9aili6m2M2hWvh&#x2F;q8ghWrvtLT+izCiFNKHE+4GTC9J6jqgyjHsXkAjcOSBAaIXMQKnOd664hdoR2GqV+GAy95fc5zZCJ7EFvzmTbJQrpMOwW+Y2NvYPZtgjw1uJEyU7AR7nVw7VqMjPpCDYeWBWoQ1W4OjlXTqgBR4MIu1sTag6a+my&#x2F;0hItf91SNa58zCN3YmE2NnsWwwiCC+ZP91moV&#x2F;KqPwX3vMLKW4&#x2F;3Vsziqe8gl&#39;,</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    data &#x3D; &#123;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">    url &#x3D; &#39;http:&#x2F;&#x2F;api.1sapp.com&#x2F;readtimer&#x2F;report&#39;</span><br><span class="line">    result &#x3D; self._get(url, headers&#x3D;headers, params&#x3D;params, data&#x3D;data)</span><br><span class="line">    return result</span><br><span class="line">     </span><br></pre></td></tr></table></figure>

<p>应用步骤：</p>
<ol>
<li>手机按上面环境设置好代理地址</li>
<li>在电脑上启动Charles，Charles按上面环境设置</li>
<li>在电脑上启动mitimproxy, 启动命令如下：<code>mitmproxy -s gen_code_mitm.py</code></li>
<li>文件gen_code_mitm.py内容参考下面</li>
<li>在手机<code>趣头条App</code>阅读文章或看视频一定时间</li>
<li>会在<code>~/Desktop/api/</code>目录下生成一个叫<code>readtimer_report.text</code></li>
<li>把<code>readtimer_report.text</code>的相应代码复制粘帖到<code>文件qu_tou_tiao.py</code>中</li>
<li>按需要修改自动生成的代码为希望的样子</li>
<li>运行<code>qu_tou_tiao.py</code></li>
</ol>
<p>注意：</p>
<ul>
<li><code>readtimer_report.text</code>的名字和所在目录是由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li>
<li><code>readtimer_report</code>方法名由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li>
<li>对body为复杂json格式的代码自动生成会有错误，有能力的自行修改</li>
<li><code>readtimer/report</code>这个接口自动生成的代码数据是不能重复获取积分的，这里只是演示</li>
</ul>
<p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s4idpz9gj31fa0u045o.jpg"></p>
<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件qu_tou_tiao.py: </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#39;&#39;&#39;</span><br><span class="line">代码模板</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format&#x3D;&#39;%(asctime)s:%(message)s&#39;, datefmt&#x3D;&#39;%m-%d %H:%M:%S&#39;, level&#x3D;logging.INFO)</span><br><span class="line"></span><br><span class="line">class User(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    def api_need_implement(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def _header(self):</span><br><span class="line">        return &#123;</span><br><span class="line">            &#39;User-Agent&#39;: &#39;&#39;,</span><br><span class="line">            &#39;Cookie&#39;:self.cookie</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _post(url, data&#x3D;None, json&#x3D;None, p&#x3D;logging.warning, **kwargs):</span><br><span class="line">        res &#x3D; requests.post(url, data&#x3D;data, **kwargs)</span><br><span class="line">        result &#x3D; res.text</span><br><span class="line">        p(res.json())</span><br><span class="line">        logging.info(&#39;&#39;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _get(url, params&#x3D;None, p&#x3D;logging.warning, **kwargs):</span><br><span class="line">        res &#x3D; requests.get(url, params&#x3D;params, **kwargs)</span><br><span class="line">        result &#x3D; res.text</span><br><span class="line">        p(json.loads(result))</span><br><span class="line">        logging.info(&#39;&#39;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">def genUsers():</span><br><span class="line">    yield User()</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    for user in genUsers():</span><br><span class="line">        user.api_need_implement()  </span><br></pre></td></tr></table></figure>


<p>文件gen_code_mitm.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">生成接口python代码</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&#39;__init__&#39;)</span><br><span class="line"></span><br><span class="line">        # 趣头条</span><br><span class="line">        urls &#x3D; [</span><br><span class="line">            r&#39;taskcenter&#x2F;getListV2&#39;,#tab页：任务</span><br><span class="line">            r&#39;readtimer&#x2F;report&#39;,</span><br><span class="line">        ]</span><br><span class="line">        self.qu_tou_tiao &#x3D; flowfilter.parse(&#39;|&#39;.join(urls)) </span><br><span class="line"></span><br><span class="line">        # 百度 - 全民小视频 </span><br><span class="line">        urls &#x3D; [</span><br><span class="line">            r&#39;mvideo&#x2F;api&#39;, # 每日签到</span><br><span class="line">        ]</span><br><span class="line">        self.quan_ming &#x3D; flowfilter.parse(&#39;|&#39;.join(urls)) </span><br><span class="line"></span><br><span class="line">        self.flowfilters &#x3D; [</span><br><span class="line">            self.qu_tou_tiao, </span><br><span class="line">            self.quan_ming,</span><br><span class="line">        ]      </span><br><span class="line"></span><br><span class="line">    def load(self, loader):</span><br><span class="line">        ctx.log.info(&#39;event: load&#39;)</span><br><span class="line"></span><br><span class="line">    def configure(self, updated):</span><br><span class="line">        ctx.log.info(&#39;event: configure&#39;)</span><br><span class="line"></span><br><span class="line">    def running(self):</span><br><span class="line">        ctx.log.info(&#39;event: running&#39;)</span><br><span class="line"></span><br><span class="line">    def done(self):</span><br><span class="line">        ctx.log.info(&#39;event: done&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if any( [ filter(flow) for filter in self.flowfilters ] ):</span><br><span class="line"></span><br><span class="line">            request: http.HTTPRequest &#x3D; flow.request</span><br><span class="line"></span><br><span class="line">            parse_result &#x3D; urlparse(request.url)</span><br><span class="line">            url_path &#x3D; parse_result.path</span><br><span class="line"></span><br><span class="line">            function_name &#x3D; re.sub(r&#39;[&#x2F;-]&#39;,&#39;_&#39;, url_path).strip(&#39;_&#39;)</span><br><span class="line">            headers_code &#x3D; self.headers_string(flow)</span><br><span class="line">            params_code &#x3D; self.params_string(flow)</span><br><span class="line">            data_code &#x3D; self.data_string(flow) </span><br><span class="line"></span><br><span class="line">            path &#x3D; f&#39;&#39;&#39;&#x2F;Users&#x2F;zhoujie&#x2F;Desktop&#x2F;api&#x2F;&#123;function_name&#125;.text&#39;&#39;&#39;  </span><br><span class="line">            with open(path, &#39;a&#39;) as f:</span><br><span class="line">                print(f&#39;&#39;&#39;# ---------------------&#39;&#39;&#39;,file&#x3D;f)</span><br><span class="line"></span><br><span class="line">                code &#x3D; f&#39;&#39;&#39;</span><br><span class="line">def &#123;function_name&#125;(self):</span><br><span class="line"></span><br><span class="line">    &#123;headers_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;params_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;data_code&#125;</span><br><span class="line"></span><br><span class="line">    url &#x3D; &#39;&#123;request.scheme&#125;:&#x2F;&#x2F;&#123;request.pretty_host&#125;&#123;url_path&#125;&#39;</span><br><span class="line">    result &#x3D; self._&#123;request.method.lower()&#125;(url, headers&#x3D;headers, params&#x3D;params, data&#x3D;data)</span><br><span class="line">    return result</span><br><span class="line">                </span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">                f.write(code)</span><br><span class="line"></span><br><span class="line">                print(f&#39;&#39;&#39;Response:&#39;&#39;&#39;,file&#x3D;f)</span><br><span class="line">                print(f&#39;&#39;&#39;&#123;flow.response.text&#125;&#39;&#39;&#39;,file&#x3D;f)</span><br><span class="line">                print(f&#39;&#39;&#39;# ---------------------\n\n&#39;&#39;&#39;,file&#x3D;f)</span><br><span class="line"></span><br><span class="line">    def headers_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines &#x3D; &#39;&#39;</span><br><span class="line">        for key,value in flow.request.headers.items():</span><br><span class="line">            lines +&#x3D; f&quot;\n\t\t&#39;&#123;key&#125;&#39;: &#39;&#123;value&#125;&#39;,&quot;</span><br><span class="line">        s &#x3D; f&#39;&#39;&#39;headers &#x3D; &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&#39;&#39;&#39;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def params_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines &#x3D; &#39;&#39;</span><br><span class="line">        for key,value in flow.request.query.items():</span><br><span class="line">            lines +&#x3D; f&quot;\n\t\t&#39;&#123;key&#125;&#39;: &#39;&#123;value&#125;&#39;,&quot;</span><br><span class="line">        s &#x3D; f&#39;&#39;&#39;params &#x3D; &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&#39;&#39;&#39;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line">    def data_string(self, flow: http.HTTPFlow):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        Content-Type: application&#x2F;x-www-form-urlencoded</span><br><span class="line">        Content-Type: application&#x2F;json; charset&#x3D;utf-8</span><br><span class="line">        Content-Type: text&#x2F;plain;charset&#x3D;utf-8</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        lines &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">        # [urlencoded_form, multipart_form, plan, json]取其一</span><br><span class="line">        for key,value in flow.request.urlencoded_form.items():</span><br><span class="line">            lines +&#x3D; f&quot;\n\t\t&#39;&#123;key&#125;&#39;: &#39;&#123;value&#125;&#39;,&quot;</span><br><span class="line"></span><br><span class="line">        for key,value in flow.request.multipart_form.items():</span><br><span class="line">            key &#x3D; key.decode(encoding&#x3D;&#39;utf-8&#39;)</span><br><span class="line">            value &#x3D; value.decode(encoding&#x3D;&#39;utf-8&#39;) </span><br><span class="line">            lines +&#x3D; f&quot;\n\t\t&#39;&#123;key&#125;&#39;: &#39;&#123;value&#125;&#39;,&quot;</span><br><span class="line"></span><br><span class="line">        # Todo:复杂json数据还不能代码化</span><br><span class="line">        if &#39;application&#x2F;json&#39; in flow.request.headers.get(&#39;content-type&#39;,&#39;&#39;):</span><br><span class="line">            d &#x3D; json.loads(flow.request.text)</span><br><span class="line">            for key,value in d.items():</span><br><span class="line">                lines +&#x3D; f&quot;\n\t\t&#39;&#123;key&#125;&#39;: &#123;value&#125;,&quot;</span><br><span class="line">        </span><br><span class="line">        s &#x3D; f&#39;&#39;&#39;data &#x3D; &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&#39;&#39;&#39;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">addons &#x3D; [</span><br><span class="line">    GenCode()</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <tags>
        <tag>charles</tag>
        <tag>mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>mitmproxy的应用-代码生成</title>
    <url>/2019/12/28/mitmproxy%E7%9A%84%E5%BA%94%E7%94%A8-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>很多手机App都有做任务，得金币兑换现金的功能<br>手动做任务有很多限制；写代码自动化运行可以消除一些限制<br>但写代码时的敲键盘有点费时间，这篇文章就是要解决自动生成代码的问题</p>
<h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>背景知识: python、mitmproxy、jinja2<br>python: 3.8.1<br>python第三方库: mitmproxy, requests, Jinja2<br>手机代理地址: mitmproxy的地址</p>
<p>因为有多个文件，这里贴部分代码，完整代码地址：<br><a href="https://github.com/zhoujie903/LearnPython/tree/master/mitmproxy_addons/gen_code">https://github.com/zhoujie903/LearnPython/tree/master/mitmproxy_addons/gen_code</a></p>
<h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>设置:<br>设置1：设置<code>self.api_dir</code>: 存放<code>App目录</code>的父目录<br><code>代码目录</code>下的<code>gen_code_mitm.py</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&#39;__init__&#39;)</span><br><span class="line">        # 设置代码文件生成的目录\文件夹</span><br><span class="line">        self.api_dir &#x3D; &#39;&#x2F;Users&#x2F;zhoujie&#x2F;Desktop&#x2F;api&#x2F;&#39;</span><br></pre></td></tr></table></figure>
<p>设置2: 后面说明…</p>
<p>步骤: </p>
<ol>
<li>电脑上运行起mitmproxy；手机设置代理地址为mitmproxy的地址</li>
<li>打开手机App，正常操作：点击、滑动触发相应网络请求被触发，这时各个api方法代码已生成<code>&lt;api-name&gt;.text</code></li>
<li>正常结束mitmproxy，这时在done方法里会生成整体代码<code>code-&lt;app-name&gt;.py</code></li>
<li>微修改<code>code-&lt;app-name&gt;.py</code>并运行</li>
</ol>
<p>步骤说明:<br>步骤1: 启动mitmproxy</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump --set session&#x3D;&#39;huawei&#39; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure>
<p><strong>session的值在后面说明…</strong></p>
<h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>gen_code_mitm.py</code>并不会自动生成全部网络请求的代码，只会生成已配置好的网络请求的代码</p>
<p>配置如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Api(object):</span><br><span class="line">    ...</span><br><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&#39;__init__&#39;)</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        # 趣头条</span><br><span class="line">        # 步骤1: urls里增加用URL path代表的网络请求</span><br><span class="line">        urls &#x3D; [</span><br><span class="line">            r&#39;x&#x2F;tree-game&#x2F;&#39;,</span><br><span class="line">            Api(r&#39;&#x2F;app&#x2F;re&#x2F;taskCenter&#x2F;info&#x2F;v1&#x2F;get&#39;,params_as_all&#x3D;True),            ,</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        # 步骤2: 创建代表App的App对象</span><br><span class="line">        self.qu_tou_tiao &#x3D; App(urls, &#39;qu-tou-tiao&#39;)</span><br><span class="line">        </span><br><span class="line">        # 百度 - 好看视频</span><br><span class="line">        urls &#x3D; [...]      </span><br><span class="line">        self.hao_kan &#x3D; App(urls, &#39;hao-kan&#39;) </span><br><span class="line">        </span><br><span class="line">        # 步骤3: 把App添加进来</span><br><span class="line">        self.flowfilters &#x3D; [</span><br><span class="line">            self.qu_tou_tiao, </span><br><span class="line">            self.hao_kan,</span><br><span class="line">            ...</span><br><span class="line">        ] </span><br></pre></td></tr></table></figure>
<ul>
<li><ol>
<li><code>urls</code>里增加用URL path代表的网络请求</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [</span><br><span class="line">    r&#39;x&#x2F;tree-game&#x2F;&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>创建代表App的App对象</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># &#39;qu-tou-tiao&#39;中给App取的名字</span><br><span class="line">self.qu_tou_tiao &#x3D; App(urls, &#39;qu-tou-tiao&#39;)</span><br></pre></td></tr></table></figure>
<ul>
<li><ol start="3">
<li>把App对象加入到self.flowfilters中，代表要生成这个App的代码</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.flowfilters &#x3D; [</span><br><span class="line">    self.qu_tou_tiao, </span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>urls的配置在后面说明…</strong></p>
<h3 id="目录-文件夹"><a href="#目录-文件夹" class="headerlink" title="目录/文件夹"></a>目录/文件夹</h3><p>先约定2个概念：<code>代码目录</code>、<code>App目录</code><br><code>代码目录</code>：生成<code>App目录</code>的代码、模板等文件的目录<br><code>App目录</code>：保存自动生成的App代码文件的目录</p>
<p><code>代码目录</code>有2类文件：</p>
<ul>
<li><pre><code>*.py    - 代码文件 `gen_code_mitm.py`</code></pre>
</li>
<li><pre><code>*.j2.py - 模板文件</code></pre>
</li>
</ul>
<p><code>App目录</code>有2类文件：</p>
<ul>
<li>*.py - 代码文件：sessions.py、code-xxx.py、session_xxx.py</li>
<li>*.text - api文件，包含2个版本的代码文件、响应http_resopnse_body，不会被py文件读取</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">依赖关系[import关系]</span><br><span class="line">code-xxx.py</span><br><span class="line">    sessions.py</span><br><span class="line">        session_xxx.py    </span><br></pre></td></tr></table></figure>
<ul>
<li><p>session_xxx.py: 保存着像账号ID、cookie、token等用户登录数据 </p>
</li>
<li><p>每个App都有自己的目录: 比如这里有 今天头条极速版本[‘jin-ri-tou-tiao’], 趣头条[‘qu-tou-tiao’] 两个目录/文件夹</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  api tree</span><br><span class="line">.</span><br><span class="line">├── jin-ri-tou-tiao</span><br><span class="line">│   ├── api_news_feed_v47.text</span><br><span class="line">│   ├── code-jin-ri-tou-tiao.py</span><br><span class="line">│   ├── search_suggest_homepage_suggest.text</span><br><span class="line">│   ├── session_huawei.py</span><br><span class="line">│   ├── session_ios.py</span><br><span class="line">│   ├── session_xiaomi.py</span><br><span class="line">│   └── sessions.py</span><br><span class="line">└── qu-tou-tiao</span><br><span class="line">    ├── app_re_taskcenter_info_v1_get.text</span><br><span class="line">    ├── code-qu-tou-tiao.py</span><br><span class="line">    ├── xxx.json</span><br><span class="line">    ├── session_huawei.py</span><br><span class="line">    ├── session_xiaomi.py</span><br><span class="line">    ├── sessions.py</span><br><span class="line">    └── sign_sign.text</span><br><span class="line">    </span><br><span class="line">2 directories, 40 files</span><br></pre></td></tr></table></figure>
<ul>
<li>每个App会有多份session_xxx.py：比如session_huawei.py, session_ios.py, session_xiaomi.py; 表示有华为、iPhone、小米三台手机的运行数据</li>
</ul>
<h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>这里有一个需求与实现方案的问题：</p>
<p>需求: 一份代码[code-xxx.py] - 维护成本低; 多份账号数据[session_xxx.py] - 批量运行, 效率高<br>问题: 一个网络请求的数据怎么知道写入哪个账号数据文件中[session_xxx.py]<br>解决: </p>
<ul>
<li>推断: 从网络请求的headers、parameters、query、body中的值来推断为某个session</li>
<li>指定: 启动时指定为某个session</li>
</ul>
<p>先约定1个概念：<code>一次mitmproxy运行</code><br><code>一次mitmproxy运行</code>: 启动mitmproxy -&gt; 1或多部手机操作相同App -&gt;退出\停止mitmproxy[ctrl+c或Q]</p>
<p><strong>方案一: 指定</strong></p>
<p>在启动时指定<code>--set session=&#39;huawei&#39;</code>, 则所有数据写入session_huawei.py文件中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump --set session&#x3D;&#39;huawei&#39; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure>
<p><strong>问题:</strong> 多部手机[代表不同账号]操作相同App时，多个账号数据都写入到了同一个账号文件中[session_huawei.py]</p>
<p><strong>最佳实践: <code>一次mitmproxy运行</code>只操作一个手机[一个账号]</strong></p>
<p><strong>方案二: 推断</strong><br>在启动时不指定session, 代码自动推断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure>

<p>举例：<br><code>今日头条极速版</code>有一个api: <code>/search/suggest/homepage_suggest/</code><br>在parameters\query有<code>&quot;device_platform&quot;: &quot;iphone&quot;</code>字段值, 那就写入session_ios.py中。</p>
<p><strong>问题：</strong><br>如果有一个api无法从headers、parameters、query、body等信息中判断出该写入哪个文件？</p>
<p>这时会写入session_default.py文件中，这时一个账号的数据被写到2个文件中: session_default.py、session_xxx.py, 生成的代码会被认为是2个账号，无法”正常运行”</p>
<p><strong>最佳实践: <code>一次mitmproxy运行</code>只操作一个手机[一个账号], 且启动时设置<code>guess_as_session</code></strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump --set guess_as_session&#x3D;&#39;huawei&#39; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure>
<p>guess_as_session不能像session那样设定任意值<br>guess_as_session的取值：ios, huawei, xiaomi [自己手头只有这些设备]<br>若要guess_as_session可以取其它值，需要设置：</p>
<p><code>gen_code_mitm.py</code> - <code>class GenCode(object)</code> - <code>__init__</code>方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">self.guess_session &#x3D; collections.OrderedDict(</span><br><span class="line">    ios&#x3D;re.compile(r&#39;iphone|ios&#39;, flags&#x3D;re.IGNORECASE),</span><br><span class="line">    xiaomi&#x3D;re.compile(r&#39;xiaomi|mi\+5|miui&#39;, flags&#x3D;re.IGNORECASE),</span><br><span class="line">    huawei&#x3D;re.compile(r&#39;huawei&#39;, flags&#x3D;re.IGNORECASE),</span><br><span class="line">    # 在这里增加其它的自己想要的值</span><br><span class="line">    # meizhu&#x3D;re.compile(r&#39;meizhu&#39;, flags&#x3D;re.IGNORECASE),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>



<h3 id="urls的配置-Api"><a href="#urls的配置-Api" class="headerlink" title="urls的配置 - Api"></a>urls的配置 - Api</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [</span><br><span class="line">    r&#39;x&#x2F;tree-game&#x2F;&#39;,</span><br><span class="line">    Api(r&#39;&#x2F;app&#x2F;re&#x2F;taskCenter&#x2F;info&#x2F;v1&#x2F;get&#39;,params_as_all&#x3D;True),            ,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p>urls中可以添加2类对象: str, Api</p>
<p><strong>Api类说明</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Api(object):</span><br><span class="line">    def __init__(self, url, f_name&#x3D;&#39;&#39;, log&#x3D;&#39;&#39;, params_as_all&#x3D;False, p_as_all_limit&#x3D;50, body_as_all&#x3D;False, f_p_enc: set&#x3D;None, f_b_enc: set&#x3D;None, f_p_arg: set&#x3D;None, f_p_kwarg: dict&#x3D;None, f_b_arg: set&#x3D;None, f_b_kwarg: dict&#x3D;None, content_type&#x3D;&#39;&#39;):</span><br></pre></td></tr></table></figure>
<p>参数说明</p>
<ul>
<li>url - 不需要完整的URL</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [</span><br><span class="line">    # 方式01：包含host</span><br><span class="line">    &#39;game-center-new.1sapp.com&#x2F;x&#x2F;open&#x2F;game&#39;,</span><br><span class="line">    </span><br><span class="line">    # 方式02：只有path</span><br><span class="line">    &#39;&#x2F;x&#x2F;open&#x2F;game&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>url - 通配: 一个URL生成多个api方法代码</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [</span><br><span class="line">    # 只要写&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;&#39;路径前缀, 所有以它为前缀的方法都会生成相应代码</span><br><span class="line">    # &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;status&#x2F;&#39;,</span><br><span class="line">    # &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;start&#x2F;&#39;,</span><br><span class="line">    # &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;stop&#x2F;&#39;,</span><br><span class="line">    # &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;done_task&#x2F;&#39;,</span><br><span class="line">    &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;&#39;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<ul>
<li>url - 通配与匹配顺序</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">urls &#x3D; [</span><br><span class="line">    # 当触发&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;done_task&#x2F;&#39;时，</span><br><span class="line">    # 因为&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;&#39;先添加并且也匹配</span><br><span class="line">    # 不会再寻找最佳匹配&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;done_task&#x2F;&#39;</span><br><span class="line">    # 所以会生成默认的方法名：score_task_v1_sleep_done_task</span><br><span class="line">    # 而不是：sleep_done_task</span><br><span class="line">    &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;&#39;,</span><br><span class="line">    Api(&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;done_task&#x2F;&#39;, f_name&#x3D;&#39;sleep_done_task&#39;)   </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">最佳实践：先具体[长], 后模糊[前缀]</span><br><span class="line"></span><br><span class="line">urls &#x3D; [</span><br><span class="line">    Api(&#39;score_task&#x2F;v1&#x2F;sleep&#x2F;done_task&#x2F;&#39;, f_name&#x3D;&#39;sleep_done_task&#39;)</span><br><span class="line">    &#39;score_task&#x2F;v1&#x2F;sleep&#x2F;&#39;,       </span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<ul>
<li>f_name - 指定方法名</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认方法名：</span><br><span class="line">    parse_result &#x3D; urlparse(request.url)</span><br><span class="line">    url_path &#x3D; parse_result.path</span><br><span class="line">    function_name &#x3D; re.sub(r&#39;[.&#x2F;-]&#39;, &#39;_&#39;, url_path).strip(&#39;_&#39;).lower()</span><br><span class="line">    </span><br><span class="line">比如：</span><br><span class="line">    urls &#x3D; [&#39;&#x2F;score_task&#x2F;v1&#x2F;walk&#x2F;count&#x2F;&#39;]</span><br><span class="line">    触发的url为：https:&#x2F;&#x2F;i-hl.snssdk.com&#x2F;score_task&#x2F;v1&#x2F;walk&#x2F;count&#x2F;</span><br><span class="line">默认：</span><br><span class="line">    def score_task_v1_walk_count(self)</span><br><span class="line">    </span><br><span class="line">指定后：    </span><br><span class="line">    urls &#x3D; [Api(&#39;&#x2F;score_task&#x2F;v1&#x2F;walk&#x2F;count&#x2F;&#39;,f_name&#x3D;&#39;walk_count&#39;)]</span><br><span class="line">    def walk_count(self):</span><br></pre></td></tr></table></figure>
<ul>
<li>log - 指定打印的日志信息</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认：</span><br><span class="line">    def score_task_v1_walk_count(self):</span><br><span class="line">        logging.info(&#39;score_task_v1_walk_count&#39;)</span><br><span class="line">指定后：</span><br><span class="line">    urls &#x3D; [Api(&#39;&#x2F;score_task&#x2F;v1&#x2F;walk&#x2F;count&#x2F;&#39;,log&#x3D;&#39;睡觉 - 领金币&#39;)]</span><br><span class="line">    def score_task_v1_walk_count(self):</span><br><span class="line">        logging.info(&#39;睡觉 - 领金币&#39;)     </span><br></pre></td></tr></table></figure>
<ul>
<li>params_as_all\body_as_all - 应对sign签名的问题</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">比如：</span><br><span class="line">    趣头条的&#39;任务&#39;界面，会调用</span><br><span class="line">    http:&#x2F;&#x2F;api.1sapp.com&#x2F;app&#x2F;re&#x2F;taskCenter&#x2F;info&#x2F;v1&#x2F;get</span><br><span class="line">    来获取任务列表\进度信息</span><br><span class="line">    params有一个字段：&quot;sign&quot;: &quot;1ad43dd2b7dbacc62b0e2b98e325483a&quot;</span><br><span class="line">    这个字段和其它字段是一个整体，且我们不能伪造sign的值</span><br><span class="line">    直接把整个params值拿来用</span><br><span class="line">默认：</span><br><span class="line">    def app_re_taskcenter_info_v1_get(self):</span><br><span class="line">        url &#x3D; self.urls[&#39;app&#x2F;re&#x2F;taskcenter&#x2F;info&#x2F;v1&#x2F;get&#39;]</span><br><span class="line">        params &#x3D; self._params_from(url)</span><br><span class="line">指定后：</span><br><span class="line">    urls &#x3D; [Api(r&#39;&#x2F;app&#x2F;re&#x2F;taskCenter&#x2F;info&#x2F;v1&#x2F;get&#39;,params_as_all&#x3D;True)]</span><br><span class="line">    def app_re_taskcenter_info_v1_get(self, params_as_all):</span><br><span class="line">        url &#x3D; self.urls[&#39;app&#x2F;re&#x2F;taskcenter&#x2F;info&#x2F;v1&#x2F;get&#39;]</span><br><span class="line">        params &#x3D; self._params_from(url)</span><br><span class="line">        params &#x3D; params_as_all</span><br><span class="line"></span><br><span class="line">    并会生成一个全局方法</span><br><span class="line">    def app_re_taskcenter_info_v1_get(user: User):</span><br><span class="line">        for item in user.params_as_all[&#39;&#x2F;app&#x2F;re&#x2F;taskCenter&#x2F;info&#x2F;v1&#x2F;get&#39;]:</span><br><span class="line">            user.app_re_taskcenter_info_v1_get(item)</span><br></pre></td></tr></table></figure>
<ul>
<li>p_as_all_limit - 没有实现</li>
<li>f_p_arg\f_b_arg - 输入参数</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">默认：</span><br><span class="line">    def actcenter_piggy_videoconfirm(self):</span><br><span class="line">        params &#x3D; self._params_from(url)     </span><br><span class="line">指定后：</span><br><span class="line">    urls &#x3D; [Api(r&#39;&#x2F;actcenter&#x2F;piggy&#x2F;videoConfirm&#39;, f_p_arg&#x3D;&#123;&#39;tag&#39;,&#39;count&#39;&#125;)]</span><br><span class="line">    def actcenter_piggy_videoconfirm(self, tag, count):</span><br><span class="line">        params &#x3D; self._params_from(url)</span><br><span class="line">        params[&#39;tag&#39;] &#x3D; tag</span><br><span class="line">        params[&#39;count&#39;] &#x3D; count</span><br><span class="line">&#96;&#96;&#96; </span><br><span class="line">* f_p_enc\f_b_enc - params_as_all 与 f_p_arg 的结合体</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;    </span><br><span class="line">类中方法 与f_p_arg\f_b_arg相同</span><br><span class="line">并会生成一个像params_as_all\body_as_all相似的全局方法</span><br><span class="line">    def v5_user_rewar_video_callback_json(self, p):</span><br><span class="line">        url &#x3D; self.urls[&#39;&#x2F;v5&#x2F;user&#x2F;rewar_video_callback.json&#39;]</span><br><span class="line">        data &#x3D; self._bodys_from(url)</span><br><span class="line">        data[&#39;p&#39;] &#x3D; p</span><br><span class="line">        </span><br><span class="line">def v5_user_rewar_video_callback_json(user: User):</span><br><span class="line">    for item in user.bodys_encry[&#39;&#x2F;v5&#x2F;user&#x2F;rewar_video_callback.json&#39;][&#39;p&#39;]:</span><br><span class="line">        user.v5_user_rewar_video_callback_json(item)    </span><br></pre></td></tr></table></figure>
<ul>
<li>f_p_kwarg\f_b_kwarg - 有默认值的输入参数</li>
</ul>
<h3 id="未实现需求"><a href="#未实现需求" class="headerlink" title="未实现需求"></a>未实现需求</h3><ol>
<li><p>类似动态变化可伪造的值，比如时间戳，没有实现自动生成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">def api_contains_timstamp(self):</span><br><span class="line">    #这句需要自己输入</span><br><span class="line">    params[&#39;ts&#39;] &#x3D; time.time() </span><br></pre></td></tr></table></figure>
</li>
<li><p>同品牌的2台手机，无法区分出session</p>
</li>
</ol>
]]></content>
      <tags>
        <tag>mitmproxy, python</tag>
      </tags>
  </entry>
  <entry>
    <title>cizixs的博客文章</title>
    <url>/2020/11/25/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0-cizixs/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul>
<li><a href="https://cizixs.com/2015/04/23/docker-basic-in-a-mindmap/"> 一张图入门 docker</a></li>
<li><a href="https://cizixs.com/2017/03/28/dockerfile-best-practice/">编写 Dockerfile 的最佳实践</a></li>
<li><a href="https://cizixs.com/2017/08/25/linux-cgroup/">docker 容器基础技术：linux cgroup 简介</a></li>
<li><a href="https://cizixs.com/2017/08/29/linux-namespace/">docker 容器基础技术：linux namespace 简介</a></li>
<li><a href="https://cizixs.com/2016/06/12/docker-network-modes-explained/">docker 容器的网络模式</a></li>
<li><a href="https://cizixs.com/2017/08/21/docker-udp-issue/">docker 容器网络下 UDP 协议的一个问题</a></li>
<li><a href="https://cizixs.com/2017/10/19/docker-calico-network/">docker 容器网络方案：calico 网络模型</a></li>
<li><a href="https://cizixs.com/2016/06/01/docker-default-network/">docker 容器默认的网络模型</a></li>
<li><a href="https://cizixs.com/2016/06/13/docker-overlay-network/">docker 跨主机网络：overlay 简介</a></li>
<li><a href="https://cizixs.com/2016/04/06/docker-images/">docker 镜像介绍</a></li>
<li><a href="https://cizixs.com/2017/08/04/docker-resources-limit/">使用 docker 对容器资源进行限制</a></li>
<li><a href="https://cizixs.com/2017/12/30/cncf-cloud-native-landscape/">CNCF 云原生容器生态系统概要</a></li>
<li><a href="https://cizixs.com/2017/05/23/container-network-cni/">CNI：容器网络接口</a></li>
<li><a href="https://cizixs.com/2017/11/05/oci-and-runc/">OCI 和 runc：容器标准化和 docker</a></li>
<li></li>
<li><a href="https://cizixs.com/2017/07/31/arp-protocol/">ARP 协议解析</a></li>
<li><a href="https://cizixs.com/2013/07/29/basic-regular-expression/">Basic Regular Expression</a></li>
<li></li>
</ul>
<h2 id="Go"><a href="#Go" class="headerlink" title="Go"></a>Go</h2><ul>
<li><a href="https://cizixs.com/2016/12/19/golang-json-guide/">Go 语言 JSON 简介</a></li>
<li><a href="https://cizixs.com/2016/08/17/golang-http-server-side/">go http 服务器编程</a></li>
<li><a href="https://cizixs.com/2017/03/21/http-proxy-and-golang-implementation/">HTTP 代理原理和实现</a></li>
<li><a href="https://cizixs.com/2015/10/06/http-resume-download/">HTTP 断点下载功能实现</a></li>
<li><a href="https://cizixs.com/2017/03/22/http-tunnel-proxy-and-golang-implementation/">HTTP 隧道代理原理和实现</a></li>
<li><a href="https://cizixs.com/2017/09/11/profiling-golang-program/">使用 pprof 和火焰图调试 golang 应用</a></li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li><a href="https://cizixs.com/2016/05/20/python-httpserver/">Python BaseHTTPServer 介绍</a></li>
<li><a href="https://cizixs.com/2013/08/10/python-configparser-module/">Python ConfigParser Module</a></li>
<li><a href="https://cizixs.com/2013/09/07/python-encoding/">Python 编码那些事</a></li>
<li><a href="https://cizixs.com/2014/12/21/python-decorator/">解析 python decorator </a></li>
<li><a href="https://cizixs.com/2015/06/11/python-collections-library-intruduction/">python collections 学习教程</a></li>
<li><a href="https://cizixs.com/2015/08/30/metaclass-in-python/">python metaclass 入门简介</a></li>
<li><a href="https://cizixs.com/2015/05/28/python-mock-usage/">python mock 库的使用</a></li>
<li><a href="https://cizixs.com/2014/11/08/understand-wsgi/">python wsgi 简介</a></li>
<li><a href="https://cizixs.com/2015/12/31/python-descriptor-introduction/">python 描述器简介</a></li>
</ul>
<ul>
<li></li>
<li><a href="https://cizixs.com/2013/09/06/RESTful-API-design/">RESTful API design</a></li>
<li><a href="https://cizixs.com/2014/12/20/sublime-tutorial-for-pythoner/">Sublime Text: python 程序员不完全指南</a></li>
<li><a href="https://cizixs.com/2013/08/10/use-jekyll-to-write-blog/">Use Jekyll to Write Blog</a></li>
<li><a href="https://cizixs.com/2014/04/10/ubuntu_repository_format_explained/">apt 背后的故事</a></li>
<li><a href="https://cizixs.com/2017/09/13/docker-aufs-storage-driver/">aufs 简介以及在 docker 中的使用</a></li>
<li><a href="https://cizixs.com/2016/01/20/dive-into-bottle/">bottle 源码解析</a></li>
<li><a href="https://cizixs.com/2014/03/05/c-string-function-implementation/">c string function implementation</a></li>
<li><a href="https://cizixs.com/2017/12/03/etcd-v2-go-client/">etcd go 语言 v2 客户端开发介绍</a></li>
<li><a href="https://cizixs.com/2016/08/02/intro-to-etcd/">etcd 使用入门</a></li>
<li><a href="https://cizixs.com/2016/07/16/flannel-source-code-insight/">flannel 源码分析</a></li>
<li><a href="https://cizixs.com/2016/06/15/flannel-overlay-network/">flannel 网络模型</a></li>
</ul>
<h2 id="Flask"><a href="#Flask" class="headerlink" title="Flask"></a>Flask</h2><ul>
<li><a href="https://cizixs.com/2017/03/08/flask-insight-session/">flask 源码解析：session</a></li>
<li><a href="https://cizixs.com/2017/01/13/flask-insight-context/">flask 源码解析：上下文</a></li>
<li><a href="https://cizixs.com/2017/01/22/flask-insight-response/">flask 源码解析：响应</a></li>
<li><a href="https://cizixs.com/2017/01/11/flask-insight-start-process/">flask 源码解析：应用启动流程</a></li>
<li><a href="https://cizixs.com/2017/01/10/flask-insight-introduction/">flask 源码解析：简介</a></li>
<li><a href="https://cizixs.com/2017/01/18/flask-insight-request/">flask 源码解析：请求</a></li>
<li><a href="https://cizixs.com/2017/01/12/flask-insight-routing/">flask 源码解析：路由</a></li>
<li></li>
<li><a href="https://cizixs.com/2017/04/07/kube-proxy-source-code-analysis/">kube-proxy 源码解析</a></li>
<li><a href="https://cizixs.com/2017/07/19/kubernetes-scheduler-source-code-analysis/">kubelet scheduler 源码分析：调度器的工作原理</a></li>
<li><a href="https://cizixs.com/2017/06/22/kubelet-source-code-analysis-part4-event/">kubelet 源码分析： 事件处理</a></li>
<li><a href="https://cizixs.com/2017/06/09/kubelet-source-code-analysis-part-3/">kubelet 源码分析：Garbage Collect</a></li>
<li><a href="https://cizixs.com/2017/06/07/kubelet-source-code-analysis-part-2/">kubelet 源码分析：pod 新建流程</a></li>
<li><a href="https://cizixs.com/2017/06/12/kubelet-source-code-analysis-part4-status-manager/">kubelet 源码分析：statusManager 和 probeManager</a></li>
<li><a href="https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/">kubelet 源码分析：启动流程</a></li>
</ul>
<h2 id="kubernete"><a href="#kubernete" class="headerlink" title="kubernete"></a>kubernete</h2><ul>
<li><a href="https://cizixs.com/2017/05/17/kubernetes-scheulder-affinity/">kubernetes 亲和性调度</a></li>
<li><a href="https://cizixs.com/2017/06/16/kubernetes-authentication-and-authorization/">kubernetes 权限管理</a></li>
<li><a href="https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/">kubernetes 简介： kubelet 和 pod</a></li>
<li><a href="https://cizixs.com/2016/11/07/kubernetes-intro-api-server/">kubernetes 简介：API Server 和 node</a></li>
<li><a href="https://cizixs.com/2017/03/27/kubernetes-introduction-controller-manager/">kubernetes 简介：controller manager 和自动扩容</a></li>
<li><a href="https://cizixs.com/2017/04/11/kubernetes-intro-kube-dns/">kubernetes 简介：kube-dns 和服务发现</a></li>
<li><a href="https://cizixs.com/2016/07/12/kubernetes-intro/">kubernetes 简介：kubernetes 架构介绍</a></li>
<li><a href="https://cizixs.com/2017/03/30/kubernetes-introduction-service-and-kube-proxy/">kubernetes 简介：service 和 kube-proxy 原理</a></li>
<li><a href="https://cizixs.com/2017/03/10/kubernetes-intro-scheduler/">kubernetes 简介：调度器和调度算法</a></li>
<li><a href="https://cizixs.com/2018/06/25/kubernetes-resource-management/">kubernetes 资源管理概述</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><p><a href="https://cizixs.com/2017/05/16/linux-lsof-primer/">linux lsof 命令使用指南</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/09/28/linux-vxlan/">linux 上实现 vxlan 网络</a></p>
</li>
<li><p><a href="https://cizixs.com/2018/01/13/linux-udp-packet-drop-debug/">linux 系统 UDP 丢包问题分析思路</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/01/18/linux-boot-process/">linux 系统启动过程</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/02/17/network-virtualization-ipvlan/">linux 网络虚拟化： ipvlan</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/02/14/network-virtualization-macvlan/">linux 网络虚拟化： macvlan</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/02/10/network-virtualization-network-namespace/">linux 网络虚拟化： network namespace 简介</a></p>
</li>
<li></li>
<li><p><a href="https://cizixs.com/2016/02/25/nova-service-insight/">nova compute service 启动过程</a></p>
</li>
<li><p><a href="https://cizixs.com/2016/02/01/nova-scheduler-insight/">nova scheduler 原理介绍和源码解析</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/01/09/pxe-boot-process/">pxe 自动安装系统流程分析</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/05/13/python-and-message-queue-one/">python 和消息机制（一）：消息队列简介</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/11/23/rabbitmq-concept-and-usage/">python 和消息机制（二）：Rabbitmq 概念和使用</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/12/04/raft-consensus-algorithm/">raft 一致性算法</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/03/24/salt-api-usage/">salt api 配置和使用</a></p>
</li>
<li><p><a href="https://cizixs.com/2018/08/25/knative-serverless-platform/">serverless 平台 knative 简介</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/03/29/basic-socket-programming/">socket 编程基础知识</a></p>
</li>
<li><p><a href="https://cizixs.com/2013/08/14/solve-sudoers-error-problem/">solve sudoers error problem</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/03/09/virtualbox-network-mode-explained/">virtualbox 常用网络模式解释和配置</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/09/25/vxlan-protocol-introduction/">vxlan 协议原理简介</a></p>
</li>
<li><p><a href="https://cizixs.com/2016/06/30/weave-network/">weave 网络模型</a></p>
</li>
<li><p><a href="https://cizixs.com/2013/12/08/why-evolution-is-true/">why evolution is true</a></p>
</li>
<li><p><a href="https://cizixs.com/2014/11/09/dive-into-wsgiref/">wsgiref 源码解析</a></p>
</li>
<li><p><a href="https://cizixs.com/2014/05/14/curl-automate-http/">【翻译】curl自动化http操作</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/09/21/what-is-a-web-framework/">【翻译】什么是 web 框架？</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/07/27/understand-tcp-ip-network-stack/">【翻译】理解 TCP/IP 网络栈</a></p>
</li>
<li><p><a href="https://cizixs.com/2018/08/26/what-is-istio/">什么是 istio</a></p>
</li>
<li><p><a href="https://cizixs.com/2016/11/22/coreos-docker-netns-issue/">使用 coreos 运行 docker 的 netns 问题</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/04/11/use-curl-to-analyze-request/">使用 curl 命令分析请求的耗时情况</a></p>
</li>
</ul>
<ul>
<li><p><a href="https://cizixs.com/2018/01/24/use-prometheus-and-grafana-to-monitor-linux-machine/">使用 promethues 和 grafana 监控自己的 linux 机器</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/04/27/sysdig-for-linux-system-monitor-and-analysis/">使用 sysdig 进行监控和调试 linux 机器</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/10/23/tc-netem-for-terrible-network/">使用 tc netem 模拟网络异常</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/08/16/vi-mode-in-tmux/">使用 vi 模式操作tmux 屏幕</a></p>
</li>
<li><p><a href="https://cizixs.com/2014/11/30/two-encryption-methods-and-cracks/">凯撒密码和维吉尼亚密码</a></p>
</li>
<li><p><a href="https://cizixs.com/2016/05/31/install-docker-dev-environment-on-mac/">在 mac 系统配置 docker 开发环境</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/03/15/container-ecosystem/">容器生态系统简介</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/03/12/tcpdump-introduction/">抓包神器 tcpdump 使用介绍</a></p>
</li>
<li><p><a href="https://cizixs.com/2013/07/31/programmer-hacker-and-others/">程序员、黑客、自由即其他</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/04/12/write-tftp-with-python-1/">编写自己的 tftp 客户端（1）</a></p>
</li>
<li><p><a href="https://cizixs.com/2017/01/03/how-slow-is-disk-and-network/">让 CPU 告诉你硬盘和网络到底有多慢</a></p>
</li>
<li><p><a href="https://cizixs.com/2016/12/12/restful-api-design-guide/">跟着 Github 学习 Restful HTTP API 设计</a></p>
</li>
<li><p><a href="https://cizixs.com/2015/10/01/linux-memory-management-through-free/">通过 free 命令理解 linux 内存管理</a></p>
</li>
<li><p><a href="https://cizixs.com/2014/10/19/text-manipulation-in-linux/">Linux 文本处理</a></p>
</li>
<li><p><a href="https://cizixs.com/2013/08/04/several-problems-working-with-githubjekyll-bootstrap/">Problems Working with Github+Jekyll</a></p>
</li>
</ul>
]]></content>
      <tags>
        <tag>cizixs</tag>
      </tags>
  </entry>
  <entry>
    <title>趣消除App自动化-成语消消乐-半自动化</title>
    <url>/2019/09/29/%E6%88%90%E8%AF%AD%E6%B6%88%E6%B6%88%E4%B9%90-%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>做为一个程序员，已成<code>中年油腻大叔</code>了？那怎么行，来<code>趣消除App</code>、<code>扶我起来学数学App</code>的<code>成语消消乐</code>游戏battle下</p>
<p>做为已毕业十几年的理科生，在这个游戏中的优势肯定不是成语容量，而是工作专业技能 – 上代码</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>App: <code>趣消除App</code>iOS版本、<code>扶我起来学数学App</code>版本<br>工具: mitmproxy、python、Charles<br>背景知识：mitmproxy、python、抓包</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>游戏界面上呈现的：<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaa8f83tbgj30xc0tn0vl.jpg" alt="App游戏界面"></p>
<p>网络呈现：<br>游戏是通过websocket协议来传输json格式的字符串，举<code>asking</code>消息如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ask_string&quot;: &quot;步不之来疏笔口平去重学青字斟浅之论暗明尊易伐道不云句来刊酌诛才师&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;asking&quot;,</span><br><span class="line">  &quot;scores&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;nick&quot;: &quot;吕耀辉&quot;,</span><br><span class="line">      ....</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;nick&quot;: &quot;xxxx&quot;,</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>成语答案：<code>answer</code>消息</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;answer&quot;: &quot;口诛笔伐&quot;,</span><br><span class="line">  &quot;answer_index&quot;: [</span><br><span class="line">    &quot;6&quot;,</span><br><span class="line">    &quot;29&quot;,</span><br><span class="line">    &quot;5&quot;,</span><br><span class="line">    &quot;21&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;type&quot;: &quot;answer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>目的是把上面的<code>&quot;ask_string&quot;: &quot;步不之来疏笔口平去重学青字斟浅之论暗明尊易伐道不云句来刊酌诛才师&quot;</code>解析为一个个成语</p>
<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>写2个文件：<code>chengyu_mitm.py</code>[代码文件]、<code>chengyu.text</code>[数据文件]</p>
<ul>
<li><code>chengyu_mitm.py</code>从<code>asking</code>消息里解析出<code>ask_string</code>到<code>chengyu.text</code>文件里查找是否包含相应的成语</li>
<li>如果包含成语，图形化、格式化显示结果</li>
<li><code>chengyu.text</code>文件刚开始是空的；在每局游戏结束时，游戏都会发送<code>game_result</code>消息给我们，里面有这局游戏的答案成语，把这些成语写到文件中</li>
<li>玩的局数越多，<code>chengyu.text</code>文件包含的成语越多，查找到答案的可能性越大</li>
</ul>
<p>所以我们只要关注：<code>asking</code>消息、<code>game_result</code>消息<br>如果要程序回复答案，可以关注下<code>answer</code>消息[客户端发给服务器的]</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>chengyu_mitm.py</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import collections</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line">&gt; mitmdump -s chengyu_mitm.py &#39;~u websock_m&#x2F;websock_message&#39;</span><br><span class="line">&#39;&#39;&#39;</span><br><span class="line"></span><br><span class="line">Red &#x3D; &#39;\033[0;31m&#39;</span><br><span class="line">Green &#x3D; &#39;\033[0;32m&#39;</span><br><span class="line">Yellow &#x3D; &#39;\033[0;33m&#39;</span><br><span class="line">Blue &#x3D; &#39;\033[0;34m&#39;</span><br><span class="line">Purple &#x3D; &#39;\033[0;35m&#39;</span><br><span class="line">Cyan &#x3D; &#39;\033[0;36m&#39;</span><br><span class="line">White &#x3D; &#39;\033[0;37m&#39;</span><br><span class="line"></span><br><span class="line">colors &#x3D; &#123;</span><br><span class="line">    0:Red,</span><br><span class="line">    1:Purple,</span><br><span class="line">    2:Yellow,</span><br><span class="line">    3:Blue,</span><br><span class="line">    4:White,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Chengyu(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.dictpath &#x3D; &#39;&#x2F;Users&#x2F;zhoujie&#x2F;chengyu.text&#39;</span><br><span class="line">        self.chengyu &#x3D; set()</span><br><span class="line">        with open(self.dictpath, &#39;rt&#39;) as f:</span><br><span class="line">            for line in f.readlines():</span><br><span class="line">                self.chengyu.add(line.strip())</span><br><span class="line"></span><br><span class="line">        self.answers &#x3D; list()</span><br><span class="line">        self.ask_string &#x3D; &#39;&#39;</span><br><span class="line"></span><br><span class="line">        # &#123;&#39;和&#39;:[1,8], &#39;我&#39;:[11]&#125;</span><br><span class="line">        self.char_indexs_dict &#x3D; dict()</span><br><span class="line"></span><br><span class="line">        # &#123;1:&#39;和&#39;, 8:&#39;和&#39;, 11:&#39;我&#39;&#125;</span><br><span class="line">        self.index_char_dict &#x3D; dict()</span><br><span class="line"></span><br><span class="line">        self.count &#x3D; 0</span><br><span class="line"></span><br><span class="line">        # 自动提交答案的网络发送次数</span><br><span class="line">        self.auto_send_count &#x3D; 0</span><br><span class="line"></span><br><span class="line">        # 自动发送的成语</span><br><span class="line">        self.auto_send_list &#x3D; list()</span><br><span class="line"></span><br><span class="line">        # 服务器确定正确的成语</span><br><span class="line">        self.ack_true_list &#x3D; list()</span><br><span class="line"></span><br><span class="line">        # &#123;&#39;中流砥柱&#39;:[1,9,21,25]&#125;</span><br><span class="line">        self.answer_indexs_dict &#x3D; dict()</span><br><span class="line"></span><br><span class="line">        # 查找到的错误答案</span><br><span class="line">        self.error_answers &#x3D; []</span><br><span class="line"></span><br><span class="line">        # 玩了多少局</span><br><span class="line">        self.play_times &#x3D; 0</span><br><span class="line"></span><br><span class="line">        self.firt_auto_answer &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # General lifecycle</span><br><span class="line">    def load(self, loader):</span><br><span class="line">        ctx.log.info(&#39;\033[1;31mevent: load\033[0m&#39;)</span><br><span class="line"></span><br><span class="line">    def configure(self, updated):</span><br><span class="line">        ctx.log.info(&#39;\033[1;31mevent: configure\033[0m&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # Websocket lifecycle</span><br><span class="line">    def websocket_message(self, flow):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Called when a WebSocket message is received from the client or</span><br><span class="line">            server. The most recent message will be flow.messages[-1]. The</span><br><span class="line">            message is user-modifiable. Currently there are two types of</span><br><span class="line">            messages, corresponding to the BINARY and TEXT frame types.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        ctx.log.info(&#39;\033[1;31m websocket_message \033[0m&#39;)</span><br><span class="line"></span><br><span class="line">        # get the latest message</span><br><span class="line">        message &#x3D; flow.messages[-1]</span><br><span class="line"></span><br><span class="line">        # simply print the content of the message</span><br><span class="line">        ctx.log.info(&#39;&#39;)</span><br><span class="line">        ctx.log.info(message.content)</span><br><span class="line">        ctx.log.info(&#39;&#39;)</span><br><span class="line"></span><br><span class="line">        m &#x3D; json.loads(message.content)</span><br><span class="line">        message_type &#x3D; m[&#39;type&#39;]</span><br><span class="line">        if m.get(&#39;ask_string&#39;):</span><br><span class="line">            self.ask_string &#x3D; m[&#39;ask_string&#39;]</span><br><span class="line">            # 计算答案</span><br><span class="line">            self.find_answers_v2(self.ask_string)</span><br><span class="line">            self.play_times +&#x3D; 1</span><br><span class="line"></span><br><span class="line">        # &#123;&quot;answer&quot;: &quot;\u957f\u9a71\u76f4\u5165&quot;, &quot;answer_index&quot;: [&quot;0&quot;, &quot;20&quot;, &quot;43&quot;, &quot;41&quot;], &quot;type&quot;: &quot;answer&quot;&#125;</span><br><span class="line">        if message_type &#x3D;&#x3D; &#39;answer&#39;:</span><br><span class="line">            self.answer_indexs_dict[m[&#39;answer&#39;]] &#x3D; m[&#39;answer_index&#39;]</span><br><span class="line"></span><br><span class="line">        # 删除已回答正确的答案</span><br><span class="line">        ack &#x3D; False</span><br><span class="line"></span><br><span class="line">        # &#123;&quot;answer&quot;:&quot;长驱直入&quot;,&quot;type&quot;:&quot;answer_ack&quot;,&quot;seq&quot;:0,&quot;ack&quot;:1&#125;</span><br><span class="line">        if m.get(&#39;ack&#39;) &#x3D;&#x3D; 1:</span><br><span class="line"></span><br><span class="line">            answer &#x3D; m[&#39;answer&#39;]</span><br><span class="line">            self.ack_true_list.append(answer)</span><br><span class="line">            answer_index &#x3D; self.answer_indexs_dict.get(answer,[])</span><br><span class="line">            for i in answer_index:</span><br><span class="line">                self.index_char_dict[int(i)] &#x3D; &#39;  &#39;</span><br><span class="line"></span><br><span class="line">            for c,i in zip(answer,answer_index):                </span><br><span class="line">                indexs &#x3D; self.char_indexs_dict[c]</span><br><span class="line">                indexs.remove(int(i))</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                ack &#x3D; True</span><br><span class="line">                self.answers.remove(m[&#39;answer&#39;])</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line">        if message_type &#x3D;&#x3D; &#39;answer_ack&#39; and m.get(&#39;ack&#39;) &#x3D;&#x3D; 0:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 自动答题</span><br><span class="line">        if message_type &#x3D;&#x3D; &#39;answer_ack&#39; or self.firt_auto_answer:</span><br><span class="line">            </span><br><span class="line">            self.auto_answer(flow)</span><br><span class="line"></span><br><span class="line">        # 显示答案</span><br><span class="line">        if len(self.ask_string):</span><br><span class="line">            self.print_answers()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if message_type &#x3D;&#x3D; &#39;game_result&#39;:</span><br><span class="line">            # 把答案增加到内存字典中</span><br><span class="line">            self.__add_new_worlds_to_memory(m)</span><br><span class="line"></span><br><span class="line">            self.reset_data_to_init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def websocket_end(self, flow):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            A websocket connection has ended.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ctx.log.info(&#39;\033[1;31m websocket_end \033[0m&#39;)</span><br><span class="line"></span><br><span class="line">        self.reset_data_to_init()</span><br><span class="line"></span><br><span class="line">        if self.play_times % 5 &#x3D;&#x3D; 0:</span><br><span class="line">            with open(self.dictpath, &#39;wt&#39;) as f:</span><br><span class="line">                l &#x3D; list(self.chengyu)</span><br><span class="line">                l.sort()</span><br><span class="line">                for item in l:</span><br><span class="line">                    f.write(item)</span><br><span class="line">                    f.write(&#39;\n&#39;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ---------------------------------------------</span><br><span class="line">    def find_answers_v2(self, ask_string):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">            在内存成语字典查找答案</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        ask_set &#x3D; set(ask_string)</span><br><span class="line">        for i, c in enumerate(ask_string):</span><br><span class="line">            self.char_indexs_dict.setdefault(c, []).append(i)</span><br><span class="line">        self.index_char_dict &#x3D; dict( zip(range(len(ask_string)), ask_string))</span><br><span class="line"></span><br><span class="line">        used_chars &#x3D; set()</span><br><span class="line">        # 找到的的成语中各异字符为2个的答案数量：如 [真真假假]</span><br><span class="line">        answer_2chars_count &#x3D; 0</span><br><span class="line">        max_count &#x3D; len(ask_string) &#x2F; 4</span><br><span class="line">        for item in self.chengyu:</span><br><span class="line">            item_set &#x3D; set(item)</span><br><span class="line">            if not (item_set - ask_set):</span><br><span class="line">                self.answers.append(item)</span><br><span class="line">                used_chars.update(item_set)</span><br><span class="line">                if len(item_set)&lt;4:</span><br><span class="line">                    answer_2chars_count +&#x3D; 1</span><br><span class="line">                if len(self.answers) - answer_2chars_count &gt;&#x3D; max_count and used_chars &gt;&#x3D; ask_set:</span><br><span class="line">                    self.count &#x3D; len(self.answers)</span><br><span class="line">                    return</span><br><span class="line">        self.count &#x3D; len(self.answers)</span><br><span class="line"></span><br><span class="line">    def auto_answer(self, flow):</span><br><span class="line">        while len(self.answers) &gt; 0:</span><br><span class="line">            item &#x3D; self.answers[0]</span><br><span class="line">            answer_index &#x3D; []</span><br><span class="line">            counter &#x3D; collections.Counter(item)</span><br><span class="line"></span><br><span class="line">            b_continue &#x3D; False</span><br><span class="line">            for char, count in counter.items():</span><br><span class="line">                if len(self.char_indexs_dict[char]) &lt; count:</span><br><span class="line">                    self.error_answers.append(item)</span><br><span class="line">                    self.answers.remove(item)</span><br><span class="line">                    b_continue &#x3D; True</span><br><span class="line">                    break # break for</span><br><span class="line"></span><br><span class="line">            if b_continue:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            char_index &#x3D; &#123;&#125;</span><br><span class="line">            for c in item:                </span><br><span class="line">                x &#x3D; char_index.get(c, 0)</span><br><span class="line">                index &#x3D; self.char_indexs_dict[c][x]</span><br><span class="line">                answer_index.append( str(index) )</span><br><span class="line">                char_index[c] &#x3D; x+1</span><br><span class="line"></span><br><span class="line">            if len(set(answer_index)) &lt; 4:</span><br><span class="line">                ctx.log.error(f&#39;?算法有错误：&#123;answer_index&#125; 小于4&#39;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            send_message &#x3D; &#123;</span><br><span class="line">                &#39;answer&#39;: item,</span><br><span class="line">                &#39;answer_index&#39;: answer_index,</span><br><span class="line">                &#39;type&#39;: &#39;answer&#39;</span><br><span class="line">            &#125;</span><br><span class="line">            mm &#x3D; json.dumps(send_message)</span><br><span class="line">            # -----------------------</span><br><span class="line">            print(mm)</span><br><span class="line">            # -----------------------</span><br><span class="line">            self.answer_indexs_dict[item] &#x3D; answer_index</span><br><span class="line">            # 向服务器发送消息</span><br><span class="line">            if not flow.ended and not flow.error:</span><br><span class="line">                self.firt_auto_answer &#x3D; False</span><br><span class="line">                self.auto_send_count +&#x3D; 1</span><br><span class="line">                self.auto_send_list.append(item)</span><br><span class="line">                self.answers.remove(item)</span><br><span class="line">                time.sleep(1.5)</span><br><span class="line">                flow.inject_message(flow.server_conn, mm)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __add_new_worlds_to_memory(self, m):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">            把答案增加到内存字典中</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        for answer in m[&#39;all_answer&#39;]:</span><br><span class="line">            self.chengyu.add(answer[&#39;phrase&#39;])</span><br><span class="line"></span><br><span class="line">        ctx.log.info(&#39;\033[1;31m 共收录&#123;&#125;个成语 \033[0m&#39;.format(len(self.chengyu)))</span><br><span class="line">        ctx.log.info(f&#39;\033[1;31m 共玩了 &#123;self.play_times&#125; 局\033[0m&#39;)</span><br><span class="line"></span><br><span class="line">    def print_answers(self):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">            图形化、色彩化显示答案</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        self.print_color(self.ask_string)</span><br><span class="line">        self.print_color(&#39;共找到 &#123;&#125;&#x2F;&#123;&#125; 个成语&#39;.format(self.count, len(self.ask_string)&#x2F;&#x2F;4))</span><br><span class="line">        self.print_color(&#39;错误成语 &#123;&#125;&#39;.format(self.error_answers))</span><br><span class="line">        self.print_color(&#39;共自动 &#123;&#125; 次提交&#39;.format(self.auto_send_count))</span><br><span class="line">        self.print_color(&#39;自动&#123;:2&#125;个：&#123;&#125;&#39;.format(len(self.auto_send_list),self.auto_send_list))</span><br><span class="line">        self.print_color(&#39;确认&#123;:2&#125;个：&#123;&#125;&#39;.format(len(self.ack_true_list),self.ack_true_list))</span><br><span class="line">        for item in self.answers:</span><br><span class="line">            self.print_color(item)</span><br><span class="line">            self.print_matrix(item)</span><br><span class="line"></span><br><span class="line">        if (not self.answers) and self.index_char_dict:</span><br><span class="line">            self.print_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def print_matrix(self, item &#x3D; []):</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        item: &#39;腊尽春回&#39; or []</span><br><span class="line">        &#39;&#39;&#39;</span><br><span class="line">        chars_in_line &#x3D; 6</span><br><span class="line">        length &#x3D; len(self.ask_string)</span><br><span class="line"></span><br><span class="line">        lines &#x3D; (length + chars_in_line - 1) &#x2F;&#x2F; chars_in_line</span><br><span class="line">        PADDING &#x3D; &#39; &#39;*(lines * chars_in_line - length)</span><br><span class="line">        is_need_padding &#x3D; len(PADDING) !&#x3D; 0</span><br><span class="line"></span><br><span class="line">        global colors, White</span><br><span class="line">        </span><br><span class="line">        self.print_color(&#39;--&#39;*chars_in_line)</span><br><span class="line"></span><br><span class="line">        for i, c in self.index_char_dict.items():</span><br><span class="line">            end &#x3D; &#39;&#39;</span><br><span class="line">            if (i+1) % chars_in_line &#x3D;&#x3D; 0 or (i+1) &#x3D;&#x3D; length:</span><br><span class="line">                end &#x3D; &#39;\n&#39;</span><br><span class="line"></span><br><span class="line">            color &#x3D; White</span><br><span class="line">            if c in item:</span><br><span class="line">                color &#x3D; colors[item.index(c)]</span><br><span class="line"></span><br><span class="line">            line, first &#x3D; divmod(i, chars_in_line)</span><br><span class="line">            if is_need_padding and first &#x3D;&#x3D; 0 and (line + 1 &#x3D;&#x3D; lines):</span><br><span class="line">                c &#x3D; PADDING + c</span><br><span class="line"></span><br><span class="line">            self.print_color(c, end&#x3D;end, front_color&#x3D;color)</span><br><span class="line"></span><br><span class="line">        self.print_color(&#39;--&#39;*chars_in_line)</span><br><span class="line"></span><br><span class="line">    def print_color(self, message, end&#x3D;&#39;\n&#39;, front_color&#x3D;Red):</span><br><span class="line">        print(f&#39;&#123;front_color&#125;&#123;message&#125;\033[0m&#39;, end&#x3D;end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def reset_data_to_init(self):</span><br><span class="line">        self.ask_string &#x3D; &#39;&#39;</span><br><span class="line">        self.answers.clear()</span><br><span class="line">        self.index_char_dict.clear()</span><br><span class="line"></span><br><span class="line">        self.count &#x3D; 0</span><br><span class="line">        self.auto_send_count &#x3D; 0</span><br><span class="line"></span><br><span class="line">        self.answer_indexs_dict.clear()</span><br><span class="line">        self.char_indexs_dict.clear()</span><br><span class="line">        self.error_answers.clear()</span><br><span class="line">        self.ack_true_list.clear()</span><br><span class="line">        self.auto_send_list.clear()</span><br><span class="line">        self.firt_auto_answer &#x3D; True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons &#x3D; [</span><br><span class="line">    Chengyu()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">if __name__ &#x3D;&#x3D; &quot;__main__&quot;:</span><br><span class="line">    c &#x3D; Chengyu()</span><br><span class="line"></span><br><span class="line">    ask_string &#x3D; &#39;腊见家义降德若功赎仁判悲生升道肘两身乐极尽立罪春命明回人捉襟性暗&#39;</span><br><span class="line">    ask_string &#x3D; &#39;来戴恶自唇而怙到生二不马亡竹锲寒擒梅香听寒星圆其十贼其鸟舍悛口一自不月披青擒王说曝手然擒一齿齿石&#39;</span><br><span class="line">    ask_string &#x3D; &#39;侧拨扮相大拔挈然纲打富提敲如涌门见助济行踽全弄轩责刀危踽击贫独波可云岌日班思求斧乔备泉领旁岌劫装&#39;</span><br><span class="line">    c.ask_string &#x3D; ask_string</span><br><span class="line">    c.find_answers_v2(ask_string)</span><br><span class="line">    print(c.answers)</span><br><span class="line">    c.print_answers()</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>chengyu.text</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一劳永逸</span><br><span class="line">一掷千金</span><br><span class="line">一曝十寒</span><br><span class="line">一石二鸟</span><br><span class="line">一筹莫展</span><br><span class="line">一落千丈</span><br><span class="line">一衣带水</span><br><span class="line">一语破的</span><br></pre></td></tr></table></figure>

<p><strong>注意：<code>self.dictpath = &#39;/Users/xxx/chengyu.text&#39;</code> 一定要修改成你自己的chengyu.text所在路径</strong></p>
<h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaa8ni4a5fj30yg0liacl.jpg" alt="运行效果"></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></li>
<li><a href="https://kaazing.com/demos/">https://kaazing.com/demos/</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/simple/websocket_messages.py">https://github.com/mitmproxy/mitmproxy/blob/master/examples/simple/websocket_messages.py</a></li>
<li><a href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/complex/websocket_inject_message.py">https://github.com/mitmproxy/mitmproxy/blob/master/examples/complex/websocket_inject_message.py</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>我的阅读列表</title>
    <url>/2019/09/27/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul>
<li><a href="https://blog.frytea.com/archives/504/">加速各种 GitHub 资源拉取</a></li>
<li><a href="https://cloverkits.github.io/2018/08/12/%E5%A6%82%E4%BD%95%E7%94%A8%E5%A5%BD%E8%B0%B7%E6%AD%8C%E7%AD%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/">如何用好谷歌等搜索引擎</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html">汇编语言入门教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html">理解字节序</a></li>
<li><a href="http://jalan.space/2019/11/26/2019/binary-show/">深入浅出：举个例子解读原码、反码与补码</a></li>
<li><a href="http://deerchao.net/tutorials/regex/regex.htm">正则表达式30分钟入门教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html">YAML 语言教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html">理解OAuth 2.0</a></li>
<li><a href="https://www.jianshu.com/p/65225f50fe76">基于python flask详述 OAuth 2.0 的运作流程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html">RESTful API 最佳实践</a></li>
<li><a href="https://www.zhihu.com/question/19793879">基于python的scrapy爬虫，关于增量爬取是怎么处理的？</a></li>
<li><a href="https://juejin.cn/post/6898093501376905230">用js写一个js解释器</a></li>
<li><a href="https://www.iosdevlog.com/2019-01-03-nlp/">自然语言处理简明教程</a></li>
</ul>
<h2 id="Vim"><a href="#Vim" class="headerlink" title="Vim"></a>Vim</h2><ul>
<li><a href="https://www.kawabangga.com/vim%e7%b3%bb%e5%88%97">Vim系列教程</a></li>
<li><a href="https://github.com/iggredible/Learn-Vim">Learn-Vim</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/09/vimrc.html">Vim 配置入门</a></li>
<li><a href="https://www.jianshu.com/p/923aec861af3">Mac下配置Vim</a></li>
<li><a href="https://blog.csdn.net/JasonDing1354/article/details/45372007">使用map自定义快捷键</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/37352209">VimScript 五分钟入门</a></li>
</ul>
<h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul>
<li><a href="https://book.douban.com/subject/30357170/">《我的第一本算法书》</a></li>
<li><a href="https://time.geekbang.org/column/intro/126">极客时间-数据结构与算法之美</a></li>
<li><a href="https://time.geekbang.org/course/intro/130">极客时间-算法面试通关40讲</a></li>
<li><a href="http://aaaron7.github.io/blog/algorithm/kmp-explain">可能是最容易理解的 KMP 教程</a></li>
<li><a href="https://github.com/halfrost/LeetCode-Go">LeetCode-Go</a></li>
</ul>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul>
<li><a href="https://time.geekbang.org/column/intro/85">极客时间-趣谈网络协议</a></li>
<li><a href="https://www.amazon.cn/dp/B00VE6RYPS">《Wireshark网络分析就这么简单》</a></li>
<li><a href="https://mp.weixin.qq.com/s/WvjQQRRdpMIeArblGV94Tg">《Wireshark网络抓包从入门到熟练》</a> </li>
<li><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html">The First Few Milliseconds of an HTTPS Connection</a> </li>
<li><a href="https://juejin.im/post/5c98482c5188252d9559247e">Android 网络优化，使用 HTTPDNS 优化 DNS，从原理到 OkHttp 集成</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html">curl 的用法指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html">curl 网站开发指南</a></li>
<li><a href="http://cizixs.com/2017/04/11/use-curl-to-analyze-request/">使用 curl 命令分析请求的耗时情况</a></li>
<li><a href="https://mp.weixin.qq.com/s/nAY46Cs5TURFnINv_BLb7Q">在Linux中使用curl命令参数详解</a></li>
<li><a href="https://www.open-open.com/lib/view/open1419826381531.html">Nginx 配置从零开始</a></li>
<li><a href="https://www.open-open.com/news/view/19493be">https://www.open-open.com/news/view/19493be</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34474787">室友不敢深夜打游戏篇一：ping/ICMP学以致用</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34897282">室友不敢深夜打游戏篇二：如何用python-scapy进行arp欺骗</a></li>
</ul>
<h2 id="Docker"><a href="#Docker" class="headerlink" title="Docker"></a>Docker</h2><ul>
<li><a href="https://cizixs.com/2017/03/28/dockerfile-best-practice/">编写 Dockerfile 的最佳实践</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html">Docker 入门教程</a></li>
<li><a href="https://www.dongwm.com/post/docker-machine-and-swarm/">Python项目容器化实践(二) - Docker Machine和Docker Swarm</a></li>
</ul>
<h2 id="爬虫"><a href="#爬虫" class="headerlink" title="爬虫"></a>爬虫</h2><ul>
<li><a href="https://zhoujie903.github.io/2020/12/19/%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/">爬虫逆向阅读列表</a></li>
</ul>
<h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul>
<li><a href="https://cjting.me/2020/10/31/tinytorrent-a-deno-bt-downloader">从头写一个 Deno 的 BitTorrent 下载器</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html">SSH原理与运用（一）：远程登录</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html">SSH原理与运用（二）：远程登录</a></li>
<li><a href="https://lotabout.me/2019/SSH-Port-Forwarding/">SSH 端口转发教程</a></li>
<li><a href="https://www.jianshu.com/p/defcfdc49b89?utm_campaign=hugo&utm_medium=reader_share&utm_content=note">SSH 技巧</a></li>
<li><a href="https://mp.weixin.qq.com/s/KvP55uhq8fGd8NPvXdw0Vg">ssh密钥对登录安全吗？原理篇</a></li>
<li><a href="https://imququ.com/post/multiple-ssh-keys-with-different-hosts.html">针对不同主机使用不同 SSH Key</a></li>
</ul>
<h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul>
<li><a href="https://www.kawabangga.com/posts/3084">一些命令行工具的增强版</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/12/mktemp.html">Bash 脚本如何创建临时文件：mktemp 命令和 trap 命令教程</a></li>
<li><a href="https://cizixs.com/2017/05/16/linux-lsof-primer/">lsof 命令使用指南</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/11/awk.html">awk 入门教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2020/08/rsync.html">rsync 用法教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html">xargs 命令教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html">Bash 脚本 set 命令教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html">命令行通配符教程</a></li>
<li><a href="https://www.kawabangga.com/posts/2819">Shell单引号、双引号和反引号的区别</a></li>
<li><a href="http://www.apress.com/br/book/9781484201220">Pro Bash Programming, Second Edition</a></li>
<li><a href="https://weibo.com/u/2674868673">linux命令行精选网</a></li>
<li><a href="https://blog.csdn.net/Hello_Hwc/article/details/40918385">linux常用命令-帮助命令-授之以渔</a></li>
<li><a href="https://github.com/jlevy/the-art-of-command-line">the-art-of-command-line</a></li>
<li><a href="http://kishorelive.com/2011/12/05/printing-colors-in-the-terminal/">Printing colors in the terminal
</a></li>
</ul>
<h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul>
<li><a href="https://cizixs.com/2017/02/10/network-virtualization-network-namespace/">linux 网络虚拟化： network namespace 简介</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html">Linux 的启动流程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html">Systemd 入门教程：命令篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html">Systemd 入门教程：实战篇</a></li>
<li><a href="https://cuiqingcai.com/6284.html">详解 Linux 下的用户管理、用户组管理和权限管理</a></li>
</ul>
<h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2><ul>
<li><a href="https://www.cnblogs.com/finlay/p/3665302.html">图像处理：图像灰度化</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/43092916">用Python识别验证码</a></li>
<li><a href="https://www.the5fire.com/980.html">Python 中使用 Pillow 处理图片增加水印</a></li>
<li><a href="https://saucer-man.com/python/60.html">python3 pillow模块</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/115317146">滑块验证码缺口识别技术分享02</a></li>
<li><a href="https://blog.csdn.net/m0_38007695/article/details/82794454">OpenCV–Python 图像平滑之二维离散卷积</a></li>
<li><a href="https://blog.csdn.net/m0_38007695/article/details/82718107">OpenCV–Python 图像增强</a></li>
</ul>
<h2 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h2><ul>
<li><a href="https://www.douban.com/note/686222265/">CTF从入门到放弃</a></li>
<li><a href="https://www.jianshu.com/u/f5a5bfa4f659">Sqli-Labs</a></li>
<li><a href="https://thief.one/2017/05/19/1/">【渗透神器系列】搜索引擎</a></li>
<li><a href="https://www.jianshu.com/p/cf7f646b3448">使用sqlmap曲折渗透某服务器</a></li>
</ul>
<h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul>
<li><a href="http://es6.ruanyifeng.com/">ECMAScript 6 入门</a></li>
<li><a href="http://www.jianshu.com/p/cd3fee40ef59">前端基础进阶系列</a></li>
<li><a href="https://github.com/mqyqingfeng/Blog">JavaScript深入系列</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2018/06/javascript-this.html">JavaScript 的 this 原理</a></li>
</ul>
<h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul>
<li><a href="https://www.jianshu.com/p/a4d0a1c7baae">iOS阅读列表</a></li>
</ul>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul>
<li><a href="https://zhoujie903.github.io/2019/09/27/Python%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/">Python阅读列表</a></li>
</ul>
<h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul>
<li><a href="https://book.douban.com/subject/30288107/">Node.js实战 第2版</a></li>
<li><a href="https://book.douban.com/subject/25985946/">Node Cookbook Second Edition</a></li>
<li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00GOM5IL4">深入浅出Node.js</a></li>
<li><a href="https://github.com/alsotang/node-lessons">Node.js 包教不包会</a></li>
</ul>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul>
<li><a href="https://yanbin.blog/flask-vue-js-integration-dev-deploy/">Flask 和 Vue.js 开发及整合部署实例</a></li>
<li><a href="https://yanbin.blog/flask-vue-js-integrate-with-bootstrap-bootstrapvue/">Flask, Vue.js 中集成 Bootstrap/BootstrapVue</a></li>
<li><a href="https://blog.csdn.net/jmilk/article/details/53986044">用 Flask 来写个轻博客</a></li>
<li><a href="https://book.douban.com/subject/30293851/">Flask Web开发：基于Python的Web应用开发实战</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html">全文搜索引擎 Elasticsearch 入门教程</a></li>
<li><a href="https://cuiqingcai.com/6214.html">Elasticsearch 基本介绍及其与 Python 的对接实现</a></li>
</ul>
<h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html">Flex 布局教程：语法篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-examples.html">Flex 布局教程：实例篇</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/03/grid-layout-tutorial.html">CSS Grid 网格布局教程</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2019/11/css-position.html">CSS 定位详解</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2010/03/css_cookbook.html">CSS使用技巧</a></li>
<li><a href="https://book.douban.com/subject/30395202/">Vue.js项目实战</a></li>
<li><a href="https://book.douban.com/subject/25878992/">HTML5与CSS3基础教程 第8版</a></li>
<li><a href="https://www.bignerdranch.com/books/front-end-web-development/">Front-End Web Development The Big Nerd Ranch Guide</a></li>
<li><a href="http://www.imooc.com/learn/859">Handlebars模板引擎</a></li>
<li><a href="https://mrleo.gitbooks.io/books/content/resource/spy-debugger.html">https://mrleo.gitbooks.io/books/content/resource/spy-debugger.html</a></li>
</ul>
<h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><ul>
<li><a href="https://book.douban.com/subject/30192800/">Python神经网络编程</a></li>
<li><a href="http://www.ituring.com.cn/book/1921">深度学习入门：基于Python的理论与实现(英文名：Deep Learning From Scratch)</a></li>
<li><a href="http://www.ituring.com.cn/book/2599">Python深度学习(英文名：Deep Learning With Python)</a></li>
</ul>
<h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><ul>
<li><p><a href="https://book.douban.com/subject/11577300/">Go语言编程</a></p>
</li>
<li><p><a href="https://www.ituring.com.cn/book/2688">Python数据分析实战</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/30147778/">Python机器学习基础教程</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/24841239/">SQL基础教程（第2版）</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/25908672/">两周自制脚本语言</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/30283996/">利用Python进行数据分析 第2版</a></p>
</li>
<li><p><a href="https://item.jd.com/11942019.html">图解密码技术</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/4010128/">漫画统计学</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/7056708/">深入浅出统计学</a></p>
</li>
<li><p><a href="http://item.jd.com/12207223.html?dist=">精通Scrapy网络爬虫</a></p>
</li>
<li><p><a href="https://book.douban.com/subject/26762311/">编译系统透视</a></p>
</li>
</ul>
<h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2>]]></content>
  </entry>
  <entry>
    <title>越战越勇-喜剧版</title>
    <url>/2020/10/12/%E8%B6%8A%E6%88%98%E8%B6%8A%E5%8B%87-%E5%96%9C%E5%89%A7%E7%89%88/</url>
    <content><![CDATA[<ul>
<li><a href="https://tv.cctv.com/2020/06/17/VIDEIyx6FYevKWWyl4uKdJos200617.shtml">《越战越勇》 20200617 喜剧版</a></li>
<li><a href="https://tv.cctv.com/2020/05/06/VIDEr7mqE4CkbCgOttbD8Dpo200506.shtml">《越战越勇》 20200506 喜剧经典版</a></li>
<li><a href="http://tv.cctv.com/2018/08/12/VIDE5SDsVjWc6Da6qJMPnDla180812.shtml">《越战越勇》 20180812 喜剧版 第二季总决赛</a></li>
<li><a href="http://tv.cctv.com/2018/08/05/VIDEYdoUDllnlJwBCUS7E0nJ180805.shtml">《越战越勇》 20180805 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2018/07/29/VIDELxITNkec5ZHv6FllpaC2180729.shtml">《越战越勇》 20180729 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2018/07/22/VIDE9gaf9uibq9UwlEjAIPaQ180722.shtml">《越战越勇》 20180722 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2018/06/25/VIDEkgl6lnlWTwUJqYHv5EfW180625.shtml">《越战越勇》 20180624 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2018/06/17/VIDEek0n9ZaDDUu6sprpN00g180617.shtml">《越战越勇》 20180617 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2017/01/13/VIDEefvf5xJHQalPzSxcm2Wd170113.shtml">《越战越勇》 20170113 喜剧版 第一季总决赛</a></li>
<li><a href="http://tv.cctv.com/2017/01/06/VIDEiTz2j9la5TMQ9cEmdwP5170106.shtml">《越战越勇》 20170106 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2016/12/30/VIDEknsJKzt0ugIPtwTsKSuI161230.shtml">《越战越勇》 20161230 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2016/12/23/VIDEj3mSlQis0XmO2cOe7mZm161223.shtml">《越战越勇》 20161223 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2016/12/16/VIDEzPSOHCFHFgeKT45uoEFP161216.shtml">《越战越勇》 20161216 喜剧版</a></li>
<li><a href="http://tv.cctv.com/2016/12/09/VIDEYTw2Pmuqn6NBCzA7NZqR161209.shtml">《越战越勇》 20161209 喜剧版</a></li>
</ul>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读列表 - App逆向</title>
    <url>/2020/12/19/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8-App%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><ul>
<li><a href="https://bbs.pediy.com/thread-258776.htm">记一次frida实战——对某视频APP的脱壳、hook破解、模拟抓包、协议分析一条龙服务</a></li>
<li><a href="https://eternalsakura13.com/2020/07/04/frida/">Frida Android hook</a></li>
<li><a href="https://bbs.pediy.com/thread-265160.htm">Frida 使用经验交流分享</a></li>
<li><a href="https://github.com/r0ysue/AndroidSecurityStudy">Frida 系列文章</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&mid=2457739465&idx=1&sn=39368d75b1cc8a42dff7884024b79a11">介绍下那个可以让你为所欲为的神器 Xposed</a></li>
<li><a href="https://www.anquanke.com/post/id/197657">实用Frida进阶：内存漫游、hook anywhere、抓包</a></li>
</ul>
<ul>
<li><a href="https://mp.weixin.qq.com/s/YyDP_Lfk7kxOZf7F5SViLw">安卓 App 逆向课程一之环境配置</a></li>
<li><a href="https://mp.weixin.qq.com/s/5LpaRY1O9br1ZnRNA-gH6Q">精品连载丨安卓 App 逆向课程之二逆向神器 frida 的介绍</a></li>
<li><a href="https://mp.weixin.qq.com/s/F_UGRoAsfDW4SAa7cXMKrg">精品连载丨安卓 App 逆向课程之三 frida 注入 Okhttp 抓包上篇</a></li>
<li><a href="https://mp.weixin.qq.com/s/PICqN6K_LFGHkjyiXkPzUw">精品连载丨安卓 App 逆向课程之四 frida 注入 Okhttp 抓包中篇</a></li>
<li><a href="https://mp.weixin.qq.com/s/SBEKXSO6LrFYsO5pOtfxJA">精品连载丨安卓 App 逆向课程之五 frida 注入 Okhttp 抓包下篇</a></li>
</ul>
<h2 id="抓包"><a href="#抓包" class="headerlink" title="抓包"></a>抓包</h2><ul>
<li><a href="https://blog.csdn.net/linuxnews/article/details/51900900">为什么Wireshark无法解密HTTPS数据</a></li>
<li><a href="https://www.jianshu.com/p/75b3ad732183">Drony配合Charles实现App定向抓包</a></li>
<li><a href="https://juejin.im/post/5cc313755188252d6f11b463">Android平台HTTPS抓包解决方案及问题分析</a></li>
<li><a href="https://www.52pojie.cn/thread-1213657-1-1.html">android系统https抓包问题分析</a></li>
<li><a href="https://www.cnblogs.com/c-x-a/p/9174663.html">Android 开发之避免被第三方使用代理抓包</a></li>
</ul>
<h2 id="仓库-脚本"><a href="#仓库-脚本" class="headerlink" title="仓库/脚本"></a>仓库/脚本</h2><p><a href="https://github.com/frida/frida">https://github.com/frida/frida</a></p>
<p>objection - runtime mobile exploration<br><a href="https://github.com/sensepost/objection">https://github.com/sensepost/objection</a></p>
<p>Dex to Java decompiler<br><a href="https://github.com/skylot/jadx">https://github.com/skylot/jadx</a></p>
<p><a href="https://github.com/deathmemory/FridaContainer">https://github.com/deathmemory/FridaContainer</a></p>
<p>安卓应用层抓包通杀脚本<br><a href="https://github.com/r0ysue/r0capture">https://github.com/r0ysue/r0capture</a></p>
]]></content>
      <tags>
        <tag>逆向</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读列表 - GO</title>
    <url>/2020/11/25/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8-GO/</url>
    <content><![CDATA[<ul>
<li><a href="https://cizixs.com/2016/12/19/golang-json-guide/">Go 语言 JSON 简介</a></li>
<li><a href="https://cizixs.com/2016/08/17/golang-http-server-side/">go http 服务器编程</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>阅读列表 - Python</title>
    <url>/2019/09/27/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8-Python/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li><a href="https://www.kawabangga.com/posts/2340">理解Python的import</a></li>
<li><a href="https://www.kawabangga.com/posts/2772">理解Python的Iterable和Iterator</a></li>
<li><a href="https://www.dongwm.com/post/124/">详解Python元类</a></li>
</ul>
<h2 id="魔法方法"><a href="#魔法方法" class="headerlink" title="魔法方法"></a>魔法方法</h2><ul>
<li><a href="https://www.dongwm.com/post/46/">python几个特别的__开头的方法</a></li>
<li><a href="https://www.dongwm.com/post/43/">python的魔法(一)</a></li>
<li><a href="https://www.dongwm.com/post/44/">python的魔法二</a></li>
</ul>
<h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul>
<li><a href="https://cizixs.com/2015/12/31/python-descriptor-introduction/">python 描述器简介</a></li>
<li><a href="https://cizixs.com/2015/08/30/metaclass-in-python/">python metaclass 入门简介</a></li>
<li><a href="https://cizixs.com/2015/05/28/python-mock-usage/">python mock 库的使用</a></li>
<li><a href="https://cizixs.com/2016/05/20/python-httpserver/">Python BaseHTTPServer 介绍</a></li>
<li><a href="https://cizixs.com/2013/08/10/python-configparser-module/">Python ConfigParser Module</a></li>
<li><a href="https://www.jianshu.com/p/a8cb5375171a">Python Traceback详解</a></li>
<li><a href="http://wklken.me/posts/2013/08/20/python-extra-itertools.html">Python-进阶-itertools模块小结</a></li>
<li><a href="https://yanbin.blog/python-execute-system-command/">Python 执行系统命令 - subprocess 模块的使用</a></li>
<li><a href="https://juejin.im/post/5c13960bf265da6134384ae5">time date datetme timestamp 傻傻分不清楚</a></li>
<li><a href="https://cuiqingcai.com/6921.html">一看就懂，Python 日志 logging 模块详解及应用</a></li>
<li><a href="https://cuiqingcai.com/6598.html">Python3 中使用 Pathlib 模块进行文件操作</a></li>
<li><a href="https://mp.weixin.qq.com/s/NQEKTuSf3rPCloJJw1bPYA">你还在用 os.path？快来感受一下 pathlib 给你带来的便捷吧</a></li>
<li><a href="https://cuiqingcai.com/7071.html">Python 中 typing 模块和类型注解的使用</a></li>
</ul>
<h2 id="并发-amp-异步"><a href="#并发-amp-异步" class="headerlink" title="并发 &amp; 异步"></a>并发 &amp; 异步</h2><ul>
<li><a href="https://zhuanlan.zhihu.com/p/25228075">从0到1，Python异步编程的演进之路</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/27258289">Python Async/Await入门指南</a></li>
<li><a href="https://lotabout.me/2017/Python-Generator/">Python Generator</a></li>
<li><a href="https://lotabout.me/2017/understand-python-asyncio/">理解 Python asyncio</a></li>
<li><a href="https://www.dongwm.com/post/understand-asyncio-1/">深入理解asyncio(一)</a></li>
<li><a href="https://www.dongwm.com/post/understand-asyncio-2/">深入理解asyncio(二)</a></li>
<li><a href="https://www.dongwm.com/post/understand-asyncio-3/">深入理解asyncio(三)</a></li>
<li><a href="https://www.dongwm.com/post/asyncio-shield/">深入asyncio.shield</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/25228075">Python中异步协程的使用方法介绍</a></li>
</ul>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul>
<li><a href="https://github.com/piglei/one-python-craftsman">Python 工匠</a></li>
<li><a href="https://coding.imooc.com/class/213.html">Python3实用编程技巧进阶</a></li>
<li><a href="https://mp.weixin.qq.com/s/ztMEpv4-MJ0y7ad6gb7dyQ">python3中的unicode和bytes，让编码更流畅</a></li>
<li><a href="http://cizixs.com/2014/11/08/understand-wsgi/">python wsgi 简介</a></li>
<li><a href="https://manjusaka.itscoder.com/posts/2018/02/23/something-about-decorator/">怎么样去理解 Python 中的装饰器 </a></li>
</ul>
]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>阅读列表 - 爬虫逆向</title>
    <url>/2020/12/19/%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8-%E7%88%AC%E8%99%AB%E9%80%86%E5%90%91/</url>
    <content><![CDATA[<p>[TOC]</p>
<h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><h3 id="AST"><a href="#AST" class="headerlink" title="AST"></a>AST</h3><ul>
<li><a href="https://www.jianshu.com/p/02e21938e0d4">AST转化网易易盾的部分代码</a></li>
<li><a href="https://mp.weixin.qq.com/s/KaolFbqyGEjSmQf3_15RMQ">JS逆向：AST还原极验混淆JS实战</a></li>
<li><a href="https://github.com/yacan8/blog/blob/master/posts/JavaScript%E6%8A%BD%E8%B1%A1%E8%AF%AD%E6%B3%95%E6%A0%91AST.md">JavaScript抽象语法树AST</a></li>
<li><a href="https://mp.weixin.qq.com/s/0c13Uhqoxd8mNMmY-Mmpgg">JavaScript 混淆与逆向必读之 AST 节点类型名词基础</a></li>
</ul>
<h3 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h3><ul>
<li><a href="https://www.jianshu.com/p/4073f4fa9f09">JS逆向：网易某版本滑块验证分析（上）——生成浏览器指纹</a></li>
<li><a href="https://www.jianshu.com/p/35d81c7428f9">JS逆向：网易某版本滑块验证分析（下）——寻找滑动轨迹</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/115317146">滑块验证码缺口识别技术分享02</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/90916336">利用深度学习识别滑动验证码缺口位置</a></li>
</ul>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzIzNzA4NDk3Nw==&mid=2457739271&idx=1&sn=2ca3269df75d5f734f44d8ea0d26d7f7&chksm=ff448859c833014ff0c6e747f1786d4ba331dc07787007f25ff5250a4180a35d21fea2db3cc4&scene=21#wechat_redirect">总结一些网站加密和混淆技术</a></li>
<li><a href="https://mp.weixin.qq.com/s/F7hOcwPBLk0we3kpAsZ6zg">JavaScript 逆向爬取实战</a></li>
<li><a href="https://mp.weixin.qq.com/s/S9qtrcLx4tbspjFk61GaUg">JavaScript 逆向爬取实战（下）</a></li>
<li><a href="https://mp.weixin.qq.com/s/WbyQt6CWYUWZviY4omKBWw">如何用 Hook 实时处理和保存 Ajax 数据</a></li>
</ul>
<ul>
<li><a href="https://mp.weixin.qq.com/s/e7MqoNGvb04teFcFszlYYw">Scrapy 和 Pyppeteer 更优雅的对接方案</a></li>
<li><a href="https://mp.weixin.qq.com/s/r3MUVEPos2Rm5uKno8HysQ">如何通过 Tampermonkey 快速查找 JavaScript 加密入口</a></li>
<li><a href="https://www.jianshu.com/p/41773c3e4e56">http的缓存机制在flask的实现</a></li>
<li><a href="https://germey.gitbooks.io/python3webspider/content/">Python 3网络爬虫开发实战</a></li>
<li><a href="https://book.douban.com/subject/30175598/">Python 3网络爬虫开发实战</a></li>
</ul>
<h2 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h2><ul>
<li><a href="https://www.jianshu.com/u/3c33ff3bc61e">太阳花田向日葵</a></li>
<li><a href="https://www.jianshu.com/u/d928b890a441">后山小鲨鱼</a></li>
<li><a href="https://space.bilibili.com/9532462?spm_id_from=333.788.b_765f7570696e666f.2">暗螟蛉</a></li>
</ul>
<h2 id="视频"><a href="#视频" class="headerlink" title="视频"></a>视频</h2><ul>
<li><a href="https://kaiwu.lagou.com/course/courseInfo.htm?courseId=46&sid=30-aggregation-0#/sale">52讲轻松搞定网络爬虫</a></li>
<li><a href="https://www.bilibili.com/video/BV1yz4y1o7Ex">猿人学-JS逆向-爬虫攻防大赛题目详解合集</a></li>
</ul>
<h2 id="框架和库"><a href="#框架和库" class="headerlink" title="框架和库"></a>框架和库</h2><ul>
<li><a href="https://github.com/scrapy/scrapy">scrapy</a></li>
<li><a href="https://github.com/rmax/scrapy-redis">scrapy-redis</a></li>
<li><a href="https://github.com/striver-ing/wechat-spider">wechat-spider</a></li>
</ul>
<h2 id="练习平台"><a href="#练习平台" class="headerlink" title="练习平台"></a>练习平台</h2><ul>
<li><a href="https://scrape.center/">scrape.center</a></li>
<li><a href="http://match.yuanrenxue.com/list">猿人学Web端爬虫攻防刷题平台</a></li>
</ul>
]]></content>
      <tags>
        <tag>逆向</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>mitmproxy的使用</title>
    <url>/2019/09/28/mitmproxy%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="mitmproxy的使用"><a href="#mitmproxy的使用" class="headerlink" title="mitmproxy的使用"></a>mitmproxy的使用</h1><p><strong>mitmproxy</strong> is a free and open source interactive HTTPS proxy.<br>官网：<a href="https://mitmproxy.org/">https://mitmproxy.org/</a><br>安装：<code>pip3 install mitmproxy</code> 或 <code>brew install mitmproxy</code><br>安装后有3个命令行工具：mitmproxy, mitmdump, mitmweb</p>
<p>这里不介绍<code>mitmweb</code>的使用，<code>mitmproxy</code>与<code>mitmdump</code>的功能重点：<br><code>mitmproxy</code>：交互式；查看流量数据(请求与响应)；执行自定义脚本<br><code>mitmdump</code>：执行自定义脚本，脚本在Mitmproxy中叫做<code>Addon</code></p>
<p>使用<code>mitmproxy</code>：因为是命令行界面，所以需要记住一些快捷键<br>使用<code>mitmdump</code>：偏向编写python代码</p>
<p>通过一个典型的调用，来认识下<code>Mitmproxy</code>下的核心概念：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmproxy --set scripts&#x3D;ad_short_mitm.py &#39;~u baidu\.com&#39;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>在Mitmproxy的叫法</th>
</tr>
</thead>
<tbody><tr>
<td>set</td>
<td><code>Command</code></td>
</tr>
<tr>
<td>scripts</td>
<td><code>Options</code></td>
</tr>
<tr>
<td>ad_short_mitm.py</td>
<td><code>Addon</code></td>
</tr>
<tr>
<td>‘~u baidu\.com’</td>
<td><code>Filter expressions</code></td>
</tr>
</tbody></table>
<h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure>
<p>输入上面命令，启动mitmproxy并显示<code>Flows界面</code>：</p>
<table>
<thead>
<tr>
<th>Flows界面</th>
</tr>
</thead>
<tbody><tr>
<td><img src="https://upload-images.jianshu.io/upload_images/281540-af5b56b103232a27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flows界面"></td>
</tr>
</tbody></table>
<h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul>
<li>第1个也是最重要的快捷键：<code>?</code>: 进入<code>Help界面</code>：</li>
</ul>
<table>
<thead>
<tr>
<th>进入Help界面</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td>
</tr>
</tbody></table>
<ul>
<li>第2个重要的快捷键：<code>:</code>: Command prompt,进入命令输入模式</li>
</ul>
<table>
<thead>
<tr>
<th>进入命令输入模式</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5aqk3tgiej31r40kuwhs.jpg" alt="命令输入模式"></td>
</tr>
<tr>
<td>可以输入的命令：可以在<code>Command Reference界面</code>查看</td>
</tr>
<tr>
<td>可以按<code>tab</code>来命令补全：比如输入flow.m；再按tab; 补全为flow.mark</td>
</tr>
<tr>
<td>可以按<code>tab</code>来路径补全</td>
</tr>
<tr>
<td>按<code>enter</code>执行命令</td>
</tr>
<tr>
<td>常用的命令可以用快捷键，不用进入命令输入模式，省去输入的时间</td>
</tr>
</tbody></table>
<ul>
<li><strong>界面间跳转快捷键</strong></li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>截图</th>
</tr>
</thead>
<tbody><tr>
<td><code>?</code></td>
<td>Help界面</td>
<td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td>
</tr>
<tr>
<td><code>K</code></td>
<td>Key Bindings界面</td>
<td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4hkbne2j30xg0oqjv3.jpg" alt="Key Bindings界面"></td>
</tr>
<tr>
<td><code>P</code></td>
<td>Flow Details界面</td>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4l0oi7lj30xg0oqwi2.jpg" alt="Flow Details界面"></td>
</tr>
<tr>
<td><code>E</code></td>
<td>Events界面</td>
<td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4mkekpvj30xg0oqaec.jpg" alt="Events界面"></td>
</tr>
<tr>
<td><code>C</code></td>
<td>Command Reference界面</td>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4nxo0cgj30xg0oqjv6.jpg" alt="Command Reference界面"></td>
</tr>
<tr>
<td><code>O</code></td>
<td>Options界面</td>
<td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4pl36xyj30xg0oqadr.jpg" alt="Options界面"></td>
</tr>
<tr>
<td><strong>注意：上面的快捷键，都是大写字母，<code>mitmproxy</code>的快捷键是区分大小写的</strong></td>
<td></td>
<td></td>
</tr>
<tr>
<td><strong>Flows界面居然没有快捷键？</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<ul>
<li><strong>导航快捷键</strong></li>
</ul>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>q</td>
<td>console.view.pop</td>
<td>返回：界面间的返回</td>
</tr>
<tr>
<td>g</td>
<td>console.nav.start</td>
<td>跳到第一行</td>
</tr>
<tr>
<td>G</td>
<td>console.nav.end</td>
<td>跳到最后一行</td>
</tr>
<tr>
<td>h</td>
<td>console.nav.left</td>
<td></td>
</tr>
<tr>
<td>j</td>
<td>console.nav.down</td>
<td>跳到下一行</td>
</tr>
<tr>
<td>k</td>
<td>console.nav.up</td>
<td>跳到上一行</td>
</tr>
<tr>
<td>l</td>
<td>console.nav.right</td>
<td></td>
</tr>
<tr>
<td>space</td>
<td>console.nav.pagedown</td>
<td></td>
</tr>
<tr>
<td>ctrl b</td>
<td>console.nav.pageup</td>
<td></td>
</tr>
<tr>
<td>ctrl f</td>
<td>console.nav.pagedown</td>
<td></td>
</tr>
<tr>
<td>tab</td>
<td>console.nav.next</td>
<td></td>
</tr>
<tr>
<td><strong>g\G\j\k等这样的导航键是通用的：在Flows、Events、Command、Options等界面都能用</strong></td>
<td></td>
<td></td>
</tr>
</tbody></table>
<p>刚开始学命令行界面时，有这么命令、快捷键要记，没记住怎么办？<br>这里介绍下mitmproxy的<code>--no-server, -n</code>应用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmproxy --help</span><br><span class="line">usage: mitmproxy [options]</span><br><span class="line">...</span><br><span class="line">Proxy Options:</span><br><span class="line">  --no-server, -n</span><br><span class="line">  --server              Start a proxy server. Enabled by default.</span><br></pre></td></tr></table></figure>
<ul>
<li>第1个Terminal窗口里正常启动mitmproxy：<code>➜  ~ mitmproxy</code></li>
<li>开启第2个Terminal窗口带<code>--no-server</code>选项启动mitmproxy：<code>➜  ~ mitmproxy --no-server</code>；按<code>K</code>/<code>C</code>/<code>O</code>/<code>?</code>查看快捷键、Command、Options、帮助</li>
</ul>
<table>
<thead>
<tr>
<th>第2个mitmproxy专门用于查看快捷键、Command、Options、帮助</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d9drzuxfj31ic0ku0uz.jpg"></td>
</tr>
</tbody></table>
<h3 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h3><p>以<code>东方头条App - 幸运大转盘</code>这个游戏为实战</p>
<table>
<thead>
<tr>
<th>东方头条App - 幸运大转盘</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d0cz6rndj30n00kgabm.jpg"></td>
</tr>
<tr>
<td>1.点击’领取金币’：会发出https://…/zhuanpan/get_zhuanpan_new网络请求</td>
</tr>
<tr>
<td>2.点击’立即领取’：会发出https://…/zhuanpan/get_gold网络请求</td>
</tr>
</tbody></table>
<p>应用目的：通过mitmproxy的replay功能来减少手动操作时间<br>知识点：<code>Filter expressions</code>, <code>Options</code>, <code>Command</code></p>
<ul>
<li>1.启动mitmproxy</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure>
<ul>
<li>2.点开<code>东方头条App</code>到<code>幸运大转盘</code>界面</li>
<li>3.点击’领取金币’；点击’立即领取’；</li>
<li>问题：这时候mitmrpoxy的<code>Flow界面</code>已包含上面的网络请求，网络请求非常多，怎么找到需要的请求</li>
<li>解答：应用mitmrpoxy的<code>Filter expressions</code></li>
<li>4.按<code>f</code>快捷键：设置<code>view_filter</code>这个<code>Option</code></li>
</ul>
<table>
<thead>
<tr>
<th>按<code>f</code>快捷键, 设置<code>view_filter</code></th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5d1kj7qvvj316z0u0adk.jpg"></td>
</tr>
</tbody></table>
<ul>
<li>5.输入<code>~u zhuanpan</code>, 按回车执行命令</li>
</ul>
<table>
<thead>
<tr>
<th>输入<code>~u zhuanpan</code></th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5d1zhmp90j316z0u0gr2.jpg"></td>
</tr>
<tr>
<td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d1un59ssj316z0u0dl4.jpg"></td>
</tr>
</tbody></table>
<ul>
<li><p>知识点：<code>~u zhuanpan</code>是<code>Filter expressions</code>：<code>~u regex</code>，用来过滤URL符合regex正则表达式的网络请求；可以按<code>？</code>跳转到<code>Help界面</code>查看全部的<code>Filter expressions</code></p>
</li>
<li><p>6.用<code>j</code>导航快捷键定位到<code>zhuanpan/get_zhuanpan_new</code>网络请求；按下<code>m</code>快捷键将这条网络请求标记</p>
</li>
</ul>
<table>
<thead>
<tr>
<th>按下<code>m</code>标记网络请求</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2sgnjiqj316z0u0n2j.jpg"></td>
</tr>
</tbody></table>
<ul>
<li>7.用同样的操作，标记<code>zhuanpan/get_gold</code>网络请求</li>
</ul>
<table>
<thead>
<tr>
<th>按下<code>m</code>标记网络请求</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2va55pyj316z0u079q.jpg"></td>
</tr>
</tbody></table>
<ul>
<li>8.按<code>:</code>快捷键, 进入命令输入模式；输入<code>rep</code>, 按<code>tab</code>补全命令; 输入<code>@marked</code>; 按回车执行命令</li>
</ul>
<table>
<thead>
<tr>
<th>按<code>tab</code>补全命令</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5d3gwr0noj316z0u07a6.jpg"> <img src="http://ww3.sinaimg.cn/large/006tNc79gy1g5d3q3ou9pj316z0u0q5x.jpg"></td>
</tr>
</tbody></table>
<p>出于演示使用mitmrpoxy的目的，才增加了许多不必要的步骤；简洁方法：</p>
<ul>
<li>去除步骤4、5、6、7</li>
<li>步骤8改为<code>: replay.client &quot;(~u zhuanpan/get_zhuanpan_new) | (~u zhuanpan/get_gold)&quot;</code></li>
</ul>
<p>案例到此结束，小结下用到的快捷键、命令：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td><code>f</code></td>
<td>: set view_fliter=</td>
<td>只显示符合条件的网络请求</td>
</tr>
<tr>
<td><code>m</code></td>
<td>flow.mark.toggle @focus</td>
<td>Toggle mark on this flow</td>
</tr>
<tr>
<td></td>
<td>: replay.client @marked</td>
<td>重放多条标记的网络请求</td>
</tr>
</tbody></table>
<p>相关快捷键：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>M</td>
<td>flowlist</td>
<td>view.marked.toggle</td>
<td>Toggle viewing marked flows</td>
</tr>
<tr>
<td>U</td>
<td>flowlist</td>
<td>flow.mark @all false</td>
<td>Un-set all marks</td>
</tr>
<tr>
<td>r</td>
<td>flowlist</td>
<td>replay.client @focus</td>
<td>Replay this flow</td>
</tr>
</tbody></table>
<p>一些用到<code>Filter expressions</code>的<code>Options</code>:<br>view_filter、save_stream_filter、intercept</p>
<p>相关文档：<br><a href="https://docs.mitmproxy.org/stable/concepts-options/">https://docs.mitmproxy.org/stable/concepts-options/</a><br><a href="https://docs.mitmproxy.org/stable/concepts-filters/">https://docs.mitmproxy.org/stable/concepts-filters/</a></p>
<h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面的实战有以下几个问题：</p>
<ul>
<li>第1次收集操作时，不是每次都抽到金币，也有可能抽到广告；怎样每次都跳过广告？</li>
<li>游戏有20次机会，要手动输入多次<code>replay.client @marked</code>才能把20次机会用完；怎样才能减少手动操作？</li>
</ul>
<p>这些问题我们通过编写脚本来解决。这里使用<code>mitmproxy</code>的其它功能为编写脚本提供方便<br>把实战的已被标记的2个网络请求保存为文件，方便查看：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>flowlist</td>
<td>console.command save.file @shown</td>
<td>Save listed flows to file</td>
</tr>
</tbody></table>
<ul>
<li>1.按<code>w</code>快捷键, 把<code>@shown</code>修改为<code>@marked</code>; 指定保存路径；按回车执行命令</li>
</ul>
<table>
<thead>
<tr>
<th>按<code>w</code>保存为文件</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5ggp27f86j31c80u0dll.jpg"> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ggphx21nj31c80u0ag4.jpg"></td>
</tr>
<tr>
<td>输入路径时，可以按<code>tab</code>来补全路径</td>
</tr>
<tr>
<td>最好不要使用<code>~</code>：像我自己Mac上输入<code>~/zhuanpan.mitm</code>，没有保存成功；当然你也可以测试下使用<code>~</code>的路径能否保存成功</td>
</tr>
<tr>
<td>输入的文件的后缀名是可以随意指定的；保存的文件为二进制格式</td>
</tr>
</tbody></table>
<ul>
<li>2.开启第2个Terminal窗口带–no-server选项启动mitmproxy</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmproxy --no-server</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>L</td>
<td>flowlist</td>
<td>console.command view.load</td>
<td>Load flows from file</td>
</tr>
</tbody></table>
<ul>
<li>3.按<code>L</code>快捷键, 把步骤1保存的文件加载进来</li>
</ul>
<table>
<thead>
<tr>
<th>按<code>L</code>加载文件</th>
</tr>
</thead>
<tbody><tr>
<td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5ghc549tnj31c80u0q7b.jpg"> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ghcff17bj31c80u0q7e.jpg"></td>
</tr>
</tbody></table>
<p>好了，编写脚本的准备工作结束！<br>小结下用到的快捷键、命令：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>w</td>
<td>flowlist</td>
<td>console.command save.file @shown</td>
<td>Save listed flows to file</td>
</tr>
<tr>
<td>L</td>
<td>flowlist</td>
<td>console.command view.load</td>
<td>Load flows from file</td>
</tr>
</tbody></table>
<p>相关快捷键：</p>
<table>
<thead>
<tr>
<th>快捷键</th>
<th>界面</th>
<th>command</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>e</td>
<td>flowlist</td>
<td>console.command export.file {choice} @focus</td>
<td>Export this flow to file</td>
</tr>
</tbody></table>
<p>快捷键<code>w</code>与<code>e</code>的区别</p>
<table>
<thead>
<tr>
<th>w</th>
<th>e</th>
</tr>
</thead>
<tbody><tr>
<td>文件为二进制文件</td>
<td>文件为文本文件</td>
</tr>
<tr>
<td>保存的信息完整</td>
<td>只保存请求信息，不保存响应信息</td>
</tr>
<tr>
<td>能一次保存多条网络请求信息</td>
<td>一次只能保存一条网络请求信息</td>
</tr>
</tbody></table>
<h2 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h2><p><code>Mitmproxy</code>是用python实现的，编写相应的<code>Addon</code>脚本也是用python</p>
<h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><p>先用在<code>mitmproxy</code>的<code>e</code>快捷键来辅助编写shell脚本，来解决下上面的实战问题</p>
<ul>
<li><ol>
<li>用<code>e</code>快捷键分别保存<code>zhuanpan/get_zhuanpan_new</code>、<code>zhuanpan/get_gold</code>网络请求为文件<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code></li>
</ol>
</li>
</ul>
<p>get_zhuanpan_new.sh文件内容：[get_gold.sh内容类似，不再列出]</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">curl -H &#39;Host:zhuanpan.dftoutiao.com&#39; -H &#39;Content-Type:application&#x2F;x-www-form-urlencoded&#39; -H &#39;Connection:keep-alive&#39; -H &#39;Accept:*&#x2F;*&#39; -H &#39;User-Agent:DFTT&#x2F;2.4.8 (iPhone; iOS 12.3.1; Scale&#x2F;3.00)&#39; -H &#39;Accept-Language:zh-Hans-CN;q&#x3D;1, en-CN;q&#x3D;0.9, zh-Hant-CN;q&#x3D;0.8&#39; -H &#39;Content-Length:484&#39; -H &#39;Accept-Encoding:br, gzip, deflate&#39; -X POST &#39;https:&#x2F;&#x2F;zhuanpan.dftoutiao.com&#x2F;zhuanpan&#x2F;get_zhuanpan_new&#39; --data-binary &#39;accid&#x3D;834536089&amp;appqid&#x3D;AppStore190602&amp;apptypeid&#x3D;DFTT&amp;appver&#x3D;2.4.8&amp;device&#x3D;iPhone%206s%20Plus%20%28A1634&#x2F;A1687%29&amp;deviceid&#x3D;AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr&#x3D;rwzx&amp;ime&#x3D;F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt&#x3D;d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network&#x3D;wifi&amp;num&#x3D;57&amp;os&#x3D;iOS%2012.3.1&amp;position&#x3D;%E6%B5%99%E6%B1%9F&amp;sign&#x3D;5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname&#x3D;DFTTIOS&amp;softtype&#x3D;TouTiao&amp;ts&#x3D;1564368354&#39;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>把<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code>的内容合并到最终的文件中<code>zhuanpan.sh</code></li>
</ol>
</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">function zhuanpan</span><br><span class="line">&#123;</span><br><span class="line">    # mitmproxy用快捷键e导出的get_zhuanpan_new.sh文件内容原样写到这</span><br><span class="line">    curl -H &#x27;Host:zhuanpan.dftoutiao.com&#x27; -H &#x27;Content-Type:application/x-www-form-urlencoded&#x27; -H &#x27;Connection:keep-alive&#x27; -H &#x27;Accept:*/*&#x27; -H &#x27;User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)&#x27; -H &#x27;Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8&#x27; -H &#x27;Content-Length:484&#x27; -H &#x27;Accept-Encoding:br, gzip, deflate&#x27; -X POST &#x27;https://zhuanpan.dftoutiao.com/zhuanpan/get_zhuanpan_new&#x27; --data-binary &#x27;accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;num=57&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368354&#x27;</span><br><span class="line"></span><br><span class="line">    # mitmproxy用快捷键e导出的get_gold.sh文件内容原样写到这</span><br><span class="line">    curl -H &#x27;Host:zhuanpan.dftoutiao.com&#x27; -H &#x27;Content-Type:application/x-www-form-urlencoded&#x27; -H &#x27;Connection:keep-alive&#x27; -H &#x27;Accept:*/*&#x27; -H &#x27;User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)&#x27; -H &#x27;Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8&#x27; -H &#x27;Content-Length:487&#x27; -H &#x27;Accept-Encoding:br, gzip, deflate&#x27; -X POST &#x27;https://zhuanpan.dftoutiao.com/zhuanpan/get_gold&#x27; --data-binary &#x27;accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;isfirst=0&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=c6f61f80d1c001ac5382ef73632e0e9e&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368376&#x27;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ((i=0; i&lt;20; i++));</span><br><span class="line">do</span><br><span class="line">    zhuanpan</span><br><span class="line">done</span><br></pre></td></tr></table></figure>

<p>ok，shell脚本以编写完成</p>
<h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>关于<code>Addon</code>的概念可以查看：<br><a href="https://docs.mitmproxy.org/stable/addons-overview/">https://docs.mitmproxy.org/stable/addons-overview/</a></p>
<p>编写<code>Addon</code>脚本写些什么呢？先上一下模板：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line">from mitmproxy import addonmanager</span><br><span class="line"></span><br><span class="line">class Myaddon(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def load(self, entry: addonmanager.Loader):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def request(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">addons &#x3D; [</span><br><span class="line">    Myaddon()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<p><strong>编写<code>Addon</code>脚本:就是选择性的实现上面的方法</strong></p>
<p><strong>具体都有哪些方法可以选择性实现，可以查看如下文档：</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
</tr>
</thead>
<tbody><tr>
<td>文档</td>
<td><a href="https://docs.mitmproxy.org/stable/addons-events/">https://docs.mitmproxy.org/stable/addons-events/</a></td>
</tr>
<tr>
<td>源代码</td>
<td>docs/src/examples/addons/events.py</td>
</tr>
<tr>
<td>源代码</td>
<td>mitmproxy/eventsequence.py</td>
</tr>
</tbody></table>
<p>开始实现<code>Addon</code>脚本：</p>
<ul>
<li><ol>
<li>新建文件<code>zhuangpan_mitm.py</code>, 实现<code>__init__</code>方法：</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">class Zhuangpan(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.filter &#x3D; flowfilter.parse(r&#39;(~u zhuanpan&#x2F;get_zhuanpan_new) | (~u zhuanpan&#x2F;get_gold)&#39;)</span><br><span class="line">        self.new_fliter &#x3D; flowfilter.parse(r&#39;~u zhuanpan&#x2F;get_zhuanpan_new&#39;) </span><br><span class="line">        self.get_fliter &#x3D; flowfilter.parse(r&#39;~u zhuanpan&#x2F;get_gold&#39;)</span><br><span class="line">        self.flows &#x3D; []</span><br><span class="line">        self.urls &#x3D; set()</span><br><span class="line">        self.remain &#x3D; 0</span><br><span class="line"></span><br><span class="line">addons &#x3D; [</span><br><span class="line">    Zhuangpan()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<p>这里用到了Mitmproxy的api:<code>flowfilter.parse</code>：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># mitmproxy&#x2F;flowfilter.py文件</span><br><span class="line">def parse(s: str) -&gt; TFilter:</span><br><span class="line"></span><br><span class="line"># 还定义了：</span><br><span class="line">def match(flt, flow):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        Matches a flow against a compiled filter expression.</span><br><span class="line">        Returns True if matched, False if not.</span><br><span class="line">        ....</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure>

<ul>
<li><ol start="2">
<li>实现<code>request</code>方法：</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Zhuangpan(object):</span><br><span class="line">    ...</span><br><span class="line">    def request(self, flow: http.HTTPFlow):               </span><br><span class="line">        if flowfilter.match(self.filter, flow):</span><br><span class="line">            url &#x3D; flow.request.url</span><br><span class="line">            if not url in self.urls: </span><br><span class="line">                ctx.log.alert(url)</span><br><span class="line">                self.flows.append(flow)</span><br><span class="line">                self.urls.add(url)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li><ol start="3">
<li>实现<code>response</code>方法：</li>
</ol>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Zhuangpan(object):                       </span><br><span class="line">    ...</span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if flowfilter.match(self.new_fliter, flow):</span><br><span class="line">            flow.response.replace(r&#39;&quot;gold&quot;:0&#39;, &#39;&quot;gold&quot;:999&#39;)</span><br><span class="line"></span><br><span class="line">            text &#x3D; flow.response.text</span><br><span class="line">            data &#x3D; json.loads(text)</span><br><span class="line">            self.remain &#x3D; data.get(&#39;data&#39;).get(&#39;cur_num&#39;)</span><br><span class="line">            ctx.log.alert(&#39;remain count:&#123;&#125;&#39;.format(self.remain))</span><br><span class="line"></span><br><span class="line">        if flowfilter.match(self.get_fliter, flow):</span><br><span class="line">            if self.remain &gt; 0 and len(self.urls) &gt;&#x3D; 2:                </span><br><span class="line">                flows &#x3D; [f.copy() for f in self.flows]</span><br><span class="line">                ctx.master.commands.call(&quot;replay.client&quot;, flows)</span><br></pre></td></tr></table></figure>

<p>使用<code>ctx.log.xxx</code>等方法来代替使用<code>print</code>或<code>logging.warning</code>等方法：  </p>
<ul>
<li>在mitmproxy中，<code>ctx.log.xxx</code>记录的信息会出现在<code>Event</code>界面,         而其它方法不会出现在<code>Event</code>界面</li>
<li>在mitmdump中，<code>ctx.log.xxx</code>记录的信息事件显示的顺序正确,         而其它方法显示的顺序不正确</li>
</ul>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">➜  ~ mitmdump --scripts zhuangpan_mitm.py</span><br><span class="line">Loading script zhuangpan_mitm.py</span><br><span class="line">Proxy server listening at http:&#x2F;&#x2F;*:8080</span><br><span class="line"></span><br><span class="line">  # --scripts SCRIPT, -s SCRIPT</span><br><span class="line">                        Execute a script. May be passed multiple times.</span><br></pre></td></tr></table></figure>


<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mitmdump --set userid&#x3D;zhj -s &quot;mitm_user_xxx.py&quot;  -s math_mitm.py &#39;~u mapi.hddgood.com&#39;</span><br><span class="line"></span><br><span class="line">mitmdump --set replacements&#x3D;&#39;&#x2F;~s&#x2F;&quot;video_url&quot;:&quot;(.+)&quot;&#125;&#x2F;&quot;video_url&quot;:&quot;https:&#x2F;&#x2F;vd3.bdstatic.com&#x2F;abc.mp4&quot;&#125;&#39;</span><br><span class="line"></span><br><span class="line"># 代码里可以调用</span><br><span class="line">ctx.master.commands.call(&quot;replay.client&quot;, [flow])</span><br><span class="line"></span><br><span class="line">ctx.master.commands.execute(&quot;view.focus.go 0&quot;)</span><br></pre></td></tr></table></figure>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>问题：只关注某个域名下的流量，怎么设置？<br>解决：ignore_hosts<br><a href="https://docs.mitmproxy.org/stable/howto-ignoredomains/">https://docs.mitmproxy.org/stable/howto-ignoredomains/</a></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># Ignore everything but example.com and mitmproxy.org:</span><br><span class="line">--ignore-hosts &#39;^(?!example\.com)(?!mitmproxy\.org)&#39;</span><br><span class="line"></span><br><span class="line">正则表达式：反前瞻</span><br><span class="line">反前瞻：要匹配某个模式时，需要在它 后面找不到含有给定前瞻模式的内容</span><br><span class="line">foo(?!bar)  Negative lookahead assertion. The pattern foo will only match if not followed by a match of pattern bar.</span><br></pre></td></tr></table></figure>
<h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><p>源码地址：<a href="https://github.com/mitmproxy/mitmproxy">https://github.com/mitmproxy/mitmproxy</a></p>
<p>mitmproxy/tools/_main.py</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">入口方法：</span><br><span class="line">def mitmproxy(args&#x3D;None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(console.master.ConsoleMaster)</span><br><span class="line"></span><br><span class="line">def mitmdump(args&#x3D;None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(dump.DumpMaster)</span><br><span class="line">    </span><br><span class="line">主要代码</span><br><span class="line">def run(master_cls):</span><br><span class="line"></span><br><span class="line">    opts   &#x3D; options.Options()</span><br><span class="line">    master &#x3D; master_cls(opts)</span><br><span class="line">    </span><br><span class="line">    pconf  &#x3D; proxy.config.ProxyConfig(opts)</span><br><span class="line">    server &#x3D; proxy.server.ProxyServer(pconf)</span><br><span class="line">    </span><br><span class="line">    master.server &#x3D; server</span><br><span class="line">    master.run()</span><br><span class="line">    return master</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">master.Master</span><br><span class="line">    console.master.ConsoleMaster</span><br><span class="line">    dump.DumpMaster</span><br><span class="line">    web.master.WebMaster</span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">    proxy.server.ProxyServer</span><br><span class="line">    proxy.server.DummyServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master与Server关系：</span><br><span class="line">    master.server &#x3D; server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master和Server对象生成：</span><br><span class="line">    Master(opts: options.Options)</span><br><span class="line">    Server(config: config.ProxyConfig)</span><br><span class="line"></span><br><span class="line">ProxyConfig与Options关系：</span><br><span class="line">    ProxyConfig(options: options.Options)</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">开始运行：</span><br><span class="line">    master.run()</span><br><span class="line">        master.start()</span><br><span class="line"></span><br><span class="line">    def start(self):</span><br><span class="line">        if self.server:</span><br><span class="line">            ServerThread(self.server).start()</span><br><span class="line"></span><br><span class="line">class ServerThread(basethread.BaseThread):</span><br><span class="line">    def __init__(self, server):</span><br><span class="line">        self.server &#x3D; server</span><br><span class="line">        address &#x3D; getattr(self.server, &quot;address&quot;, None)</span><br><span class="line">        super().__init__(</span><br><span class="line">            &quot;ServerThread (&#123;&#125;)&quot;.format(repr(address))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.server.serve_forever()</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">线程：</span><br><span class="line">    ServerThread</span><br><span class="line">    connection_thread</span><br><span class="line"></span><br><span class="line">    def connection_thread(self, connection, client_address):</span><br><span class="line">        with self.handler_counter:</span><br><span class="line">            try:</span><br><span class="line">                self.handle_client_connection(connection, client_address)</span><br><span class="line">            finally:</span><br><span class="line">                close_socket(connection)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def handle_client_connection(self, conn, client_address):</span><br><span class="line">        h &#x3D; ConnectionHandler(</span><br><span class="line">            conn,</span><br><span class="line">            client_address,</span><br><span class="line">            self.config,</span><br><span class="line">            self.channel</span><br><span class="line">        )</span><br><span class="line">        h.handle()</span><br><span class="line"></span><br><span class="line">    def handle(self):</span><br><span class="line">        self.log(&quot;clientconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">        root_layer &#x3D; None</span><br><span class="line">        root_layer &#x3D; self._create_root_layer()</span><br><span class="line">        root_layer &#x3D; self.channel.ask(&quot;clientconnect&quot;, root_layer)</span><br><span class="line">        root_layer()</span><br><span class="line"></span><br><span class="line">        self.log(&quot;clientdisconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">    def _create_root_layer(self):</span><br><span class="line">        root_ctx &#x3D; ...</span><br><span class="line">        mode &#x3D; self.config.options.mode</span><br><span class="line">        if mode.startswith(&quot;upstream:&quot;):</span><br><span class="line">            return modes.HttpUpstreamProxy</span><br><span class="line">        elif mode &#x3D;&#x3D; &quot;transparent&quot;:</span><br><span class="line">            return modes.TransparentProxy(root_ctx)</span><br><span class="line">        elif mode &#x3D;&#x3D; &quot;regular&quot;:</span><br><span class="line">            return modes.HttpProxy(root_ctx)</span><br><span class="line">        </span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">addons的运行过程[生命周期]</span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line"></span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">DumpMaster.__init__(self,options):</span><br><span class="line">    super().__init__(options)</span><br><span class="line">    self.addons.add(*addons.default_addons())</span><br><span class="line"></span><br><span class="line">AddonManager.add(self, *addons):</span><br><span class="line">    for i in addons:</span><br><span class="line">        self.chain.append(self.register(i))</span><br><span class="line">        </span><br><span class="line">AddonManager.register(self, addon):</span><br><span class="line">    l &#x3D; Loader(self.master)</span><br><span class="line">    self.invoke_addon(addon, &quot;load&quot;, l)</span><br><span class="line">    </span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">master.run():</span><br><span class="line">    loop &#x3D; asyncio.get_event_loop()</span><br><span class="line">    self.run_loop(loop.run_forever)</span><br><span class="line">        </span><br><span class="line">    master.run_loop(self, loop):</span><br><span class="line">        asyncio.ensure_future(self.running())</span><br><span class="line">        </span><br><span class="line">    master.running(self):</span><br><span class="line">        self.addons.trigger(&quot;running&quot;)</span><br><span class="line">        </span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line">class AddonManager:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.lookup &#x3D; &#123;&#125;</span><br><span class="line">        self.chain &#x3D; []</span><br><span class="line">        self.master &#x3D; master</span><br><span class="line">        master.options.changed.connect(self._configure_all)</span><br><span class="line"></span><br><span class="line">    def _configure_all(self, options, updated):</span><br><span class="line">        self.trigger(&quot;configure&quot;, updated)</span><br><span class="line"></span><br></pre></td></tr></table></figure>


<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script">https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script</a></p>
<p><a href="https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg">https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg</a></p>
<p><a href="https://github.com/KevCui/mitm-scripts">https://github.com/KevCui/mitm-scripts</a></p>
]]></content>
      <tags>
        <tag>charles</tag>
        <tag>mitmproxy</tag>
      </tags>
  </entry>
  <entry>
    <title>趣消除App自动化 - 成语消消乐-全自动化</title>
    <url>/2019/09/29/%E6%88%90%E8%AF%AD%E6%B6%88%E6%B6%88%E4%B9%90-%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/</url>
    <content><![CDATA[<p>[TOC]</p>
<h1 id="趣消除App自动化-成语消消乐-全自动化"><a href="#趣消除App自动化-成语消消乐-全自动化" class="headerlink" title="趣消除App自动化 - 成语消消乐-全自动化"></a>趣消除App自动化 - 成语消消乐-全自动化</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><a href="https://www.jianshu.com/p/508c4169272d">趣消除App自动化 - 成语消消乐-半自动化</a><br>这篇文章实现了<code>成语消消乐</code>的半自动化：</p>
<ul>
<li>用户点击开始一局游戏</li>
<li>代码自动答题</li>
<li>对代码没有找到的成语，用户自己点击成语赢得游戏</li>
</ul>
<p>这篇文章的目的是全自动化：</p>
<ul>
<li>代码自动开始一局游戏</li>
<li>代码自动答题</li>
<li>对没有全部找到的，放弃这局：等待对方赢得游戏；</li>
<li>开始下一局游戏</li>
</ul>
<p>写在前面：</p>
<ul>
<li>自己的文章从不介绍背景知识，直接上代码；因为定位实战，非教程</li>
<li>看了些评论，多是<code>不明觉厉</code>，希望你可以评主题相关的讨论或感谢</li>
<li>这篇文章<code>威力巨大</code>[呵呵]，所以<strong>不要做恶；不要做恶；不要做恶</strong>；</li>
</ul>
<p><strong>不要做恶：</strong><br>比如游戏有12个成语要找，但代码只答对了11个，还有1个成语4个字，共有<code>4*3*2*1=24</code>种排列组合，请读者不要发24个请求来找到这最后一个成语，这是楼主认为的’做恶’，也是对自动化：<code>对没有全部找到的，放弃这局：等待对方赢得游戏</code>做出的取舍；你可以用游戏里的<code>认输</code>和<code>提示</code></p>
<p>写这篇文章与代码的目的：</p>
<ul>
<li>虚荣：有读者阅读、评论</li>
<li>金钱：赢得游戏有几分钱</li>
<li>时间：游戏里插了很广告，跳过广告；自动化节约自己时间</li>
<li>能力：要写能用的代码，一定要学点什么，比如学习了websocket库</li>
<li>爱惜：自己的手机用了3年了，移植到电脑上来执行，可以让手机再战一年啊</li>
<li>成就：代码和文章等作品；不同维度地’虐人’的快感[鄙视]</li>
</ul>
<p>好了，希望你找到了学习的兴趣与动力，上代码</p>
<h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>App: <code>趣消除App</code>iOS版本、<code>扶我起来学数学App</code>iOS版本<br>工具: python、Charles、python第三方库websocket<br>背景知识：python、抓包、websocket</p>
<h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><code>成语消消乐</code>有2个接口：</p>
<ol>
<li><a href="https://king.hddgood.com/king_api/v1/game/join_game[http]">https://king.hddgood.com/king_api/v1/game/join_game[http]</a></li>
<li>wss://king.hddgood.com/websock_m/websock_message?uid={}&amp;gameid={}&amp;token={}[websocket]</li>
</ol>
<ul>
<li><code>game/join_game</code>接口会返回<code>websock_m/websock_message</code>接口需要的<code>gameid</code>；<code>gameid</code>每局都不同</li>
<li><code>uid</code>对每个账号是固定</li>
<li><code>token</code>对一次登入是固定，每局游戏都一样；</li>
<li>游戏的消息来回传递都在<code>websock_m/websock_message</code>接口websocket协议里完成</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">POST &#x2F;king_api&#x2F;v1&#x2F;game&#x2F;join_game HTTP&#x2F;1.1</span><br><span class="line">Host: king.hddgood.com</span><br><span class="line">A-Token-Header: PTtWUFdWUkBFHEVZCVcNdUtVWwdc&#x3D;</span><br><span class="line">Cookie: UM_distinctid&#x3D;16b27e625da1ef-038c4847dc733-336d7451-4a640-16b27e625dd490; cn_1276022107_dplus&#x3D;%7B%22distinct_id%22%3A%20%2216b27e625da1ef-038c4847dc733-336d7451-4a640-16b27e625dd490%22%2C%22%24_sessionid%22%3A%20104%2C%22%24_sessionTime%22%3A%201561087099%2C%22%24dp%22%3A%200%2C%22%24_sessionPVTime%22%3A%201561087099%2C%22initial_view_time%22%3A%20%221559738991%22%2C%22initial_referrer%22%3A%20%22%24direct%22%2C%22initial_referrer_domain%22%3A%20%22%24direct%22%2C%22%24recent_outside_referrer%22%3A%20%22%24direct%22%7D; CNZZDATA1276022107&#x3D;326225286-1559738991-%7C1561086230</span><br><span class="line"></span><br><span class="line">uid&#x3D;1457362&amp;rank&#x3D;11&amp;type&#x3D;G</span><br></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">HTTP&#x2F;1.1 200 </span><br><span class="line">Content-Type: application&#x2F;json;charset&#x3D;UTF-8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;操作成功&quot;,&quot;code&quot;:&quot;200&quot;,&quot;codemsg&quot;:&quot;操作成功&quot;,&quot;result&quot;:&#123;&quot;gameid&quot;:&quot;G11-810737&quot;,&quot;dup&quot;:0,&quot;starter&quot;:472251&#125;&#125;</span><br></pre></td></tr></table></figure>


<h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>写2个文件：<code>chengyu-auto.py</code>[代码文件]、<code>chengyu.text</code>[数据文件]</p>
<ul>
<li><code>chengyu-auto.py</code>从<code>asking</code>消息里解析出<code>ask_string</code>到<code>chengyu.text</code>文件里查找是否包含相应的成语</li>
<li>自动提交成语答案</li>
<li><code>chengyu.text</code>文件刚开始是空的；在每局游戏结束时，游戏都会发送<code>game_result</code>消息给我们，里面有这局游戏的答案成语，把这些成语写到文件中</li>
<li>玩的局数越多，<code>chengyu.text</code>文件包含的成语越多，查找到答案的可能性越大</li>
</ul>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>需要安装第三方python库：<a href="https://pypi.org/project/websockets/">websockets</a><br><code>chengyu-auto.py</code>：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"># 趣消除App-成语消消乐全自动化；</span></span><br><span class="line"><span class="string"># App版本：1.1.2</span></span><br><span class="line"><span class="string"># App地址：https://itunes.apple.com/cn/app/id1449545954</span></span><br><span class="line"><span class="string">提现非常迅速</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Red = <span class="string">&#x27;\033[0;31m&#x27;</span></span><br><span class="line">Green = <span class="string">&#x27;\033[0;32m&#x27;</span></span><br><span class="line">Yellow = <span class="string">&#x27;\033[0;33m&#x27;</span> </span><br><span class="line">Blue = <span class="string">&#x27;\033[0;34m&#x27;</span></span><br><span class="line">Purple = <span class="string">&#x27;\033[0;35m&#x27;</span> </span><br><span class="line">Cyan = <span class="string">&#x27;\033[0;36m&#x27;</span>  </span><br><span class="line">White = <span class="string">&#x27;\033[0;37m&#x27;</span> </span><br><span class="line"></span><br><span class="line">colors = &#123;</span><br><span class="line">    <span class="number">0</span>:Red,</span><br><span class="line">    <span class="number">1</span>:Purple,</span><br><span class="line">    <span class="number">2</span>:Yellow,</span><br><span class="line">    <span class="number">3</span>:Blue,</span><br><span class="line">    <span class="number">4</span>:White,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些变量的值可以通过像Charles抓包软件获得</span></span><br><span class="line"><span class="comment"># 账号变量</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># A_Token_Header的一些结论：</span></span><br><span class="line"><span class="comment"># 1.每个账号不同；</span></span><br><span class="line"><span class="comment"># 2.同一个账号每次登录时也是不一样的</span></span><br><span class="line"><span class="comment"># 3.同一个账号，退出时，只要不登录，上次的A-Token-Header的值还有效，只有再登录时，上次的token值才失败</span></span><br><span class="line">A_Token_Header_zxg = <span class="string">&#x27;PTtWUFdWUkBFHEVZCVcNdUtVWwdc&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookie的一些结论：</span></span><br><span class="line"><span class="comment"># 1.同一个账号，退出或再登录，都不用修改，一直有效</span></span><br><span class="line"><span class="comment"># 2.值为空也可以</span></span><br><span class="line">Cookie_zxg = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UUID的一些结论：</span></span><br><span class="line"><span class="comment"># 1.固定不变</span></span><br><span class="line">UUID_zxg = <span class="string">&#x27;1457362&#x27;</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">api_ = <span class="string">&#x27;https://king.hddgood.com/king_api/v1/&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuXiaoChuUser</span>():</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&#x27;Host&#x27;</span>: <span class="string">&#x27;king.hddgood.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept&#x27;</span>: <span class="string">&#x27;application/json, text/plain, */*&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Accept-Language&#x27;</span>: <span class="string">&#x27;zh-cn&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Origin&#x27;</span>: <span class="string">&#x27;https://king.hddgood.com&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16D57/; quxiaochu/ios v1.1.2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;Referer&#x27;</span>: <span class="string">&#x27;https://king.hddgood.com/&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">&#x27;uid&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;channel&#x27;</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;version&#x27;</span>: <span class="string">&#x27;1.1.2&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;os&#x27;</span>: <span class="string">&#x27;ios&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;web_ver&#x27;</span>: <span class="string">&#x27;20190261&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SLEEP = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, uid, token_header, cookie</span>):</span></span><br><span class="line">        self.uid = uid</span><br><span class="line">        self.headers = <span class="built_in">dict</span>(QuXiaoChuUser.headers)</span><br><span class="line">        self.headers[<span class="string">&#x27;A-Token-Header&#x27;</span>] = token_header</span><br><span class="line">        self.token_header = token_header</span><br><span class="line">        self.headers[<span class="string">&#x27;Cookie&#x27;</span>] = cookie</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_chengyu_join_game</span>(<span class="params">self, rank</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">        成语消消乐-获取游戏id</span></span><br><span class="line"><span class="string">        https://king.hddgood.com/king_api/v1/game/join_game</span></span><br><span class="line"><span class="string">        &#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;操作成功&quot;,&quot;code&quot;:&quot;200&quot;,&quot;codemsg&quot;:&quot;操作成功&quot;,&quot;result&quot;:&#123;&quot;gameid&quot;:&quot;G15-3232777&quot;,&quot;dup&quot;:0,&quot;starter&quot;:531492&#125;&#125;</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        print(<span class="string">&quot;成语消消乐-获取游戏id &#123;&#125;&quot;</span>.<span class="built_in">format</span>(self.uid))</span><br><span class="line"></span><br><span class="line">        data = self._uid_data()</span><br><span class="line">        <span class="comment"># 1:书童；2:儒生；15:殿阁大学士</span></span><br><span class="line">        data[<span class="string">&#x27;rank&#x27;</span>] = <span class="built_in">str</span>(rank) </span><br><span class="line">        data[<span class="string">&#x27;type&#x27;</span>] = <span class="string">&#x27;G&#x27;</span></span><br><span class="line"></span><br><span class="line">        api = self._genapi(<span class="string">&#x27;game/join_game&#x27;</span>)</span><br><span class="line">        result = self._post(api, self.headers, data) </span><br><span class="line">        <span class="keyword">return</span> json.loads(result)       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_uid_data</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;uid&#x27;</span>: self.uid&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_genapi</span>(<span class="params">path</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;https://king.hddgood.com/king_api/v1/&#x27;</span> + path</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_post</span>(<span class="params">api, headers, data, p=logging.warning</span>):</span></span><br><span class="line">        time.sleep(QuXiaoChuUser.SLEEP)</span><br><span class="line"></span><br><span class="line">        res = requests.post(api, headers=headers, data=data, verify=<span class="literal">False</span>)</span><br><span class="line">        print(res.url)</span><br><span class="line">        result = res.text</span><br><span class="line">        print(result)</span><br><span class="line">        print(<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chengyu</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        path = pathlib.PurePath(__file__)</span><br><span class="line">        path = path.parent.joinpath(<span class="string">&#x27;chengyu.text&#x27;</span>)</span><br><span class="line">        self.dictpath = <span class="built_in">str</span>(path) </span><br><span class="line">        self.chengyu = <span class="built_in">set</span>()</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(self.dictpath, <span class="string">&#x27;rt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                self.chengyu.add(line.strip())</span><br><span class="line">        </span><br><span class="line">        self.answers = <span class="built_in">list</span>()</span><br><span class="line">        self.ask_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;&#x27;和&#x27;:[1,8], &#x27;我&#x27;:[11]&#125;</span></span><br><span class="line">        self.char_indexs_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;1:&#x27;和&#x27;, 8:&#x27;和&#x27;, 11:&#x27;我&#x27;&#125;</span></span><br><span class="line">        self.index_char_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自动提交答案的网络发送次数</span></span><br><span class="line">        self.auto_send_answers = <span class="built_in">list</span>()</span><br><span class="line">        self.ack_true_answers = <span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到的的成语中各异字符为2个的答案数量：如 [真真假假] </span></span><br><span class="line">        self.answer_2chars_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;&#x27;中流砥柱&#x27;:[1,9,21,25]&#125;</span></span><br><span class="line">        self.answer_indexs_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;&#x27;中流砥柱&#x27;:set(&#x27;中流砥柱&#x27;)&#125;</span></span><br><span class="line">        self.answer_charset_dict = <span class="built_in">dict</span>()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找到的错误答案</span></span><br><span class="line">        self.error_answers = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_answers_v2</span>(<span class="params">self, ask_string</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            在内存成语字典查找答案</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span>      </span><br><span class="line">        ask_set = <span class="built_in">set</span>(ask_string)        </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> <span class="built_in">enumerate</span>(ask_string):</span><br><span class="line">            self.char_indexs_dict.setdefault(c, []).append(i)</span><br><span class="line">        self.index_char_dict = <span class="built_in">dict</span>( <span class="built_in">zip</span>(<span class="built_in">range</span>(<span class="built_in">len</span>(ask_string)), ask_string)) </span><br><span class="line"></span><br><span class="line">        max_count = (<span class="built_in">len</span>(ask_string) / <span class="number">4</span> ) * <span class="number">1.5</span>         </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.chengyu:</span><br><span class="line">            item_set = self.answer_charset_dict.setdefault(item, <span class="built_in">set</span>(item))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (item_set - ask_set):</span><br><span class="line">                self.answers.append(item)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(item_set)&lt;<span class="number">4</span>:</span><br><span class="line">                    self.answer_2chars_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(self.answers) - self.answer_2chars_count &gt;= max_count :</span><br><span class="line">                    self.count = <span class="built_in">len</span>(self.answers)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        self.count = <span class="built_in">len</span>(self.answers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">auto_answer</span>(<span class="params">self, flow</span>):</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.answers):</span><br><span class="line">            item = self.answers[<span class="number">0</span>]</span><br><span class="line">            answer_index = []</span><br><span class="line">            counter = collections.Counter(item)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> char, count <span class="keyword">in</span> counter.items():</span><br><span class="line">                <span class="keyword">if</span> self.char_indexs_dict[char]:</span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(self.char_indexs_dict[char]) &lt; count:</span><br><span class="line">                        self.error_answers.append(item)</span><br><span class="line">                        self.answers.remove(item)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> item:</span><br><span class="line">                <span class="keyword">if</span> self.char_indexs_dict[c]:</span><br><span class="line">                    index = self.char_indexs_dict[c][<span class="number">0</span>]  </span><br><span class="line">                    answer_index.append( <span class="built_in">str</span>(index) )</span><br><span class="line">                    <span class="keyword">del</span> self.char_indexs_dict[c][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">set</span>(answer_index)) &lt; <span class="number">4</span>:</span><br><span class="line">                print(<span class="string">&#x27;算法有错误：&#123;&#125; 小于4&#x27;</span>.<span class="built_in">format</span>(answer_index))</span><br><span class="line"></span><br><span class="line">            send_message = &#123;</span><br><span class="line">                <span class="string">&#x27;answer&#x27;</span>: item,</span><br><span class="line">                <span class="string">&#x27;answer_index&#x27;</span>: answer_index,</span><br><span class="line">                <span class="string">&#x27;type&#x27;</span>: <span class="string">&#x27;answer&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">            mm = json.dumps(send_message)</span><br><span class="line">            <span class="comment"># -----------------------</span></span><br><span class="line">            print(mm)</span><br><span class="line">            <span class="comment"># ----------------------- </span></span><br><span class="line">            self.answer_indexs_dict[item] = answer_index</span><br><span class="line">            <span class="comment"># 向服务器发送消息</span></span><br><span class="line">            self.auto_send_answers.append(item)</span><br><span class="line">            self.answers.remove(item)</span><br><span class="line">            <span class="keyword">await</span> flow.send(mm)</span><br><span class="line">            <span class="comment"># time.sleep(0.5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_worlds_to_memory</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            把答案增加到内存字典中</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.ack_true_answers) &lt; <span class="built_in">len</span>(m[<span class="string">&#x27;all_answer&#x27;</span>]):</span><br><span class="line">            <span class="keyword">for</span> answer <span class="keyword">in</span> m[<span class="string">&#x27;all_answer&#x27;</span>]:</span><br><span class="line">                self.chengyu.add(answer[<span class="string">&#x27;phrase&#x27;</span>])</span><br><span class="line"></span><br><span class="line">        print(<span class="string">&#x27;\033[1;31m 共收录&#123;&#125;个成语 \033[0m&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(self.chengyu)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_worlds_to_file</span>(<span class="params">self, m</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            把答案增加到文件中</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">len</span>(self.ack_true_answers) &lt; <span class="built_in">len</span>(m[<span class="string">&#x27;all_answer&#x27;</span>]):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(self.dictpath, <span class="string">&#x27;wt&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                l = <span class="built_in">list</span>(self.chengyu)</span><br><span class="line">                l.sort()</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">                    f.write(item)</span><br><span class="line">                    f.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_answers</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">            图形化、色彩化显示答案</span></span><br><span class="line"><span class="string">        &#x27;&#x27;&#x27;</span></span><br><span class="line">        self.print_color(<span class="string">&#x27;共找到 &#123;&#125;/&#123;&#125; 个成语&#x27;</span>.<span class="built_in">format</span>(self.count, <span class="built_in">len</span>(self.ask_string)//<span class="number">4</span>))</span><br><span class="line">        self.print_color(<span class="string">&#x27;错误成语 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.error_answers))</span><br><span class="line">        self.print_color(<span class="string">&#x27;共自动 &#123;&#125; 次提交：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(self.auto_send_answers),self.auto_send_answers))</span><br><span class="line">        self.print_color(<span class="string">&#x27;已确认 &#123;&#125; 个提交：&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">len</span>(self.ack_true_answers),self.ack_true_answers))</span><br><span class="line">        self.print_color(<span class="string">&#x27;问题 &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(self.ask_string))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.answers:</span><br><span class="line">            self.print_color(item)</span><br><span class="line">            <span class="comment"># self.print_matrix(item)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.answers) <span class="keyword">and</span> self.index_char_dict:</span><br><span class="line">            self.print_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_matrix</span>(<span class="params">self, item = []</span>):</span></span><br><span class="line">        chars_in_line = <span class="number">6</span></span><br><span class="line">        length = <span class="built_in">len</span>(self.ask_string)        </span><br><span class="line"></span><br><span class="line">        lines = (length + chars_in_line - <span class="number">1</span>) // chars_in_line</span><br><span class="line">        PADDING = <span class="string">&#x27; &#x27;</span>*(lines * chars_in_line - length) </span><br><span class="line">        is_need_padding = <span class="built_in">len</span>(PADDING) != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.print_color(<span class="string">&#x27;--&#x27;</span>*chars_in_line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> colors, White</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> self.index_char_dict.items():</span><br><span class="line">            end = <span class="string">&#x27;&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>) % chars_in_line == <span class="number">0</span> <span class="keyword">or</span> (i+<span class="number">1</span>) == length:</span><br><span class="line">                end = <span class="string">&#x27;\n&#x27;</span>                </span><br><span class="line">            </span><br><span class="line">            color = White</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> item:                    </span><br><span class="line">                color = colors[item.index(c)]</span><br><span class="line"></span><br><span class="line">            line, first = <span class="built_in">divmod</span>(i, chars_in_line)</span><br><span class="line">            <span class="keyword">if</span> is_need_padding <span class="keyword">and</span> first == <span class="number">0</span> <span class="keyword">and</span> (line + <span class="number">1</span> == lines):</span><br><span class="line">                c = PADDING + c </span><br><span class="line"></span><br><span class="line">            self.print_color(c, end=end, color=color)</span><br><span class="line"></span><br><span class="line">        self.print_color(<span class="string">&#x27;--&#x27;</span>*chars_in_line)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_color</span>(<span class="params">self, message, end=<span class="string">&#x27;\n&#x27;</span>, color=Red</span>):</span></span><br><span class="line">        print(<span class="string">&#x27;&#123;&#125;&#123;&#125;\033[0m&#x27;</span>.<span class="built_in">format</span>(color, message), end=end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_data_to_init</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.ask_string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        self.answers.clear()</span><br><span class="line">        self.index_char_dict.clear()</span><br><span class="line"></span><br><span class="line">        self.count = <span class="number">0</span>        </span><br><span class="line">        self.answer_2chars_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.answer_indexs_dict.clear()</span><br><span class="line">        self.char_indexs_dict.clear()</span><br><span class="line">        self.error_answers.clear()</span><br><span class="line">        self.ack_true_answers.clear()</span><br><span class="line">        self.auto_send_answers.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chengyu_auto_answer</span>(<span class="params">user: QuXiaoChuUser</span>):</span></span><br><span class="line">    <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">    成语消消乐自动答题</span></span><br><span class="line"><span class="string">    wss://king.hddgood.com/websock_m/websock_message?uid=472251&amp;gameid=G15-3232777&amp;token=JSdLVVRRV0ZCH0INUlYNchcDUlc=</span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    result = user.game_chengyu_join_game(g_rank)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">&#x27;success&#x27;</span>]:</span><br><span class="line">        gameid = result[<span class="string">&#x27;result&#x27;</span>][<span class="string">&#x27;gameid&#x27;</span>]</span><br><span class="line">        url = <span class="string">&#x27;wss://king.hddgood.com/websock_m/websock_message?uid=&#123;&#125;&amp;gameid=&#123;&#125;&amp;token=&#123;&#125;&#x27;</span></span><br><span class="line">        url = url.<span class="built_in">format</span>(user.uid, gameid, user.token_header)</span><br><span class="line">        print(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> asyncio</span><br><span class="line">        <span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">chengyu</span>():</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url) <span class="keyword">as</span> websocket:</span><br><span class="line">                print(<span class="string">&#x27;连接成功&#x27;</span>)</span><br><span class="line">                <span class="keyword">global</span> chengyu</span><br><span class="line">                live = <span class="literal">True</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> live:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> count % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                        keeplive = json.dumps(&#123;<span class="string">&quot;type&quot;</span>:<span class="string">&quot;keepalive&quot;</span>&#125;)</span><br><span class="line">                        <span class="keyword">await</span> websocket.send(keeplive)</span><br><span class="line">                        print(<span class="string">&#x27;send keeplive&#x27;</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># await asyncio.sleep(0.5)                    </span></span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    m = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">                    print(<span class="string">f&quot;\n<span class="subst">&#123;m&#125;</span>\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">                    m = json.loads(m)</span><br><span class="line">                    message_type = m[<span class="string">&#x27;type&#x27;</span>]</span><br><span class="line">                    <span class="keyword">if</span> m.get(<span class="string">&#x27;ask_string&#x27;</span>):</span><br><span class="line">                        chengyu.ask_string = m[<span class="string">&#x27;ask_string&#x27;</span>]        </span><br><span class="line">                        <span class="comment"># 计算答案</span></span><br><span class="line">                        chengyu.find_answers_v2(chengyu.ask_string)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> message_type == <span class="string">&#x27;answer&#x27;</span>:</span><br><span class="line">                        chengyu.answer_indexs_dict[m[<span class="string">&#x27;answer&#x27;</span>]] = m[<span class="string">&#x27;answer_index&#x27;</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 删除已回答正确的答案</span></span><br><span class="line">                    <span class="keyword">if</span> m.get(<span class="string">&#x27;ack&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">                        answer = m[<span class="string">&#x27;answer&#x27;</span>]</span><br><span class="line">                        chengyu.ack_true_answers.append(answer)</span><br><span class="line">                        answer_index = chengyu.answer_indexs_dict.get(answer,[])</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> answer_index:</span><br><span class="line">                            chengyu.index_char_dict[<span class="built_in">int</span>(i)] = <span class="string">&#x27;  &#x27;</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            chengyu.answers.remove(m[<span class="string">&#x27;answer&#x27;</span>])</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 自动答题</span></span><br><span class="line">                    <span class="keyword">await</span> chengyu.auto_answer(websocket)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 显示答案</span></span><br><span class="line">                    <span class="keyword">if</span> <span class="built_in">len</span>(chengyu.ask_string):</span><br><span class="line">                        chengyu.print_answers()</span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> message_type == <span class="string">&#x27;game_result&#x27;</span>:</span><br><span class="line">                        live = <span class="literal">False</span></span><br><span class="line">                        <span class="comment"># 把答案增加到内存字典中</span></span><br><span class="line">                        chengyu.add_new_worlds_to_memory(m)</span><br><span class="line"></span><br><span class="line">                        chengyu.add_new_worlds_to_file(m) </span><br><span class="line"></span><br><span class="line">                        chengyu.reset_data_to_init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 其它解析</span></span><br><span class="line">                        <span class="keyword">for</span> item <span class="keyword">in</span> m[<span class="string">&#x27;scores&#x27;</span>]:</span><br><span class="line">                            <span class="keyword">if</span> <span class="built_in">str</span>(item[<span class="string">&#x27;uid&#x27;</span>]) == user.uid:</span><br><span class="line">                                <span class="keyword">global</span> g_rank</span><br><span class="line">                                g_rank = item[<span class="string">&#x27;rank&#x27;</span>] </span><br><span class="line"></span><br><span class="line">                        print(<span class="string">&#x27;\033[1;31m 获得金币: &#123;&#125; Rank: &#123;&#125;\033[0m&#x27;</span>.<span class="built_in">format</span>(m[<span class="string">&#x27;coin&#x27;</span>], g_rank))</span><br><span class="line"></span><br><span class="line">                print(<span class="string">&#x27;\033[1;31m 游戏结束 \033[0m&#x27;</span>)            </span><br><span class="line"></span><br><span class="line">        asyncio.get_event_loop().run_until_complete(chengyu())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genUsers</span>():</span></span><br><span class="line">    <span class="keyword">yield</span> QuXiaoChuUser(UUID_zxg, A_Token_Header_zxg, Cookie_zxg)</span><br><span class="line"></span><br><span class="line">g_rank = <span class="number">15</span></span><br><span class="line">chengyu = Chengyu()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> genUsers():</span><br><span class="line"></span><br><span class="line">        start_time = time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime())</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>):   </span><br><span class="line">            chengyu_auto_answer(user)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">&#x27;开始时间 &#x27;</span>, start_time)</span><br><span class="line">        print(<span class="string">&#x27;结束时间 &#x27;</span>, time.strftime(<span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>, time.localtime()))      </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><code>chengyu.text</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一劳永逸</span><br><span class="line">一掷千金</span><br><span class="line">一曝十寒</span><br><span class="line">一石二鸟</span><br><span class="line">一筹莫展</span><br><span class="line">一落千丈</span><br><span class="line">一衣带水</span><br><span class="line">一语破的</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<p><strong>注意：</strong><br><strong><code>chengyu.text</code>与<code>chengyu-auto.py</code>放在同一目录下</strong><br><strong><code>chengyu.text</code>收集约1926个成语，98%能找到全部答案</strong></p>
<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></li>
<li><a href="https://pypi.org/project/websockets/">https://pypi.org/project/websockets/</a></li>
</ul>
<p>楼主的<code>趣消除App</code>系列文章</p>
<ol>
<li><a href="https://www.52pojie.cn/thread-923040-1-1.html">趣消除App自动化 - 签到and作战休息区</a></li>
<li><a href="https://www.jianshu.com/p/508c4169272d">趣消除App自动化 - 成语消消乐-半自动化</a></li>
<li><a href="https://www.jianshu.com/p/ac3add6cb1a1">趣消除App自动化 - 成语消消乐-全自动化</a></li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>yanbin的博客文章</title>
    <url>/2020/11/26/%E5%8D%9A%E5%AE%A2%E6%96%87%E7%AB%A0-yanbin/</url>
    <content><![CDATA[<ul>
<li><a href="https://yanbin.blog/5-best-vim-cheat-sheet/">5 个最好的  Vim 速查卡 (Cheat Sheet)</a></li>
<li><a href="https://yanbin.blog/akka-actor-start-with-easy-example/">Akka Actor: 从最简单的例子开始</a></li>
<li><a href="https://yanbin.blog/apache-avro-serializing-deserializing/">Apache Avro 序列化与反序列化 (Java 实现)</a></li>
<li><a href="https://yanbin.blog/apache-run-python-cgi-config/">Apache 中运行 Python CGI 程序</a></li>
<li><a href="https://yanbin.blog/bash-emacs-vi-key-bindings/">Bash 下的 emacs 和  vi 键绑定</a></li>
<li><a href="https://yanbin.blog/bash-common-syntax-control-structures/">Bash 的常用语法，控制结构</a></li>
<li><a href="https://yanbin.blog/bash-zsh-call-emacs-vim-edit-current-command/">Bash/Zsh 下调用 Emacs/Vim 编辑当前命令</a></li>
<li><a href="https://yanbin.blog/clojure-lein-repl-connect-session/">Clojure REPL 连接远程会话</a></li>
<li><a href="https://yanbin.blog/clojure-get-started/">Clojure 快速突击</a></li>
<li><a href="https://yanbin.blog/clojure-get-started-1/">Clojure 快速突击(续)</a></li>
<li><a href="https://yanbin.blog/completablefuture-concurrent-performance/">CompletableFuture 的并发性能研究</a></li>
<li><a href="https://yanbin.blog/docker-compose-in-action/">Docker Compose 实践</a></li>
<li><a href="https://yanbin.blog/docker-swarm-cluster-in-action/">Docker Swarm 集群模式实操</a></li>
<li><a href="https://yanbin.blog/docker-attach-deattach-without-exit-container/">Docker attach 后断开时不退出容器</a></li>
<li><a href="https://yanbin.blog/docker-process-namespace/">Docker 容器内进程与 Namespace</a></li>
<li><a href="https://yanbin.blog/dockerfile-difference-between-shell-exec-forms/">Dockerfile 中命令的两种书写方式的区别</a></li>
<li><a href="https://yanbin.blog/flask-vue-js-integration-dev-deploy/">Flask 和  Vue.js 开发及整合部署实例</a></li>
<li><a href="https://yanbin.blog/flask-replacement-aiohttp-quart/">Flask 的替代品 aiohttp 和 Quart</a></li>
<li><a href="https://yanbin.blog/flask-vue-js-integrate-with-bootstrap-bootstrapvue/">Flask, Vue.js 中集成 Bootstrap/BootstrapVue</a></li>
<li><a href="https://yanbin.blog/giter8-put-project-layout-on-github/">Giter8 – 把项目布局模板放到 GitHub 上</a></li>
<li><a href="https://yanbin.blog/google-guice-hello-world/">Google Guice 轻装上阵</a></li>
<li><a href="https://yanbin.blog/groovy-multiple-assignment-returns/">Groovy 的多重赋值和方法的多返回值</a></li>
<li><a href="https://yanbin.blog/hazelcast-introduction/">Hazelcast 介绍与使用(整理)</a></li>
<li><a href="https://yanbin.blog/hibernate-map-enum-type-field/">Hibernate 映射枚举(Enum) 类型的属性</a></li>
<li><a href="https://yanbin.blog/intellij-idea-create-maven-scala-project/">IntelliJ IDEA 中创建 Maven Scala 项目</a></li>
<li><a href="https://yanbin.blog/jmockit-capture-mock-call-arguments/">JMockit 中捕获 mock 对象方法的调用参数</a></li>
<li><a href="https://yanbin.blog/jmockit-mocked-object-default-field-method-values/">JMockit 中被 Mocked 的对象属性及方法的默认值</a></li>
<li><a href="https://yanbin.blog/jmockit-partial-mock/">JMockit 如何 Mock 部分方法/属性</a></li>
<li><a href="https://yanbin.blog/junit-5-work-with-mockito-2/">JUnit 5 使用 Mockito 2 进行测试</a></li>
<li><a href="https://yanbin.blog/junit-5-new-features-and-get-started/">JUnit 5 快速上手(从 JUnit 4 到 JUnit 5)</a></li>
<li><a href="https://yanbin.blog/junit-test-instance-lifecycle/">JUnit 中是以测试方法为一个独立的生命周期</a></li>
<li><a href="https://yanbin.blog/lisp-over-jvm-dialect-clojure-1-9/">JVM 上的 Lisp 方言 Clojure 1.9</a></li>
<li><a href="https://yanbin.blog/jackson-yn-boolean-value-deserialization/">Jackson 反序列化 “Y”/“N” 为相应的布尔值</a></li>
<li><a href="https://yanbin.blog/jackson-ignore-specified-field-type/">Jackson 序列化忽略指定类型的属性</a></li>
<li><a href="https://yanbin.blog/java-8-completablefuture-brief-touch/">Java 8 CompletableFuture 浅入</a></li>
<li><a href="https://yanbin.blog/java-8-lambda-simple-ways/">Java 8 Lambda 写法与简化</a></li>
<li><a href="https://yanbin.blog/java-8-lambda-capture-outer-variables/">Java 8 Lambda 捕获外部变量</a></li>
<li><a href="https://yanbin.blog/java-8-map-new-added-methods/">Java 8 Map 中新增的方法使用记录</a></li>
<li><a href="https://yanbin.blog/java-8-stream-to-collection/">Java 8 Stream 如何还原为集合</a></li>
<li><a href="https://yanbin.blog/java8-repeatable-annotations/">Java 8 可重复注解的理解与应用</a></li>
<li><a href="https://yanbin.blog/java-8-list-deduplication-with-lambda/">Java 8 根据属性值对列表去重</a></li>
<li><a href="https://yanbin.blog/java-8-groupingby-empty-map-group/">Java 8 的 groupingBy 产生空的 Map 分组</a></li>
<li><a href="https://yanbin.blog/java-8-groupingby-howto-generate-empty-map/">Java 8 的 groupingBy 能否产生空的 Map 分组</a></li>
<li><a href="https://yanbin.blog/java-8-generic-enhance/">Java 8 的泛型增强</a></li>
<li><a href="https://yanbin.blog/java-8-return-the-first-match-element/">Java 8 返回集合中第一个匹配的元素</a></li>
<li><a href="https://yanbin.blog/java-9-platform-logging-api/">Java 9 - 平台日志 API</a></li>
<li><a href="https://yanbin.blog/java-9-quick-create-immutable-collections/">Java 9 - 快速创建不可变集合</a></li>
<li><a href="https://yanbin.blog/java-9-talk-reactive-stream/">Java 9 - 说说响应式流</a></li>
<li><a href="https://yanbin.blog/java-stack-walking-api/">Java 9 线程栈遍历 API</a></li>
<li><a href="https://yanbin.blog/java-nio2-aio-readfile/">Java NIO2(AIO) 进行文件异步读取</a></li>
<li><a href="https://yanbin.blog/java-python-communicate-via-apache-avro/">Java 与 Python 通过 Apache Avro 交换数据</a></li>
<li><a href="https://yanbin.blog/java-postgresql-unit-test/">Java 与’嵌入式’ PostgreSQL 数据库的单元测试</a></li>
<li><a href="https://yanbin.blog/java-spring-meta-annotation/">Java 元注解及 Spring 组合注解应用</a></li>
<li><a href="https://yanbin.blog/java-unit-test-assert-console-output/">Java 单元测试如何断言(检查)控制台输出</a></li>
<li><a href="https://yanbin.blog/java-reflection-modify-final-field-value/">Java 反射修改 final 属性值</a></li>
<li><a href="https://yanbin.blog/java-reflection-modify-final-field/">Java 反射有效的修改 final 属性值</a></li>
<li><a href="https://yanbin.blog/java-varargs-method-error-prone/">Java 可变参 Object…objects 方法的陷进</a></li>
<li><a href="https://yanbin.blog/java-constant-interface-anti-pattern/">Java 接口常量反模式及如何定义 Java 常量</a></li>
<li><a href="https://yanbin.blog/common-threadpool-vs-forkjoinpool/">Java 普通线程池与 ForkJoinPool 的效果对比</a></li>
<li><a href="https://yanbin.blog/java-built-tools-sbt-simplist-project/">Java 构建工具及 sbt 最快速体验</a></li>
<li><a href="https://yanbin.blog/java-generic-auto-infer-by-declare-type/">Java 泛型 – 依据声明的变量类型自动推断</a></li>
<li><a href="https://yanbin.blog/java-fork-join-framework-memo/">Java 的  fork-join 框架实例备忘</a></li>
<li><a href="https://yanbin.blog/java-assertion-guava-preconditions/">Java 的参数检查与断言 - Guava Preconditions</a></li>
<li><a href="https://yanbin.blog/java-assertion-spring-assert/">Java 的参数检查与断言 - Spring Assert</a></li>
<li><a href="https://yanbin.blog/java-parse-xml-suppress-fatal-error-output/">Java 解析 XML 时如何屏蔽掉 “[Fatal Error]” 的输出</a></li>
<li><a href="https://yanbin.blog/java-language-defect-1-no-here-document/">Java 语言的几个缺陷之一: 无 Here Document</a></li>
<li><a href="https://yanbin.blog/java-language-defect-3-not-support-var-type-infer/">Java 语言的几个缺陷之三: 不支持 var 类型推断</a></li>
<li><a href="https://yanbin.blog/java-language-defect-2-equals-compare-strings/">Java 语言的几个缺陷之二: equals() 比较字符串</a></li>
<li><a href="https://yanbin.blog/java-language-defect-no-multiple-returns/">Java 语言的几个缺陷之五: 多返回值问题</a></li>
<li><a href="https://yanbin.blog/java-language-defect-no-string-interpolation/">Java 语言的几个缺陷之六: 无字符串插值</a></li>
<li><a href="https://yanbin.blog/java-language-defect-4-outdated-javabean/">Java 语言的几个缺陷之四: 过时的 JavaBean</a></li>
<li><a href="https://yanbin.blog/java-how-to-get-generic-type/">Java 运行时如何获取泛型参数的类型</a></li>
<li><a href="https://yanbin.blog/java8-lambda-and-checked-exception/">Java8 Lambda 表达式与 Checked Exception</a></li>
<li><a href="https://yanbin.blog/java8-optional-several-common-incorrect-usages/">Java8 Optional 几个常见错误用法</a></li>
<li><a href="https://yanbin.blog/jdbctemplate-java-8-lambda-trick/">JdbcTemplate 易被 Java 8 Lambda 带入的坑</a></li>
<li><a href="https://yanbin.blog/kafka-connect-how-to/">Kafka Connect 介绍和使用</a></li>
<li><a href="https://yanbin.blog/kafka-producer-interceptor-record-statistics/">Kafka Producer 设置 Interceptor 来统计消息</a></li>
<li><a href="https://yanbin.blog/how-kafka-select-partition/">Kafka 发布消息时如何选择 Partition</a></li>
<li><a href="https://yanbin.blog/kafka-produce-consume-avro-data/">Kafka 生产消费 Avro 序列化数据</a></li>
<li><a href="https://yanbin.blog/kafka-mirror-maker-in-action/">Kafka 集群间数据镜像实测</a></li>
<li><a href="https://yanbin.blog/kubernetes-learning-1/">Kubernetes 学习笔记(一) - 初上手</a></li>
<li><a href="https://yanbin.blog/kubernetes-learning-2-run-service/">Kubernetes 学习笔记(二) - 部署和访问应用</a></li>
<li><a href="https://yanbin.blog/kubernetes-cluster-internal-ip-issue/">Kubernetes 集群中节点的 INTERNAL-IP 问题</a></li>
<li><a href="https://yanbin.blog/linux-config-log-ratation-logrotate/">Linux 下配置滚动日志之 logrotate</a></li>
<li><a href="https://yanbin.blog/linux-config-log-ratation-rotatelogs/">Linux 下配置滚动日志之 rotatelogs</a></li>
<li><a href="https://yanbin.blog/linux-input-output-redirection/">Linux 输入输出重定向, &amp;&gt;file, 2&gt;&amp;1, 1&gt;&amp;2 等</a></li>
<li><a href="https://yanbin.blog/mac-os-x-issue-of-brew-update/">Mac OS X 下不能 brew update 的问题</a></li>
<li><a href="https://yanbin.blog/mac-os-x-experience-docker-new-2/">Mac OS X 下安装使用 Docker (新)</a></li>
<li><a href="https://yanbin.blog/mockito-capture-method-paramters/">Mockito 中捕获 mock 对象方法的调用参数</a></li>
<li><a href="https://yanbin.blog/mockito-mocked-default-fields-method-returns/">Mockito 中被 Mocked 的对象属性及方法的默认值</a></li>
<li><a href="https://yanbin.blog/mockito-mock-final-class-final-method/">Mockito 也能 Mock final 类和 final 方法了</a></li>
<li><a href="https://yanbin.blog/mockito-how-to-mock-void-method/">Mockito 如何 mock 返回值为 void 的方法</a></li>
<li><a href="https://yanbin.blog/mockito-anystring-anyfoo-class-cannot-match-null-values/">Mockito 的 anyString(), any(Foo.class) 等不能匹配 null 值</a></li>
<li><a href="https://yanbin.blog/nginx-gunicorn-flask-integration/">Nginx + Gunicorn + Flask 集成配置</a></li>
<li><a href="https://yanbin.blog/nodejs-web-server-listen-on-domain-socket/">NodeJS 的 Web 服务也可以监听在 sock 文件</a></li>
<li><a href="https://yanbin.blog/play2-custom-template-type-java-scala/">Play2 自定义模板类型 (Java&amp;Scala)</a></li>
<li><a href="https://yanbin.blog/play2-3-custom-view-template-java/">Play2.3 自定义模板类型 – Java 版</a></li>
<li><a href="https://yanbin.blog/postgresql-unnest-batch-crud-merge/">PostgreSQL 批量插入,  更新和合并操作</a></li>
<li><a href="https://yanbin.blog/python-urlencode-urldecode/">Python  中的  urlencode 和 urldecode 操作</a></li>
<li><a href="https://yanbin.blog/python-sort-list-sort-sorted/">Python  列表的排序 - sort/sorted</a></li>
<li><a href="https://yanbin.blog/python-3-7-what-is-new/">Python 3.7 所带来的新特性</a></li>
<li><a href="https://yanbin.blog/python-datetime-timezone/">Python datetime 处理时区信息</a></li>
<li><a href="https://yanbin.blog/python-redirect-print-immediately/">Python print 立即打印内容到重定向的文件</a></li>
<li><a href="https://yanbin.blog/python-function-argument-unpacking/">Python 函数参数的拆解</a></li>
<li><a href="https://yanbin.blog/python-function-declaration-order/">Python 函数声明先后顺序的问题</a></li>
<li><a href="https://yanbin.blog/python-package-manager-venv-virtualenv-1/">Python 包管理及虚拟环境的应用(一: pip)</a></li>
<li><a href="https://yanbin.blog/python-package-manager-venv-virtualenv-3/">Python 包管理及虚拟环境的应用(三: pipenv)</a></li>
<li><a href="https://yanbin.blog/python-package-manager-venv-virtualenv-2/">Python 包管理及虚拟环境的应用(二: virtualenv)</a></li>
<li><a href="https://yanbin.blog/python-package-manager-venv-virtualenv-4/">Python 包管理及虚拟环境的应用(四: conda)</a></li>
<li><a href="https://yanbin.blog/python-json-choose-ujson-if-necessary/">Python 处理 JSON 必要时我选择 ujson 和 orjson</a></li>
<li><a href="https://yanbin.blog/python-programming-with-threads/">Python 多线程编程</a></li>
<li><a href="https://yanbin.blog/add-python-methods-dynamically/">Python 对象当函数使及动态添加方法</a></li>
<li><a href="https://yanbin.blog/python-datetime-calendar-dateutil/">Python 常用日期处理 – calendar 与 dateutil 模块</a></li>
<li><a href="https://yanbin.blog/python-date-libraries-usages/">Python 常用日期处理 – 内置模块 datetime</a></li>
<li><a href="https://yanbin.blog/python-execute-system-command/">Python 执行系统命令 - subprocess 模块的使用</a></li>
<li><a href="https://yanbin.blog/python-try-with-resources-with-context-manager/">Python 版的 try-with-resources – with 上下文管理器</a></li>
<li><a href="https://yanbin.blog/python-__str__vs__repr__methods/">Python 的 <strong>str</strong> 和 <strong>repr</strong> 方法比较</a></li>
<li><a href="https://yanbin.blog/python-module-search-path/">Python 的模块搜索路径</a></li>
<li><a href="https://yanbin.blog/python-thread-pool-using-bounded-working-queue/">Python 线程池使用有限大小的工作队列</a></li>
<li><a href="https://yanbin.blog/python-collection-map-reduce-operations/">Python 集合的遍历,推导及 filter/map/reduce 操作</a></li>
<li><a href="https://yanbin.blog/redis-builtin-lua-script/">Redis 中使用服务端 Lua 脚本</a></li>
<li><a href="https://yanbin.blog/redis-notes-chaos/">Redis 知识点乱记</a></li>
<li><a href="https://yanbin.blog/sql-server-and-hsqldb-use-merge-into-do-saveorupdate/">SQL Server 和 HSQLDB 中使用 merge into 完成 saveOrUpdate 操作</a></li>
<li><a href="https://yanbin.blog/scala-junit-how-to-rule/">Scala + JUnit 怎么使用 @Rule</a></li>
<li><a href="https://yanbin.blog/scala-concurrent-with-future/">Scala 中应用 Future 并发编程</a></li>
<li><a href="https://yanbin.blog/scala-infix-prefix-postfix-operators/">Scala 中置, 前置, 后置操作符</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-linux-tools/">Scala 函数式编程学习视频 – Linux 下工具设置</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-mac-os-x-tools/">Scala 函数式编程学习视频 – Mac OS X 下工具设置</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-windows-tools/">Scala 函数式编程学习视频 – Windows 下工具设置</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-example-square-roots-with-newtons-method/">Scala 函数式编程学习视频 – 例子：平方根和牛顿方法</a></li>
<li><a href="https://yanbin.blog/functional-programming-principles-in-scala-video-catalog/">Scala 函数式编程学习视频 – 总目</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-assignments/">Scala 函数式编程学习视频 – 指导: 编程作业</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-conditionals-value-definitions/">Scala 函数式编程学习视频 – 条件和值定义</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-evaluation-strategies-termination/">Scala 函数式编程学习视频 – 求值策略和终止</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-elements/">Scala 函数式编程学习视频 – 编程元素</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-paradigms/">Scala 函数式编程学习视频 – 编程范式</a></li>
<li><a href="https://yanbin.blog/scala-functional-programming-course-introduction/">Scala 函数式编程学习视频 – 课程介绍</a></li>
<li><a href="https://yanbin.blog/scala-java-collections-cast/">Scala 和 Java 的集合类型相互转换</a></li>
<li><a href="https://yanbin.blog/scala-how-to-test-exception/">Scala 如何测试异常</a></li>
<li><a href="https://yanbin.blog/scala-parameter-check-and-assertion/">Scala 的参数检查与断言: require, assert, assume 和 ensuring</a></li>
<li><a href="https://yanbin.blog/scala-self-type-understanding/">Scala 自身类型(self-type) 解析</a></li>
<li><a href="https://yanbin.blog/scalatest-selenium-integration-test-with-browsers/">ScalaTest + Selenium 集成测试</a></li>
<li><a href="https://yanbin.blog/spark-submit-invalid-signature-file-digest-error/">Spark 提交任务时 Invalid signature file digest 错误</a></li>
<li><a href="https://yanbin.blog/springboot-work-with-logback/">Spring Boot 与 Logback 日志配置</a></li>
<li><a href="https://yanbin.blog/springfox-swagger2-generate-api-documet/">Spring MVC 项目中用 SpringFox 生成 Swagger2 API 文档</a></li>
<li><a href="https://yanbin.blog/spring-servicelocator-pattern/">Spring ServiceLocator 介绍及应用</a></li>
<li><a href="https://yanbin.blog/spring-intercept-method-based-on-annotation/">Spring 下基于自定义注解拦截方法调用</a></li>
<li><a href="https://yanbin.blog/spring-work-with-factorybean/">Spring 中 FactoryBean 的使用</a></li>
<li><a href="https://yanbin.blog/how-spring-initialize-generic-object/">Spring 如何初始化泛型类实例</a></li>
<li><a href="https://yanbin.blog/spring-schedule-runner-threads/">Spring 定时任务(Schedule) 和线程</a></li>
<li><a href="https://yanbin.blog/spring-external-sql-statements/">Spring 项目中把 SQL 语句写在 .sql 文件中</a></li>
<li><a href="https://yanbin.blog/spring-properties-sql-in-xml-file/">Spring 项目中把属性或 SQL 语句写在 .xml 文件中</a></li>
<li><a href="https://yanbin.blog/springfox-single-resource-operation-multiple-methods-swagger-documentation/">Springfox 解决在单一资源操作多个方法实现时生成 Swagger 文档的问题</a></li>
<li><a href="https://yanbin.blog/swift-learning-autoclosure-call-by-name/">Swift 学习笔记(@autoclosure 与 call-by-name)</a></li>
<li><a href="https://yanbin.blog/swift-learning-function/">Swift 学习笔记(函数)</a></li>
<li><a href="https://yanbin.blog/swift-learning-function-first-class/">Swift 学习笔记(函数第一等)</a></li>
<li><a href="https://yanbin.blog/swift-learning-basic-syntax/">Swift 学习笔记(基本语法)</a></li>
<li><a href="https://yanbin.blog/swift-learning-class-object/">Swift 学习笔记(对象和类)</a></li>
<li><a href="https://yanbin.blog/swift-learning-closues/">Swift 学习笔记(闭包)</a></li>
<li><a href="https://yanbin.blog/swift-server-side-development/">Swift 语言 Server 端开发资料收集</a></li>
<li><a href="https://yanbin.blog/terraform-get-started-with-first-sample/">Terraform 使用 - 从最简单例子开始</a></li>
<li><a href="https://yanbin.blog/terraform-deploy-lambda-create-resources/">Terraform 进阶 - 部署 Lambda 并创建相关资源</a></li>
<li><a href="https://yanbin.blog/vi-buffer-basic-operation/">Vi Buffer 的基本操作</a></li>
<li><a href="https://yanbin.blog/vi-cursor-location-move/">Vi 中的光标位置操作</a></li>
<li><a href="https://yanbin.blog/vi-vundle-plugininstall-errors/">Vi 使用 Vundle 管理插件执行 PluginInstall 出错</a></li>
<li><a href="https://yanbin.blog/vi-registers-system-clipboard/">Vi 寄存器操作，及使用系统剪贴板</a></li>
<li><a href="https://yanbin.blog/vim-java-autocomplete-with-vim-javacomplete2/">Vim 中 Java 代码自动完成 - vim-javacomplete2</a></li>
<li><a href="https://yanbin.blog/vim-execute-selection-as-shell/">Vim 中使用被选择文本以 Shell 命令执行</a></li>
<li><a href="https://yanbin.blog/vim-operate-tabs/">Vim 中标签(tab) 操作</a></li>
<li><a href="https://yanbin.blog/vimer-mac-caps-hjkl-as-arrow-keys/">Vimer 的福音：Mac 下 Caps + hjkl 作为方向键</a></li>
<li><a href="https://yanbin.blog/vue-js-vue-prism-editor/">Vue.js 项目使用  vue-prism-editor 语法高亮与编辑器</a></li>
<li><a href="https://yanbin.blog/wordpress-linux-cannot-send-out-email/">WordPress 在 Linux 下不能发送邮件的问题</a></li>
<li><a href="https://yanbin.blog/wordpress-linux-cannot-send-email-to-gmail/">WordPress 在 Linux 下不能向 Gmail 邮箱发邮件的问题</a></li>
<li><a href="https://yanbin.blog/zookeeper-fast-get-started/">ZooKeeper 快速搭建与体验</a></li>
<li><a href="https://yanbin.blog/fish-2-2-0-july-12-2015-support-vi-mode/">fish 2.2.0 (July 12, 2015) 支持 vi 模式</a></li>
<li><a href="https://yanbin.blog/sbt-tests-execute-in-parallel/">sbt 中单元测试并发执行</a></li>
<li><a href="https://yanbin.blog/sbt-task-dependency/">sbt 任务间的依赖</a></li>
<li><a href="https://yanbin.blog/sbt-simplest-inputtask-sample/">sbt 最简单的带输入任务 inputTask</a></li>
<li><a href="https://yanbin.blog/sbt-project-sbt-aspectj-plugin-use-aspectj/">sbt 项目通过 sbt-aspectj-plugin 使用 AspectJ</a></li>
<li><a href="https://yanbin.blog/practical-vim-2-notes-1/">《Practical Vim》阅读笔记 (1)</a></li>
<li><a href="https://yanbin.blog/practical-vim-2-notes-2/">《Practical Vim》阅读笔记 (2)</a></li>
<li><a href="https://yanbin.blog/practical-vim-2-notes-3/">《Practical Vim》阅读笔记 (3)</a></li>
<li><a href="https://yanbin.blog/practical-vim-2-notes-4/">《Practical Vim》阅读笔记 (4)</a></li>
<li><a href="https://yanbin.blog/basic-spring-4-mvc-maven-project/">一个最基础的 Spring 4 MVC Maven 项目</a></li>
<li><a href="https://yanbin.blog/simple-java-auto-batch-queue/">一个简单的 Java 自动批处理队列</a></li>
<li><a href="https://yanbin.blog/three-ways-tell-generic-concrete-type/">三种方式告知泛型类或泛型方法具体类型</a></li>
<li><a href="https://yanbin.blog/two-basic-sorting-algorithms/">两种最基本的排序算法: 冒泡和选择</a></li>
<li><a href="https://yanbin.blog/from-notbook-to-jupyterlab-with-kite/">从 Notbook 到 JupyterLab,  再配上代码帮手 Kite</a></li>
<li><a href="https://yanbin.blog/reading-clean-code-note-1/">代码整洁之道(Clean Code) 笔记(一)</a></li>
<li><a href="https://yanbin.blog/reading-clean-code-note-3/">代码整洁之道(Clean Code) 笔记(三)</a></li>
<li><a href="https://yanbin.blog/reading-clean-code-note-2/">代码整洁之道(Clean Code) 笔记(二)</a></li>
<li><a href="https://yanbin.blog/the-principles-of-good-programming/">优秀程序设计的18大原则</a></li>
<li><a href="https://yanbin.blog/scala-2-12-java-8-sam-lambda/">体验 Scala 2.12 支持的 Java 8 风格(SAM) Lambda</a></li>
<li><a href="https://yanbin.blog/python-3-8-new-features/">体验一下 Python 3.8 带来的主要新特性</a></li>
<li><a href="https://yanbin.blog/test-asyn-call-with-awaitility/">使用 Awaitility 测试异步代码</a></li>
<li><a href="https://yanbin.blog/leverage-bytebuddy-generate-generic-subclass/">使用 Byte Buddy 运行时生成泛型子类</a></li>
<li><a href="https://yanbin.blog/google-guava-striped-key-based-fine-grain-locks/">使用 Google Guava Striped 实现基于 Key 的并发锁</a></li>
<li><a href="https://yanbin.blog/jmockit-mock-constructors/">使用 JMockit 来 mock 构造函数</a></li>
<li><a href="https://yanbin.blog/proper-ways-of-using-java8-optional/">使用 Java8 Optional 的正确姿势</a></li>
<li><a href="https://yanbin.blog/leverage-javassist-generate-generic-subclass/">使用 Javassist 运行时生成泛型子类</a></li>
<li><a href="https://yanbin.blog/mockito-modify-private-field/">使用 Mockito 修改私有属性</a></li>
<li><a href="https://yanbin.blog/mockito-injectmocks-initialize-tested-instance/">使用 Mockito 的 @InjectMocks 创建被测试类实例</a></li>
<li><a href="https://yanbin.blog/nodejs-atom-shell-gui-app-hello-world/">使用 NodeJS 框架 Atom Shell 编写桌面应用入门</a></li>
<li><a href="https://yanbin.blog/nodejs-nw-js-gui-app-hello-world/">使用 NodeJS 框架 NW.js 编写桌面应用入门</a></li>
<li><a href="https://yanbin.blog/use-postgresql-uuid-field-data-type/">使用 PostgreSQL 的 uuid 字段类型</a></li>
<li><a href="https://yanbin.blog/use-sql-server-uniqueidentifier-data-type/">使用 SQL Server 的 uniqueidentifier 字段类型</a></li>
<li><a href="https://yanbin.blog/avro-tools-jq-view-apache-avro-file/">使用 avro-tools, jq 查看 Apache Avro 序列化文件</a></li>
<li><a href="https://yanbin.blog/maven-plugin-aspectj-weaving/">使用插件 aspectj-maven-plugin 织入 AspectJ AOP</a></li>
<li><a href="https://yanbin.blog/about-apache-flask-integration/">关于 Apache  与  Flask 的集成经历</a></li>
<li><a href="https://yanbin.blog/rough-interface-based-programming/">再论机械式针对接口编程</a></li>
<li><a href="https://yanbin.blog/several-method-installing-kubernetes-cluster/">几种简单安装 Kubernetes 集群的方法</a></li>
<li><a href="https://yanbin.blog/kotlin-function-definition-vs-scala/">函数定义 Kotlin V.S. Scala</a></li>
<li><a href="https://yanbin.blog/create-python-list-set-dict/">创建 Python 的 list, set, tuple 和 dict</a></li>
<li><a href="https://yanbin.blog/kafka-enable-saslacl/">启用并测试 Kafka 的 SASL + ACL 认证授权</a></li>
<li><a href="https://yanbin.blog/pass-arguments-to-docker-container/">如何向 Docker 容器传递参数</a></li>
<li><a href="https://yanbin.blog/customize-spring-boot-banner/">如何定制 Spring Boot 的 Banner</a></li>
<li><a href="https://yanbin.blog/happy-with-java8-lambda/">如何快乐的使用 Java 8 的 Lambda</a></li>
<li><a href="https://yanbin.blog/run-clojure-script-file/">如何直接运行 Clojure 脚本文件</a></li>
<li><a href="https://yanbin.blog/understand-sort-function/">如何轻松理解排序函数</a></li>
<li><a href="https://yanbin.blog/learn-junit-5-new-features/">学习并体验 JUnit 5 新特性</a></li>
<li><a href="https://yanbin.blog/aws-s3-multipe-parts-upload/">实现 Amazon S3 数据(文件)分段上传</a></li>
<li><a href="https://yanbin.blog/java-9-single-underscore-keyword-thinking/">对 Java 9 把单个下划线作为关键字的猜想</a></li>
<li><a href="https://yanbin.blog/try-spring-boot-spring-mvc/">小试 Spring Boot - Spring MVC</a></li>
<li><a href="https://yanbin.blog/consolidate-use-of-java-future/">巩固 Java Future 的使用</a></li>
<li><a href="https://yanbin.blog/shell-sort-enhanced-insertion-sort/">希尔(Shell) 排序 -  增强版插入排序算法</a></li>
<li><a href="https://yanbin.blog/different-between-concurrent-and-parallel/">并发(Concurrent) 与并行(Parallel) 的区别</a></li>
<li><a href="https://yanbin.blog/layout-like-playframework-2/">建立 Play 2 框架一样的目录布局</a></li>
<li><a href="https://yanbin.blog/aws-boto3-python-ide-autocomplete/">开启 Python 组件 Boto3 在 IDE 中的智能提示</a></li>
<li><a href="https://yanbin.blog/python-again-lightweight-tools/">开始再战 Python - 重新入门 - 工具篇</a></li>
<li><a href="https://yanbin.blog/the-last-basic-merge-sorting/">归并排序算法解析</a></li>
<li><a href="https://yanbin.blog/features-of-ideal-programming-language/">想像中理想编程语言的几个特征</a></li>
<li><a href="https://yanbin.blog/my-python-warm-up/">我的 Python 快速入门</a></li>
<li><a href="https://yanbin.blog/split-playframework-2-routes-into-mutiple-files/">拆分 Playframework 2 的 routes 为多个文件</a></li>
<li><a href="https://yanbin.blog/how-flask-work-with-asyncio/">探索 Flask 对 asyncio 的支持</a></li>
<li><a href="https://yanbin.blog/push-docker-image-to-amazon-ecr-repository/">推送 Docker 镜像到 Amazon ECR 仓库</a></li>
<li><a href="https://yanbin.blog/insertion-sort-how-to/">插入排序算法解析</a></li>
<li><a href="https://yanbin.blog/setup-aws-kubernetes-eks-service/">搭建使用 AWS 的 Kubernetes EKS 服务</a></li>
<li><a href="https://yanbin.blog/jackson-json-path-support-before/">早先为 Jackson 写的 Json-Path 支持</a></li>
<li><a href="https://yanbin.blog/show-sbt-dependency-tree/">查看  sbt 项目的依赖关系树</a></li>
<li><a href="https://yanbin.blog/master-python-decorators/">熟悉和应用 Python 的装饰器</a></li>
<li><a href="https://yanbin.blog/understand-completablefuture-task-callback-threads/">理解 CompletableFuture 的任务与回调函数的线程</a></li>
<li><a href="https://yanbin.blog/understand-python-class-definition/">理解 Python 类的变量,方法与属性</a></li>
<li><a href="https://yanbin.blog/understand-spring-schedule-fixedrate-fixeddelay/">理解 Spring 定时任务的 fixedRate 和 fixedDelay  的区别</a></li>
<li><a href="https://yanbin.blog/pth-file-append-python-module-search-path/">用 .pth 文件附加 Python 模块搜索路径</a></li>
<li><a href="https://yanbin.blog/aws-secrets-manager-store-secrets/">用 AWS Secrets Manager 存储和管理密钥</a></li>
<li><a href="https://yanbin.blog/merge-in-memory-table-data-into-sql-server-table/">用 Java 把内存中的表格数据合并到 SQL Server 表中</a></li>
<li><a href="https://yanbin.blog/sqlserver-insert-multiple-rows-onetime/">用 PreparedStatement 向 SqlServer 中一次性插入多条记录</a></li>
<li><a href="https://yanbin.blog/example-understand-es6-export-import/">用一个例子理解 ES6 的 export/import 用法</a></li>
<li><a href="https://yanbin.blog/from-java-10-var-to-11-candicate-multiple-line-string/">相比于 Java 10 的 var, 更期待 Java 11 支持多行字符串</a></li>
<li><a href="https://yanbin.blog/real-advanced-sorting-algorithm-quick/">真正有些水准的排序算法 - 快速排序</a></li>
<li><a href="https://yanbin.blog/wait-all-completablefuture-done/">等待所有的  CompletableFuture 完成</a></li>
<li><a href="https://yanbin.blog/initial-apache-kafka-environment/">简单搭建 Apache Kafka 分布式消息系统</a></li>
<li><a href="https://yanbin.blog/customize-jackson-annotation-and-disable-specific-annotation/">自定义 Jackson 注解与禁用某一特定的注解</a></li>
<li><a href="https://yanbin.blog/custom-classload-dynamic-load-jdbc-driver/">自定义类加载器动态加载 JDBC 驱动</a></li>
<li><a href="https://yanbin.blog/fix-jvisualvm-stuck-at-computing-description-issue/">解决 jvisualvm 启动后长时间 Computing description… 的问题</a></li>
<li><a href="https://yanbin.blog/python-database-query-return-dictionary-result/">让 Python 的数据库查询返回字典记录</a></li>
<li><a href="https://yanbin.blog/scala-space-in-test-method-name-not-shows-u0020/">让 Scala 测试方法名中的空格不再显示为 $u0020</a></li>
<li><a href="https://yanbin.blog/how-spring-scan-beans-resources/">记录一下 Spring 如何扫描注解的 Bean 与资源</a></li>
<li><a href="https://yanbin.blog/frequently-used-linux-shell-script/">记录自己常用的一些 Linux Shell 脚本</a></li>
<li><a href="https://yanbin.blog/rxjava-get-started/">试手 RxJava 2.x 及对线程的初步理解</a></li>
<li><a href="https://yanbin.blog/how-to-upgrade-from-java-8-to-10/">该如何从 Java 8 升级到 Java 10</a></li>
<li><a href="https://yanbin.blog/why-http-get-cannot-sent-data-with-reuqest-body/">谁说 HTTP GET 就不能通过 Body 来发送数据呢？</a></li>
<li><a href="https://yanbin.blog/becomming-functional-1/">走进函数式编程 (Becomming Functional) (1)</a></li>
<li><a href="https://yanbin.blog/becomming-functional-2/">走进函数式编程 (Becomming Functional) (2)</a></li>
<li><a href="https://yanbin.blog/becomming-functional-3/">走进函数式编程 (Becomming Functional) (不可变性)</a></li>
<li><a href="https://yanbin.blog/becomming-functional-4/">走进函数式编程 (Becomming Functional) (递归)</a></li>
<li><a href="https://yanbin.blog/create-java-instance-bypass-constructor/">跳过构造函数创建 Java 对象(测试)</a></li>
<li><a href="https://yanbin.blog/convert-iterator-to-java-8-stream/">转换  Iterator 为 Java 8 的 Stream</a></li>
<li><a href="https://yanbin.blog/dynamic-creating-spring-bean-runtime/">运行时动态创建 Spring Bean</a></li>
<li><a href="https://yanbin.blog/understand-java-enum-with-bytecode/">通过反编译字节码来理解 Java 枚举</a></li>
<li><a href="https://yanbin.blog/config-vim-word-with-scala/">配置 Scala 的 vim 编辑环境</a></li>
<li><a href="https://yanbin.blog/configure-vim-dictionary/">配置 VIM 英语字典</a></li>
<li><a href="https://yanbin.blog/program-to-interface-and-agile/">针对接口编程及敏捷编程</a></li>
</ul>
]]></content>
  </entry>
  <entry>
    <title>程序员小灰-漫画系列</title>
    <url>/2020/10/13/%E7%A8%8B%E5%BA%8F%E5%91%98%E5%B0%8F%E7%81%B0-%E6%BC%AB%E7%94%BB%E7%B3%BB%E5%88%97/</url>
    <content><![CDATA[<p><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653213434&idx=1&sn=559b85202570e7b9fa24a1ebe8c9bd58&chksm=8c99a020bbee293605eeb3e957f0718b2fcf64d88186667fcb68eb57afcd0c4d8ab979bdfc97#rd">漫画：如何在数组中找到和为 “特定值” 的三个数？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212829&idx=1&sn=dffd397c0cc73a7ccfa358772bebb894&chksm=8c99a247bbee2b510bdee175e1ceb99542ffc516cd538156be466dfb22718bf16d4b8bccc48d#rd">漫画：如何在数组中找到和为 “特定值” 的两个数？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212818&idx=1&sn=d1c5fa18773101a21d4e96f575af0148&chksm=8c99a248bbee2b5e85a7871a6ab9ee0cccbc3d17cd3a1eed27234bc403e04ffe6e6442427393#rd">漫画：什么是 “灰犀牛事件” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212542&idx=2&sn=d6353926becb6c771dcb64574714a21d&chksm=8c99bda4bbee34b272f314c869e78d17c6e7c4e601f7397a712852a8effb9b9b13ab8a2b2880#rd">漫画：如何螺旋遍历二维数组？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212352&idx=1&sn=045f46d5d35ff1d9e88442d4e11dbe76&chksm=8c99bc1abbee350c4e371a6f84245029be0c19b716a0d5a59b7e787b23a062508efc15a259d9#rd">漫画：如何螺旋遍历二维数组？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212329&idx=1&sn=d2b1d78323a36b649287479c82c144a6&chksm=8c99bc73bbee356553492a2fb06af60de2a3efa212601e2dc9e29b8e5346d1e8792764fd7c4b#rd">漫画：什么是 “黑天鹅事件” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653212055&idx=1&sn=2308694d9aafa1f053d7f2e7d7d7fbf3&chksm=8c99bf4dbbee365bc05d4c746a044f46c31cd50a642ee96768061c4f308afdd9402934f2147b#rd">漫画：什么是 “抽象工厂模式” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653211827&idx=1&sn=e904685440a524a3482f7cda95b2f80a&chksm=8c99be69bbee377fc02ca54fa5d2beb695371437fdec625da786fe3a9752308a4246ecec68f3#rd">漫画：设计模式之 “工厂模式”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653211745&idx=2&sn=11c11797edac959236ebe04a4c4c3f4b&chksm=8c99bebbbbee37ad7865dbfab34b4485ad1d41743e8e6200bcc1b8ef4a8de3a322c07981f55f#rd">漫画：程序员公开 “怼老板” 的下场</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653211187&idx=1&sn=c062ab9598cf0af12acbf849478bb0d3&chksm=8c99b8e9bbee31ff9b1c86cfb32030b4cbabc0b98e9be850efe46fffb6eb6bac335f8b2b7b43#rd">漫画：什么是 “跳表” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653210733&idx=1&sn=5e67b9342ce33c5d276d2da5676f7b07&chksm=8c99bab7bbee33a143d26f6a92a55567468a87aad1a661ca447a0f4e995c4ccbdbf594d2b35a#rd">漫画：设计模式之 “外观模式”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653210732&idx=1&sn=82216882fbd79702ddd7e493694c43be&chksm=8c99bab6bbee33a0b83dba3cc52d59b15d2a5eb42ba967c4ee4c61e2b479ff91f38b902dbb14#rd">漫画：什么是 “小镇做题家” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653208991&idx=1&sn=7c5756612a62a3a4aad84a52aba40aa0&chksm=8c99b345bbee3a53dc802f16066756e23c4fe1b14fc922f79d3863e5553e5f09695567ea2765#rd">漫画：什么是 “设计模式” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653208160&idx=1&sn=a9568b5435b13718da1de3b5bc1e1554&chksm=8c99ccbabbee45ac7338e5a7a9d7758aa31d8261d2e4c323874fe90b6a1f3514fee7dd4d92cc#rd">漫画：什么是 “职场PUA” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653207999&idx=1&sn=38f3f0d5d0cd6228e476a04d32de8ab3&chksm=8c99cf65bbee4673ca6648eb91b6748298ce9a34779ddc3bb52022c61550c7438fe34eaf89bf#rd">漫画：设计模式中的 “观察者模式”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653206650&idx=1&sn=e43b386d5d7f48e090c89053469c1571&chksm=8c99caa0bbee43b618d1d0d43d24b414dc7da0149eacd435994faf47f48235de1816f2714a69#rd">《漫画算法》终于出电子书了！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653206434&idx=1&sn=eb28286359230baadb24f82f4bb5e54f&chksm=8c99c578bbee4c6eede652a81f7bf7dd57b1f6c3fe5f98bdfc971be423aaf2de7e5a18de87d0#rd">漫画：什么是 “牛奶咖啡” 问题？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653206226&idx=2&sn=9026eddb485cecc91171e75c118d1231&chksm=8c99c408bbee4d1e4755bfd22e8202e3b6458125d862c4d0cda4f6dcecf5eff5be5dedafe04b#rd">漫画：什么是AVL树？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653206171&idx=1&sn=440993087a32fad7e4d65d933d3c27dc&chksm=8c99c441bbee4d578c3e8d9ba9f60e1b42ca109d7388c98930256b4c2a2d6339da2c1f1ed64a#rd">漫画：什么是平衡二叉树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653205458&idx=1&sn=c5c653067746d8859fab6b8701a03288&chksm=8c99c108bbee481ed752588f110c036fecdd076f1a10ce5b7585edc7f29c9c9bbb696b6f9583#rd">漫画：赌王何鸿燊与神秘的“凯利公式”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653204996&idx=2&sn=ecf932d2db8cb6e4fcb841a2b6a5bfba&chksm=8c99c0debbee49c86dc8e82a2d195389a93e81d8e5ca8af7d4dd2eec5c7fe209038c91444964#rd">漫画：什么是红黑树？（整合版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653204604&idx=1&sn=2bca387179c4f2c54e34a394234ccd34&chksm=8c99c2a6bbee4bb07bb02427f5a4f935aed125828db507c656bb4066a70dba0cddb3ee0c82a2#rd">漫画：什么是红黑树？（下篇）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653204198&idx=1&sn=c8fd0281a182d763205dbb6fd19bba78&chksm=8c99dc3cbbee552a4ebb2941a624571bc573f071ea0ac9346ee32e29e28825bfd43b29320e7f#rd">漫画：什么是红黑树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202804&idx=1&sn=2e883fc147d3d33bba786d89608a1696&chksm=8c99dbaebbee52b85bee3c5c84c48ad85da5b220fb37b014a81bda4a9288e6901dacc3c2a071#rd">漫画：什么是 “眼镜蛇效应” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202633&idx=1&sn=9316701e56b5ac842ca146efdae7827e&chksm=8c99da13bbee53052de481ccabfc2a976f4a106f2ce5181ba01fb388adaf120246d9ff91c416#rd">漫画：“哈夫曼编码” 是什么鬼？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202622&idx=1&sn=a402683745cb169e16ff209dfc3d8d12&chksm=8c99da64bbee5372afdda2f771a509320d6849c72d87647d23bc4f739b13077513b1d8faa1c5#rd">漫画：什么是openEuler社区？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202612&idx=1&sn=6396bd77367d945928f294fe4497034a&chksm=8c99da6ebbee53788731cf6a0348b6252472c6457a1a49dc0c41697817e143ba736033c28426#rd">漫画：什么是流行病的 R0 和 R ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202401&idx=1&sn=319b8d8bf51d3e79d56d212a6b24b2c4&chksm=8c99d53bbbee5c2d24aac1edbbe35e80919ae716637a3897398d26ac9fd0ac0d35ab7ec111d7#rd">漫画：什么是 “哈夫曼树” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653202128&idx=1&sn=938d7538aac630000ae9e2e08b80a22a&chksm=8c99d40abbee5d1c51275e7a30a842e2fd04f8fdae768483dea75e6c42cf57e5598940cd667e#rd">漫画：什么是 “模因” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201909&idx=1&sn=1b83ef75642b5b0febb1444cf300cdee&chksm=8c99d72fbbee5e39b40e91729d77b4f3733116c041581c21fbf6c1ba67e7c07610000f6bfa7c#rd">漫画：什么是 “智猪博弈” ？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201731&idx=1&sn=89a943000fdc0530a0c3f930002ab3cd&chksm=8c99d799bbee5e8fd88b3293fd396ac53a103db2cca95b3b46453c1740140857c77f3f69e2eb#rd">漫画：什么是KMP算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201540&idx=1&sn=645a3f5f3fbf30be4f6d1c23eebdf0e7&chksm=8c99d65ebbee5f482dd68efecf7b2a23e98b238ba04c1d3a6aed6c12cab76d4650c3bef5ea00#rd">漫画：如何优化 “字符串匹配算法”？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201264&idx=1&sn=d9bba2a2420253af011f9489f0647b3e&chksm=8c99d1aabbee58bc95afc1d4f54f3fb988c3cebf5a02afdf09fc2a80bc051bd9daa078b5c1c9#rd">漫画：程序员的春节</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201256&idx=1&sn=bfdf40ef95a88249b6423d9f100d81c6&chksm=8c99d1b2bbee58a40de39ae8f4b84ea167373c23f9d1054513dfbe351c84e9392bfe8fd5da95#rd">漫画：“新型冠状病毒” 是什么鬼？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653201142&idx=1&sn=8cac1bbcfdb94474f0cc3855705cc253&chksm=8c99d02cbbee593ae0fb7fa1c8c610e7c1f57009e0c0ecbe19d07f60951912c915bce65c8619#rd">漫画：什么是字符串匹配算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200969&idx=2&sn=fba60605682aceb966fc5428639008ad&chksm=8c99d093bbee5985822d6fd5711cd344a1fb591a5943f55e46daa0798c81a6644dd1fc38e0ed#rd">漫画：面试官被他老婆痛骂了 。。。</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200930&idx=1&sn=902eae91e44621e7f9190ab8d2c58f0f&chksm=8c99d0f8bbee59eed3cb9081d450ad91c13b2183cc03b70c6c6c244167072e291359110cc3bb#rd">漫画：什么是 哥德巴赫猜想？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200809&idx=1&sn=44ed67f5382b0aea78867b41e92bf3e3&chksm=8c99d373bbee5a653932f01581a8cacbbeaf565b71b7df4698af43d5eabc75e3443d3c80e0ed#rd">漫画：“排序算法” 大总结</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200801&idx=1&sn=1cc828e5ac91011bd0ed2c6a021ffcb4&chksm=8c99d37bbbee5a6da7c6b2a63d2b6914de53d975ce073c91d10e4d47103ca8947d1e91733ee3#rd">漫画：程序员也爱跑马拉松吗？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200753&idx=2&sn=9563bc2fc756888b72de20a4ff8a5eba&chksm=8c99d3abbbee5abd6fe2a1e57394a989999315124d221703349018bcce582b7560a1aa80c3bd#rd">漫画：互联网公司会议观察</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200664&idx=1&sn=050a0cc1084a578bd4402349bad9c204&chksm=8c99d3c2bbee5ad40eaa28a266ec835288865475ba292d3798b2bb93fa7a8d257ec31a6ba8f2#rd">漫画：三种 “奇葩” 的排序算法</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200461&idx=2&sn=03fdac06b26b9a86495d3aa66db7ca48&chksm=8c99d297bbee5b8161e2d870a1da1407d5e6ee5c20f64868cf5efbae6a754f2ce37ac3a85ff6#rd">漫画：什么是区块链？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200459&idx=1&sn=87ab9db2f548eddc270e9b5d8f12ae94&chksm=8c99d291bbee5b8760dbefab472ee44d69783f989d08181ce308bcc487a8db83ab910cf6a4af#rd">小灰的《漫画算法》，入选了“当当20周年主荐品”！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200371&idx=1&sn=94c1882b9156bd96fa6da20c7995850e&chksm=8c99ed29bbee643f292c3d06995825a657d0c93cbabc4cc41a1a4f4073fdb663ecdc6d1d9685#rd">漫画：什么是基数排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200359&idx=1&sn=d6a988387ca8d0dd23f537302c8ee1bc&chksm=8c99ed3dbbee642bceeedd4d886a53340322978bbacd1c5edb88ab33a9d0c2edabc53db33436#rd">漫画：程序媛在北京</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200288&idx=1&sn=dbf1199e9633e19e903b6c938ce5bbc9&chksm=8c99ed7abbee646c667c6b04001f626b7b26783ccdb201707371b4bc539cf1fef55ba56b84d6#rd">漫画：去掉一个数，如何让剩余的数乘积最大？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200182&idx=1&sn=44aafe8c02ca6c6c82345504c1dc98c4&chksm=8c99edecbbee64fa3c8a3453c3dad4b231eeb8c5e0990ad7cd80f818af3e07a190271e64fad2#rd">漫画：什么是狭义相对论？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200172&idx=1&sn=78759c73fdd406fae877bae3adbf8508&chksm=8c99edf6bbee64e0e6552886d9826c92abacd0235b2ff491cad97cb93ebe961e359e72637f90#rd">漫画：用户的嘴，骗人的鬼！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200029&idx=1&sn=51ecebafb9ff77baf3de71bdc4f67b78&chksm=8c99ec47bbee6551b0377b97e26670c4895d0c934051e4aa927e62bf9b64996b6e1f7459edfe#rd">漫画：什么是归并排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653200019&idx=2&sn=ca791e5067b2b16aaf971c6b466dabf3&chksm=8c99ec49bbee655fedc7be14722601100684d22a58f7b10d32d94b53a0ad9cc73697c5524262#rd">漫画：要跳槽？这道缓存设计题你有必要看看！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199809&idx=1&sn=02879530343158201c94d42d4282bcd9&chksm=8c99ef1bbbee660d0a11a05cbb6fbda9ca60560a4d4fd1db8b31b9e460da96303b01ad30db06#rd">漫画：什么是摩尔斯电码？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199782&idx=1&sn=e744331452881311cf2f738076d98745&chksm=8c99ef7cbbee666a922bbda8ea8f4ee9f1b5f61269af3771a92f50ab868b0f6ecae61b9e2214#rd">漫画：上海程序员 图鉴</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199744&idx=1&sn=dceaa1a3b68277471985489fb9afebba&chksm=8c99ef5abbee664c015fd400f2b9a47bb322a1af899918206fcbe6e445f6ba4db390a33ec8a8#rd">漫画：什么是中台？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199674&idx=1&sn=9ab7bb7e465104c67a3d8590ebd0fe6c&chksm=8c99efe0bbee66f69c07e5f423d7751c9667fa82beb6dcaef4c0e96dac9545d2277c8179c765#rd">漫画：什么是希尔排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199528&idx=1&sn=87a25e5a35fcea443f324a89e4dbb8e1&chksm=8c99ee72bbee67643e3eaf6fb0fb35bd7175ee9e882510fcfea49c684bbd64d7b86207509480#rd">漫画：什么是旅行商问题？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199445&idx=1&sn=e97d1d4b81a1729c07c3c6a0d4dc04d5&chksm=8c99ee8fbbee6799d77c37dc659e52c7d09e5f6395714cc32e11744259526102567d8049146e#rd">漫画：什么是囚徒困境？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199430&idx=1&sn=be64291e48b421b5b4bc5618f646f304&chksm=8c99ee9cbbee678a1c4658b54d2462ccc8aa346b283d07daa4a003291e9d6e4d9af038ab6297#rd">《漫画算法》终于出电子书了！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199343&idx=1&sn=a5491fa908e45e6117423d9ba5062611&chksm=8c99e935bbee60232aacb7c2b74961a24e7b86d44bf98357c597ad277a8eb15639c1de7034d9#rd">漫画：什么是插入排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199326&idx=1&sn=bda864292af3dd91e6463a17633ca562&chksm=8c99e904bbee60120094a7eccdbc3adf6be8490129ecf2c5717ad27780d7f5d0201a1350e941#rd">漫画：职场画饼记</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199326&idx=1&sn=bda864292af3dd91e6463a17633ca562&chksm=8c99e904bbee60120094a7eccdbc3adf6be8490129ecf2c5717ad27780d7f5d0201a1350e941#rd">漫画：职场画饼记</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199243&idx=2&sn=bdcc35aa59ba0b617f794596a67c9669&chksm=8c99e951bbee60477212983eaf4f8c12075796c1961cd838f8ef9a1a77551921efe5da629e86#rd">漫画：如何找到两个数组的中位数？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199183&idx=1&sn=6982272dec695edacdc9066a9ab0963f&chksm=8c99e995bbee6083354a405715636848cc5760095ed3a3afe916504a9676b3ee1a75d59a85f2#rd">漫画：如何找到两个数组的中位数？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653199065&idx=1&sn=f376c924306bde13729ff211c87a3db3&chksm=8c99e803bbee6115194dc4aa1551b9b348a1747ca7cfc78e0015667e9cc7945075b4bd9dea75#rd">漫画：有趣的“帽子问题”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198991&idx=1&sn=7f98d59898a911e1425baa6cc180c598&chksm=8c99e855bbee61439086680ceefef33c56038c5d552ae64c1d6135abe467b617aa62f4934f36#rd">漫画：什么是选择排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198768&idx=1&sn=7ee80d95715e9267d0b562027dd4bce6&chksm=8c99eb6abbee627cacc6454cc8400710188f949437778e67ed077a707025e934ce0d926aa147#rd">漫画：什么是最小生成树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198752&idx=1&sn=7cb4bc058803626e7672cb6e1769d4e6&chksm=8c99eb7abbee626c65ea198d02246510fc9d280f680eaa2e9af6511564baa97eebbcc948ce81#rd">漫画：为什么程序员没有女友？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198575&idx=1&sn=f8aa0d53e6c32ad19c185193a336d73c&chksm=8c99ea35bbee6323deae44e148e6142731df12d1cc9e25463e2eb8bf0f05a6720c258aba7efa#rd">漫画：反直觉的 “三门问题”</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198327&idx=1&sn=74187f72a03db8fcad3c234d61c7bad7&chksm=8c99e52dbbee6c3b1e35ea8b2a8d57fa9fa72c098fa91e9f76a3228596922ef062fbf6f3e103#rd">漫画：“旋转数组”中的二分查找</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198263&idx=2&sn=c0712fb8248a1f647a41034a3a0751aa&chksm=8c99e56dbbee6c7bfcfe2d78a836c55408106fee6a13bb25912366224cf7a08c3ccefe908832#rd">漫画：什么是二分查找？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198234&idx=1&sn=01a33435812d646e670f6a905a9a4773&chksm=8c99e540bbee6c569b4d7f763b5e33265994df3f3711bac281d34ead5ca23497b85a49659b06#rd">漫画：什么是二分查找？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198149&idx=1&sn=8b0db8092bc37a7420e9bf919eb8bd16&chksm=8c99e59fbbee6c892b446c32f1208780ce7dae490cb9e800fff27ba09f5f5837bf1ceaf1c3cb#rd">漫画：面试官考我图形推理题，我该怎么办？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198060&idx=1&sn=099ba07ad780e0f56c1d065a1784be6f&chksm=8c99e436bbee6d20876131d14f921be397a5bf7d972076d18b28824c435d625dbf2f5c77c0fb#rd">漫画：有趣的 “切蛋糕“ 问题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653198028&idx=1&sn=520f16776cc542e16456cc52c0ab4228&chksm=8c99e416bbee6d0071c966f50d763190150c2ed507cb5de694eabec568db1c83667bce3acfa4#rd">小灰的《漫画算法》全面上架！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197861&idx=1&sn=ed3140e711821206b5b50cd418614660&chksm=8c99e4ffbbee6de92ae00262ce1230bce3de384d3cadcf99c3f51aca4ca0c5f7f5a9f2e857df#rd">漫画：图的 “多源” 最短路径</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197794&idx=1&sn=8286ba52dd8e909197324148ffe6b7d7&chksm=8c99e738bbee6e2e16332dea4c5daef34dc2db6166149244c5406b1042c46d166e83e2e6f2df#rd">漫画：Dijkstra 算法的优化</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197737&idx=1&sn=edd330e6b388c9232455fb26462aa0fa&chksm=8c99e773bbee6e656048512e6cfb58b80bc3169ad29fdc82515861ded15226683b42d8cadbea#rd">漫画：996的本质是什么？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197708&idx=1&sn=475ef5174d678d8a91d6120f0795a8e4&chksm=8c99e756bbee6e406f73f6ed8c6008d10f9e9d190d7fee103ac3fa6417dcfebd6ef2773e0085#rd">漫画：程序员和产品经理的相爱相杀</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197626&idx=1&sn=fca7472af006a7f8890ee84ad7cf1116&chksm=8c99e7e0bbee6ef6faa1a34160a5e135503425e37552e90dfca2fbc10f223dbf3b875e84e418#rd">漫画：图的 “最短路径” 问题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197523&idx=1&sn=4edecca7392534177eef521511ff740b&chksm=8c99e609bbee6f1fdb736f1bc45da5f6b6765ce190db68eac5a65ca22cc2694dc151f8db828f#rd">漫画：深度优先遍历 和 广度优先遍历</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197523&idx=2&sn=893c01a31446d3c479c312836ae83819&chksm=8c99e609bbee6f1fb0df2fb60edb8fba5166b49ef200ab8fb3af4ff144b3f96b283a34ff776c#rd">漫画：什么是 “图”？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197415&idx=1&sn=8edaa19a40109a0455b248e67c962175&chksm=8c99e6bdbbee6fab6a716ce6dad319ae63b4c5e829161f02e529f57c18667a53987799aad90b#rd">漫画：什么是 “图”？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197294&idx=1&sn=b16611f880c115f47f8e895e0fce900e&chksm=8c99e134bbee6822eaa0898a0f27ed7ef151a7370a2f930f674dd64a868dace4c6ebe3fa96c5#rd">漫画：女生适合做程序员吗？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197101&idx=1&sn=d1fe482561d3d079363032ec182c5b3b&chksm=8c99e1f7bbee68e10f8470453637a7d434751a9414ceeffbbb9601f5ae2ba64e26fa6a88a99b#rd">漫画：什么是 HTTPS 协议？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197066&idx=1&sn=28082a6985de3a46d3294863b90bd92b&chksm=8c99e1d0bbee68c651db8d87c573a332de443261fdfd6d8ce3a88e1140525ef7601d72eb12bf#rd">漫画：如何将一个链表“逆序”？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197024&idx=1&sn=137d73b5b22633250a631c5efd521432&chksm=8c99e03abbee692cf805a3a5188c1f431a195f1d3f392bfe857e03ab0cac85e599ca2ad45fa7#rd">漫画：为什么新疆永远不包邮？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197020&idx=1&sn=c55c511a6ac62a4a57876f21f4676468&chksm=8c99e006bbee6910155e78d70954274e016589e44dc3171bba8f12b08d0c49b36daa21e699e0#rd">漫画：程序员的春节</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196805&idx=1&sn=c6c5b23f382e8aa323d10c12053bc72c&chksm=8c99e0dfbbee69c90e4cdb1e26babc371329dc7b0dd8a742966c09f41d1d9954b95610b015d9#rd">漫画：什么是加密算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653197020&idx=1&sn=c55c511a6ac62a4a57876f21f4676468&chksm=8c99e006bbee6910155e78d70954274e016589e44dc3171bba8f12b08d0c49b36daa21e699e0#rd">漫画：程序员的春节</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196805&idx=1&sn=c6c5b23f382e8aa323d10c12053bc72c&chksm=8c99e0dfbbee69c90e4cdb1e26babc371329dc7b0dd8a742966c09f41d1d9954b95610b015d9#rd">漫画：什么是加密算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196761&idx=1&sn=05360f6968fd860740efb93de5b35dd2&chksm=8c99e303bbee6a154b36b14fd9aa5b76eba71df53755a48cef456fd43ebed6e4151c3c0dc04b#rd">漫画：有趣的海盗问题 （完整版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196737&idx=1&sn=7cad8cbc78f5c12b14e57a775086d1d5&chksm=8c99e31bbbee6a0d1aa228ae3d7f5b27b5612743f2ac04b71645ac43388767a0bc5e7c6e1603#rd">漫画：有趣的【海盗】问题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196710&idx=1&sn=9059d38ae74c8c24e4940b0de4389d4e&chksm=8c99e37cbbee6a6a7827c4713d02c7a044a0e890ef6da9582785866951d7fe34b4f52c76a722#rd">漫画：程序员之间的真爱，好暖啊！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196576&idx=2&sn=482f6678841c0ff40e3847a7d31714cd&chksm=8c99e3fabbee6aec84dd5ceb3f37c4754c68d7605db37bf86e9bf96c97b90647a83750bf72af#rd">漫画：寻找无序数组的第k大元素（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196529&idx=1&sn=1c1094e5536a8c451b058fa300bd6a6f&chksm=8c99e22bbbee6b3d733010ca27c5939d2501998ba5041322f393a43e06f2ea931f84737e0621#rd">漫画：寻找无序数组的第k大元素</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196509&idx=1&sn=bf926d98fc6cd59a0aaba7acf40a6781&chksm=8c99e207bbee6b11d1c2ba0a27c5c7eea5eba0fca9c51db2945f579d1181c332f7420d0d0390#rd">漫画：成功的年终汇报，你需要注意些什么？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196506&idx=2&sn=2a032d5a85bbe5efcc704aaa927598b5&chksm=8c99e200bbee6b16f76d60e7014a1bbf9f76150e0cc149f753b81e76c58209a72d9b10faf2c1#rd">漫画：如何实现大整数相乘？（整合版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196425&idx=1&sn=dc19bff2b856da4f6973fdf88efd65bf&chksm=8c99e253bbee6b45bab57c90b4edd54c2f43f6d075bc75f4094e6826208502597b8c60644b82#rd">漫画：如何实现大整数相乘？（下）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196417&idx=2&sn=9888466c41103f66acad5327f8a5f3c5&chksm=8c99e25bbbee6b4d9760754d23282f93fc4beb1a7a4fb70ef573a5bcb4b9889d0397d841df75#rd">漫画：如何实现大整数相乘？（上） 修订版</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196357&idx=1&sn=c7cf00bcc668f586a6fab73227c80d37&chksm=8c99e29fbbee6b896672af7c5985a9de7fca97bcab2c070e081e3993caefeb5a80b4693004c1#rd">漫画：如何实现大整数相乘？（上）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196287&idx=1&sn=c9c1a9db5fa652239fac4f77b907e840&chksm=8c99fd25bbee7433d40c8c598db4e0870757a6231fe08c36e3e90141e173631e5dda3a445e33#rd">漫画：为什么程序员收入高，却这么低调？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196234&idx=1&sn=abb975806c1749a7416586de830d31e4&chksm=8c99fd10bbee740618c638890bbbee79f1dadda67715b14409a574af7eda149610ff792937e4#rd">漫画：一道数学题引发的血案</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196069&idx=1&sn=55f0eec8664e82151ed2a6cb371179f8&chksm=8c99fdffbbee74e9d3884026da3756b79db20302b49a69c8c033173d50ee2afded6258f55a4e#rd">漫画：如何实现大整数相加？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196047&idx=1&sn=18b922992407aac4472ba1c72ae77f50&chksm=8c99fdd5bbee74c378f63245f6760d33363913a18f74a587f94ebbeaf4bde378ef2f28e2de7e#rd">漫画：如何实现大整数相加？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653196006&idx=1&sn=50340823d4c2125bc2c361fe45defc3f&chksm=8c99fc3cbbee752a2d42f26817362b02c81d0a422279063309ed3919f55931cba51ad1ae2ba4#rd">漫画：删去k个数字后的最小值</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195947&idx=1&sn=2954871ed1195dd3ebab0c9691e674b4&chksm=8c99fc71bbee7567c29169a86b4a2133bf87492ce5d2b7c9fdaf7740d2fc01084670b75e976a#rd">漫画：什么是LRU算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195750&idx=1&sn=231558735ddf64a9c10ad721ad537ea2&chksm=8c99ff3cbbee762a37e74e42c585688bf6fbfe70422d723b29219d1d9bbdf524217c97e2228b#rd">漫画：如何用栈实现队列？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195582&idx=1&sn=1e7ece4e48c20fb994e2cefdcbdce4c5&chksm=8c99ffe4bbee76f23d16ac1e0c7feeb16654ebb75e40d92c911bffa113059f52ce4508281a55#rd">漫画：什么是桶排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195533&idx=1&sn=02918dc51b07837ce1119f00d7900dbc&chksm=8c99ffd7bbee76c1d2e2e9b198259795285ec2c305d3613a5e39622195fd1c32bb6dbe52fa08#rd">漫画：什么是计数排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195346&idx=1&sn=c6e989230fcb40fede879b354b85c2b5&chksm=8c99fe88bbee779ec91b5960aff40e88eabf153d8803c1de9a4d57f4198a3d9e91cf4e9fe1c2#rd">漫画：做区块链能赚大钱吗？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195301&idx=1&sn=9d380bbf3c507ab684ff51596673268f&chksm=8c99feffbbee77e97fe047bdfd4afa8084f09d28df8516a6436207c13fed2c8c5366a8c5677e#rd">漫画：什么是优先队列？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195272&idx=1&sn=fc42644e9076ebe32e1f7ebd5025fa86&chksm=8c99fed2bbee77c46e394703679ce6a91981dc6e801118a9446e7bca8a8ca498e924d6673bbf#rd">漫画：程序员学算法有什么用？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195208&idx=1&sn=e3d6559402148458f0a4993b47d8bc6f&chksm=8c99f912bbee7004625a0b204acc8484acbdf4f1b18953e7ff5acbea958ec002d8c8ea072792#rd">漫画：什么是堆排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195207&idx=2&sn=12689c6c1a92e7ec3cce4d423019ec2a&chksm=8c99f91dbbee700b8e760d06b27582037ab0713295dacf2b5a7a7f954c0032fe860aa0bf8b74#rd">漫画：什么是二叉堆？（修正版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195169&idx=1&sn=dd83d7ef50f4171d78a4d58f447bc520&chksm=8c99f97bbbee706dab2e7a8caeb01450381d699a98166b6159c625566d8dc07eb8783b66a98b#rd">漫画：什么是二叉堆？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195121&idx=1&sn=bf456092c1f1a5e728c8d0a571483dcd&chksm=8c99f9abbbee70bd427e1083f8a4064affd3138490e23666756a8e56061054040d6ebfb4bcce#rd">漫画：什么是时间复杂度？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653195042&idx=1&sn=2b0915cd2298be9f2163cc90a3d464da&chksm=8c99f9f8bbee70eef627d0f5e5b80a604221abb3a1b5617b397fa178582dcb063c9fb6f904b3#rd">漫画：什么是快速排序？（完整版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194978&idx=1&sn=2cfe75fd77d547579eeda344b28e3876&chksm=8c99f838bbee712e34da088241df5d97e75f5a504ae5009486b4272b3d8cfca8ee91d0ca5578#rd">漫画：什么是快速排序？（上）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194919&idx=2&sn=f473bc9e0da124a303312a11902e2f52&chksm=8c99f87dbbee716b531df3fcf5882998f28794aad5609f225883d6c2dc71ba51b8a5126b32be#rd">漫画：什么是鸡尾酒排序？（修订版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194915&idx=1&sn=398071ef86653dd606404da5b03f90d7&chksm=8c99f879bbee716f3075810370b76c02cda595b04137b79aa3a27048e99ec654175f084bf6bf#rd">漫画：什么是鸡尾酒排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194842&idx=1&sn=11e2744b01ebb16a59d64d9b0293368d&chksm=8c99f880bbee71968e8f8bb53ab6baeb871ce5b3401a2eb45d900db8e4cde16c0133fad4335b#rd">漫画：出色的程序员具有哪些特质？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194666&idx=1&sn=69ce32870c0b981c40b1e124fbb6bba8&chksm=8c99fb70bbee72668cad223892ad362525d215e7f936458f99dd289eb82981099359310e9e54#rd">漫画：什么是冒泡排序？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194433&idx=1&sn=6039143d3046ec972c141d05f89f7b30&chksm=8c99fa1bbbee730d771ddb0077666a5dad58bdc646252cf54bffd882fad2278027aaf9e428a4#rd">漫画：动态规划解决扔鸡蛋问题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194375&idx=1&sn=26cfa25b698eb2f6a04dceb151cbc8df&chksm=8c99fa5dbbee734b434187ac7964103e9e098b2d1c47f27f883934b155e89be2c5dee085db82#rd">漫画：有趣的扔鸡蛋问题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194261&idx=1&sn=f4ddb102670714dce80cc6d99f14c530&chksm=8c99facfbbee73d918555eb168dd69d3cf4350a4972923511c346c10e8442a38944c789079a3#rd">漫画：什么是协程？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194247&idx=2&sn=65686af0f1eff967e1bc08ea9e3d69d5&chksm=8c99faddbbee73cb3c6b36fe10526f6c425a9d193a925280736834b67707cc6cc7ab0c408425#rd">漫画：足球和世界杯的历史</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194140&idx=1&sn=07b65a50798c26ecdc0fc555128ab937&chksm=8c99f546bbee7c50b1642dc971cb1f5e244dce661546e141734797c8c23c6c3ad779dfb57d3b#rd">漫画：如何用Zookeeper实现分布式锁？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194084&idx=1&sn=9d342ee2602a89f311ec09c9bd714a96&chksm=8c99f5bebbee7ca8e5831a4e3439b3b70d8852e8f6a0b95b8cd3f219d4f41771ec5168466451#rd">漫画历史：人类的诞生</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653194065&idx=1&sn=1baa162e40d48ce9b44ea5c4b2c71ad7&chksm=8c99f58bbbee7c9d5b5725da5ee38fe0f89d7a816f3414806785aea0fe5ae766769600d3e982#rd">漫画：什么是分布式锁？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193986&idx=2&sn=6bb3f7c95ffd64621e1ebaeb6c3b2c35&chksm=8c99f5d8bbee7cce899e87117881b600bf3e8a20afa690aa82582871b074f147e0a6dff69ca3#rd">漫画历史：地球的新生</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193977&idx=1&sn=12319f8cb81f55a40ac461bd0ad9d74e&chksm=8c99f423bbee7d35056ce7ec1b321f33aad15c309de6eba0086cb31a48b975ccb1d695d5a251#rd">漫画：什么是ZooKeeper？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193924&idx=2&sn=c9fe3f0d9cfa57862e31e840c0db1c65&chksm=8c99f41ebbee7d0841b20e09a83fa52097d9c3a3eea10cca5c8e6baadd8b1a0bc8a3c0a22d64#rd">漫画历史：恐龙时代</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193892&idx=2&sn=20ef9c3b363d76d8bc948c73513b92eb&chksm=8c99f47ebbee7d689fd30f0bad60550155428d38b4e42cb0498e0e9b750675801d12ed16a997#rd">漫画：远古的地球</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193883&idx=1&sn=ede11c737f16795c40a2bb42095b11b4&chksm=8c99f441bbee7d57cfd13d863ff66259c852a5ef7e8307732daea705e64b91b6becff811cb34#rd">漫画：什么是宇宙大爆炸？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193855&idx=1&sn=d73c377f791ee7bda6f37ad04856952b&chksm=8c99f4a5bbee7db35c2af3ace7d5be802d0e9ecaeb53b24a54ef9639e25ab1e09d20e6ca4c3d#rd">漫画：什么是拜占庭将军问题？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193794&idx=1&sn=5f14f6ba26cb0f322c247bb392059bce&chksm=8c99f498bbee7d8e494deb1c50a1a7d5eae290e95d2a851de5a2c6ef94bd23d82d522ac391cb#rd">漫画：什么是SnowFlake算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193719&idx=1&sn=64f184d36af9ef6393998fe5ea79329c&chksm=8c99f72dbbee7e3b3f00e067613c15144ce3624782161bd668ac57943d6aa198f1cebed8a050#rd">漫画：如何实现抢红包算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193612&idx=1&sn=95d5bf75272aaeeb9a90bea6baa24de4&chksm=8c99f756bbee7e401db790f060cbdab4e850380f5cbd727e1dab28cb1b2bf38cecc0cc4bbfb6#rd">漫画：什么是字典序算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193554&idx=1&sn=362e5b5cdb028d6781e813887bf0e5ff&chksm=8c99f788bbee7e9ef74ba9d24b647fa1ce0f64a273735d4cf831531b40cbdd72a61af546603e#rd">漫画：什么是蓝绿部署？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193524&idx=1&sn=d9b423dd0e607899f23690283e97e3b2&chksm=8c99f7eebbee7ef89f385e0927a9de1097e926b9cafaf545a4da24446b8a08500435c49babe9#rd">漫画：如何搞定难相处的队友？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193461&idx=1&sn=d69ccec780ae6d3b0c722cf09fa154d1&chksm=8c99f62fbbee7f39cd221bd0ecc9105a5c16e353d82d2407e7f295da9f9172cfd4889d3f12c8#rd">漫画：什么是分布式事务？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193420&idx=1&sn=95c8591fb9b82505a3e5b1d650e9a1ef&chksm=8c99f616bbee7f00ad0a03b5c1d7eaeccc22de1abce3d4807ae0829ddf534a3d009cc86d4816#rd">漫画：程序员的最强大脑</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193376&idx=1&sn=8ae0f270fe66f5011b1dc8f1ecebd135&chksm=8c99f67abbee7f6c77c70734d8d4b90675711c4021a9ed4a7132f3b14c9f56adca68cbf06569#rd">漫画：“架构师”小赵的故事</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193370&idx=1&sn=60cc1478d7f44392a8d48b89132b6d1e&chksm=8c99f640bbee7f560f6e7ce685923676bb22774feab8acf522b81b2e668bf63bdcbf031b3983#rd">漫画：什么是服务熔断？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193309&idx=1&sn=dd68a60873bb360e02afde21acde7d3f&chksm=8c99f687bbee7f91049c253dd3193c9a60d6d98cd315b0140a8635b2d34933b54a19127921a9#rd">漫画：什么是八皇后问题？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193247&idx=1&sn=ea55b9b3fe20c1c54ece3ce575db565d&chksm=8c99f6c5bbee7fd30153d436aaa46571891840489076855b5c520886f93c41bd7fa57af21517#rd">漫画：第一次去女友家过年的程序员</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193247&idx=1&sn=ea55b9b3fe20c1c54ece3ce575db565d&chksm=8c99f6c5bbee7fd30153d436aaa46571891840489076855b5c520886f93c41bd7fa57af21517#rd">漫画：第一次去女友家过年的程序员</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193112&idx=1&sn=b645024ab20be4381cbc3f1a4ac4fbb5&chksm=8c99f142bbee7854fd4793c2c6753c4a945c160fa0e8eafebc82de04e5d0d95b62d554f57630#rd">漫画：什么是MapReduce？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193085&idx=1&sn=120ce3463353d1f46ad3069490fe88e7&chksm=8c99f1a7bbee78b16642dcc2d7696f34c9b450892828bef8bcaedc5c6e62b68721ff6cafc4aa#rd">漫画：什么是数据仓库？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653193005&idx=1&sn=2b1839966cacbebaa972d49c8e76e3d5&chksm=8c99f1f7bbee78e1b5b3b5b08fdbc0a5ab277a5736d14a819496faa987e28c8930c516f0af6e#rd">漫画：什么是区块链？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192913&idx=1&sn=e35d0de6998a9622cce3cd5e3249c173&chksm=8c99f00bbbee791d31cd114d34fed0f03e260ca35e0a84a0a095cefea7d452b50d8ed0db9b21#rd">漫画：女生适合做程序员吗？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192821&idx=1&sn=935dd9c4a8fd691a856633653d84093f&chksm=8c99f0afbbee79b9f3641d17c2c26021a3e7ebe4380dca70d0029fbfeaee379288d49af0ba1e#rd">漫画：什么是微服务？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192741&idx=1&sn=ba996d739faf455496e308519e92cf95&chksm=8c99f0ffbbee79e9585b64a9881b7bdbc188d84b4dc18c528bff4120b045333926c3af05e7be#rd">漫画：如何学习人工智能？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192736&idx=1&sn=24d4054b062e28db9e54c735aafe2407&chksm=8c99f0fabbee79ecfd9198aa89bc78084e9b7db056078982975d8910c12b5d3dd1d16c2509c3#rd">漫画：什么是CAS机制？（进阶篇）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192714&idx=2&sn=b756f640c013e0fba9caa21f5c84d1fa&chksm=8c99f0d0bbee79c67f4f77795eb2684dd710049114571d9ad4f87eecee495a1555be278d01fa#rd">漫画：面试过程的神回复</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192625&idx=1&sn=cbabbd806e4874e8793332724ca9d454&chksm=8c99f36bbbee7a7d169581dedbe09658d0b0edb62d2cbc9ba4c40f706cb678c7d8c768afb666#rd">漫画：什么是 CAS 机制？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192606&idx=2&sn=24832fd76c77363d53444720b94f766f&chksm=8c99f344bbee7a52304dc7be5784ed50d95f8f4f65ba5703cf712c7fe7a347acccb10066e0f0#rd">漫画：程序员调Bug的真实写照</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192508&idx=1&sn=1f1bf7dc9f9ce42e89794cf48971e38d&chksm=8c99f3e6bbee7af00b9e2ead4997c8be8233537d0a6dc757d44dcd67587154d85a31df2039e8#rd">漫画：什么是架构师？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192507&idx=2&sn=0b44e6b55cf7b5ac8fda35981111a71f&chksm=8c99f3e1bbee7af718075fb547ffb6bd45b1e77b4222fa8895034f1740e85c70f1fdc105b9a1#rd">漫画解读软件开发模式</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192450&idx=1&sn=bdd4fd682b80c2164d62ae439da3d06a&chksm=8c99f3d8bbee7aced9159b390d2cc3badb2d0b04e143c5d62d11db2ceee2b16e8ac83a730f59#rd">漫画：什么是佛系程序员？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192450&idx=2&sn=ad95717051c0c4af83923b736a5bc637&chksm=8c99f3d8bbee7aceb123e4f6aa9a220630b5aa17743ba812d82308bfb6a8ed8303bdd181f144#rd">漫画：什么是volatile关键字？（整合版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192420&idx=1&sn=2b2f223976546b7387058b0c9f9d1c10&chksm=8c99f23ebbee7b2896e518aab5060c01d2b750ce7b3e46a8c1e8a1a410c554b43387afccaf06#rd">漫画：volatile对指令重排的影响</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192344&idx=1&sn=f67033d0ea5eae0f947dcda06c5030f2&chksm=8c99f242bbee7b54951c09b8c0d6ee5833d3982dde6a8f4f970ff578f45077102b03c4e17ab0#rd">漫画：什么是 volatile 关键字？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192251&idx=2&sn=4acce2985ab4fcc908235891c9213628&chksm=8c99f2e1bbee7bf7f64132bb58d3023f79b3c11fe2043dcd29fe07f4ddb5b3c7d375252d8555#rd">漫画：什么是单例模式？（整合版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192239&idx=1&sn=6090f386d094b5ac034fae17e0418a54&chksm=8c99f2f5bbee7be3471d07040d60b514024599e2d1fb0511307439558c63a862f49f204bbb53#rd">漫画：如何写出更优雅的单例模式？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192169&idx=1&sn=9c7c8c269b44443b5c4c6136529367c4&chksm=8c990d33bbee8425731a0ae76bd656a78e4fc9dddbe6c62ee77fc5686b35d001f9ced0980a3a#rd">漫画：什么是单例设计模式？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192083&idx=1&sn=5c4becd5724dd72ad489b9ed466329f5&chksm=8c990d49bbee845f69345e4121888ec967df27988bc66afd984a25331d2f6464a61dc0335a54#rd">漫画：什么是ConcurrentHashMap？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653192000&idx=1&sn=118cee6d1c67e7b8e4f762af3e61643e&chksm=8c990d9abbee848c739aeaf25893ae4382eca90642f65fc9b8eb76d58d6e7adebe65da03f80d#rd">漫画：高并发下的HashMap</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191907&idx=1&sn=876860c5a9a6710ead5dd8de37403ffc&chksm=8c990c39bbee852f71c9dfc587fd70d10b0eab1cca17123c0a68bf1e16d46d71717712b91509#rd">漫画：什么是HashMap？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191832&idx=1&sn=12017161025495c6914b5ab9397baa59&chksm=8c990c42bbee8554ba02eb83d839123bd3bead6ffc736111456ea77367a3df75750cf88016e0#rd">漫画：什么是红黑树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191745&idx=1&sn=6049ac1dd09c2096eba96f17c0a69a9a&chksm=8c990c9bbbee858d651aa7201c12e38a6642017674e3a757e5db34f5628cd1126ef79ce1da8d#rd">漫画：为什么月薪5W的程序员活得像月薪5K？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191712&idx=1&sn=a204990871d4df56ee4c35601c4c9cc7&chksm=8c990cfabbee85ec3af024e5b7f5524fa1a3caea2fb21d0f27c7976216e986cf6752ece0e1e6#rd">漫画：AES算法的底层原理</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191686&idx=1&sn=bdfad27d53831d56a0072705b13c65ef&chksm=8c990cdcbbee85ca1eb9e3b89aba28ba4c01f2c729b35524f475cb2cdcf4fc09a2b6dc1df2c6#rd">漫画：什么是AES算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191642&idx=1&sn=47c6340a6664af2f62e6c580528ea6f6&chksm=8c990f00bbee861698daa51b0622e581b3279c0759a16330fe538de745cb6abed8288b0bd778#rd">漫画：什么是SHA系列算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191686&idx=1&sn=bdfad27d53831d56a0072705b13c65ef&chksm=8c990cdcbbee85ca1eb9e3b89aba28ba4c01f2c729b35524f475cb2cdcf4fc09a2b6dc1df2c6#rd">漫画：什么是AES算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191642&idx=1&sn=47c6340a6664af2f62e6c580528ea6f6&chksm=8c990f00bbee861698daa51b0622e581b3279c0759a16330fe538de745cb6abed8288b0bd778#rd">漫画：什么是SHA系列算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191598&idx=1&sn=13ef6b99b8a9a25f18b839df13cd6e31&chksm=8c990f74bbee866249af65e56a73f74b90a85b8497b9eea097f813a0b398a44fe0b8320967cd#rd">漫画：如何破解MD5算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191503&idx=1&sn=b18bd0458bf884bcb5d01f1cf2ca8301&chksm=8c990f95bbee8683fcfa9e972fd887cb1e50328ab4d8bd1f6a68ea90de6c67f46e50847e36fb#rd">漫画：什么是MD5算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191459&idx=1&sn=6e7d82dabe9c4a26b55f86f502edac03&chksm=8c990ff9bbee86ef7d6eee8a92430ff529b57e2f8720d439b7a4fb83b9ba75cd91395509a239#rd">漫画：什么是Base64算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191395&idx=1&sn=6ff28e39a63a0cc05eba629b25efc78e&chksm=8c990e39bbee872f16c2fa3be0fb3a643f58034c1f2159320946351034c2c6e65285eec8c8af#rd">漫画：当程序员遇上智力题（第四季）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191316&idx=1&sn=6b407704c99bda58440e97a2d6dd6ee9&chksm=8c990e4ebbee8758bf207b7fed8267bc1bda957f5864c00b467e2de6f0ae93563740b5527f25#rd">漫画：什么是布隆算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191272&idx=1&sn=9bbcd172b611b455ebfc4b7fb9a6a55e&chksm=8c990eb2bbee87a486c55572a36c577a48df395e13e74314846d221cbcfd364d44c280250234#rd">漫画：Bitmap算法 整合版</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191246&idx=1&sn=5ea39cfb0f6a4b0cf4b017aeb1569fe7&chksm=8c990e94bbee878291b203b0014082cb34f034db6af2d4a87ef0e1ea41244d6609b080d902ce#rd">漫画：Bitmap算法 进阶篇</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191163&idx=1&sn=ed3763b2629432065aa7e5c213d84619&chksm=8c990921bbee80379271dba2e8716b6f7cf60dc3eff13ca09537015616e94629aee9c6a38bed#rd">漫画：什么是Bitmap算法？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191083&idx=1&sn=c68c8bb7e18c4d46b85666be10e9ef50&chksm=8c990971bbee80675b6cd0ac3c2c17546cd434c3636616e559ca5cf10d1815c3aed24bfd3c83#rd">漫画：什么是一致性哈希？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653191027&idx=1&sn=4ba22e3ec8bd149f69fc0aba72e4347e&chksm=8c9909a9bbee80bfa1d8497ff0525df130414c1731b5aa5287bf16ea1cf86c8d8e6f20782184#rd">漫画：什么是B+树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190965&idx=1&sn=53f78fa037386f85531832cd5322d2a0&chksm=8c9909efbbee80f90512f0c36356c31cc74c388c46388dc2317d43c8f8597298f233ca9c29e9#rd">漫画：什么是B-树？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190879&idx=1&sn=1916d0f6e72f34408261d70d13eecf5b&chksm=8c990805bbee81137dd6cadbe7b69cf84020233385cc5d7cee778d10977b6f9b28ea235b93e0#rd">漫画：什么是跳跃表？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190796&idx=1&sn=2bf42e5783f3efd03bfb0ecd3cbbc380&chksm=8c990856bbee8140055c3429f59c8f46dc05be20b859f00fe8168efe1e6a954fdc5cfc7246b0#rd">漫画：什么是动态规划？（整合版）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190613&idx=1&sn=8a40f425bb71558144fec095e8fa4880&chksm=8c990b0fbbee8219556c17468f64e9ea1bd7ef7f77a07af41d2c1c0eac1031d56c254facb979#rd">漫画：什么是动态规划？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190473&idx=1&sn=0de112757e14158472e4b9d04ad58b09&chksm=8c990b93bbee828558e532ea1a9c174f565e48c299cd2e1143cae85cf96ca6b2e61317e78fba#rd">漫画：什么是中间人攻击</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190447&idx=1&sn=1ebd91118f3fc168c5b9f5384aebad50&chksm=8c990bf5bbee82e314592ef4f7e2318b861dcca9c770597d4d4d177d4509d687123d82c45a7d#rd">漫画：编程其实是文科</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190417&idx=1&sn=e802cbea6db74e0b932ef61bf1da0ff8&chksm=8c990bcbbbee82dd3cd0b19b0a4bffdad6e6d2d1d25b211cbeede991e04211eb960c0e48cffc#rd">漫画：三分钟了解敏捷开发</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190358&idx=1&sn=631071dcba0869c842209df07c74e432&chksm=8c990a0cbbee831abce6b4a6aacff4d0a907e8b8846d7f1fd9a6b4f170048a642ff02266e31d#rd">漫画：优秀的程序员具备哪些属性？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190318&idx=1&sn=5f79c533a9b39104c8b939a6d6c27d07&chksm=8c990a74bbee8362016a741d3489fa8b7ba6bc4d6b0e623bd922c37b0f6013670d1868c26042#rd">漫画算法：无序数组排序后的最大相邻差值</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190285&idx=1&sn=880b8b5baf39895ca0d53f4a720dd600&chksm=8c990a57bbee83413775036b52304292ce782a6d281ab5cddf71de9c555c7c3bb0c70cba35b2#rd">漫画：当程序员遇上智力题（第三季）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190280&idx=1&sn=766c343d8eec49df5aada3d431233194&chksm=8c990a52bbee83440cfa57c4d0e28f26382c93eba5673401c7cf5c5cda1deb0230cc4894b674#rd">漫画：什么是人工智能？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190242&idx=1&sn=c23dbf981663e9c6cd0ab0ab243c1288&chksm=8c990ab8bbee83ae1d90d5322e9f4469b38a4230102e918f41f6c24d0b8ebb2ce403005cf792#rd">漫画：程序员不是修电脑的！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190199&idx=1&sn=3d22e6bc95b66635dd6a36c5900ac401&chksm=8c990aedbbee83fb2ddbbc6f2ff932f2a1358b9882e42a142f80a60f6afd8373d495d07046e3#rd">漫画算法：判断2的乘方</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190125&idx=1&sn=ec14a8afacbe1072dcb45f50f45746b2&chksm=8c990537bbee8c2140447335c0a318bbdf1b21aa858213159343d416febf18e955d243f32688#rd">漫画：什么是大数据？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190242&idx=1&sn=c23dbf981663e9c6cd0ab0ab243c1288&chksm=8c990ab8bbee83ae1d90d5322e9f4469b38a4230102e918f41f6c24d0b8ebb2ce403005cf792#rd">漫画：程序员不是修电脑的！</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190199&idx=1&sn=3d22e6bc95b66635dd6a36c5900ac401&chksm=8c990aedbbee83fb2ddbbc6f2ff932f2a1358b9882e42a142f80a60f6afd8373d495d07046e3#rd">漫画算法：判断2的乘方</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190125&idx=1&sn=ec14a8afacbe1072dcb45f50f45746b2&chksm=8c990537bbee8c2140447335c0a318bbdf1b21aa858213159343d416febf18e955d243f32688#rd">漫画：什么是大数据？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190076&idx=1&sn=5ad9aab376fe9d6aa8d4092c1976aec0&chksm=8c990566bbee8c70fc9d354082cdc5ef4cf6a44dc3f448808f6b986de26b280fe8bdaae5a1f6#rd">漫画：什么是机器学习？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190074&idx=1&sn=e99a6eb6fa5c64b2a861c98510586e2e&chksm=8c990560bbee8c7693552f7ed2b76e6e7aa62724bae2d2d9563502724ccec47e66ba9e4947db#rd">漫画：程序员的智商测试题</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190073&idx=1&sn=c20c002127e2ce3fe0c71a00aee70806&chksm=8c990563bbee8c75521c54ea8eb44b009ad07266b1e5fbf22926baf9a7b7302c7e4f7657dbb8#rd">漫画算法：最小栈的实现</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653190004&idx=1&sn=f2fa92d576450ef877e149deda51c29d&chksm=8c9905aebbee8cb89622ee3f76289c189f295d9ca44af08b93223ae43274959f77663f363cdb#rd">漫画：如何用脚本抢月饼？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189976&idx=1&sn=8a221e91aced33e9cc5732627e16fc88&chksm=8c990582bbee8c94d27b5e57d88c2a171ef54dab27e9d2912359968ed5ccf3ea8ff109f25a85#rd">漫画：如何用脚本抢月饼？（预告）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189951&idx=1&sn=0181c95484b67d108672235b14e5ebbb&chksm=8c9905e5bbee8cf3362ccc4c7e091caa18b5783183ce4475b6f011c09c1cb03847ea4cb5220c#rd">漫画算法：找出缺失的整数</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189913&idx=1&sn=8667ba0170aef9b6c34713ce8cea60a8&chksm=8c9905c3bbee8cd56d079bb0a436a46a18eb43061bc9390483f6cca692760f01cb575241ffff#rd">漫画算法：辗转相除法是什么鬼？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189798&idx=1&sn=c35c259d0a4a26a2ee6205ad90d0b2e1&chksm=8c99047cbbee8d6a452fbb171133551553a825c83fb8b0cc66210dcda842c61157a07baaeb6b#rd">漫画算法：如何判断链表有环？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189976&idx=1&sn=8a221e91aced33e9cc5732627e16fc88&chksm=8c990582bbee8c94d27b5e57d88c2a171ef54dab27e9d2912359968ed5ccf3ea8ff109f25a85#rd">漫画：如何用脚本抢月饼？（预告）</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189951&idx=1&sn=0181c95484b67d108672235b14e5ebbb&chksm=8c9905e5bbee8cf3362ccc4c7e091caa18b5783183ce4475b6f011c09c1cb03847ea4cb5220c#rd">漫画算法：找出缺失的整数</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189913&idx=1&sn=8667ba0170aef9b6c34713ce8cea60a8&chksm=8c9905c3bbee8cd56d079bb0a436a46a18eb43061bc9390483f6cca692760f01cb575241ffff#rd">漫画算法：辗转相除法是什么鬼？</a><br><a href="http://mp.weixin.qq.com/s?__biz=MzIxMjE5MTE1Nw==&mid=2653189798&idx=1&sn=c35c259d0a4a26a2ee6205ad90d0b2e1&chksm=8c99047cbbee8d6a452fbb171133551553a825c83fb8b0cc66210dcda842c61157a07baaeb6b#rd">漫画算法：如何判断链表有环？</a></p>
]]></content>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
</search>
