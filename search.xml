<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[iOS快速设置代理]]></title>
    <url>%2F2019%2F09%2F28%2Fios-switch-proxy%2F</url>
    <content type="text"><![CDATA[问题手动设置wifi的步骤非常长： 点击“设置” 点击“无线局域网” 点击已连接的wifi 点击“配置代理” 点击“手动” 定位服务器输入框，输入ip 定位端口输入框，输入port 点击“存储” 解决用iOS上的Shadowrocket和Mac上的Charles来快速设置代理iOS和Mac在同一wifi 启动Charles，假设代理地址为：192.168.0.100:8888 Shadowrocket设置全局路由为代理 Shadowrocket添加HTTP类型的节点 Shadowrocket打开连接 添加HTTP类型的节点: 结果:]]></content>
      <tags>
        <tag>代理</tag>
        <tag>iOS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mitmproxy与charles的抓包应用]]></title>
    <url>%2F2019%2F09%2F27%2Fmitmproxy-and-charles-use%2F</url>
    <content type="text"><![CDATA[[TOC]问题mitmproxy是命令行界面，不太方便查看，自己遇到的问题有： 在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情 json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文 不知道怎么复制界面中显示的内容 Charles的编程能力弱把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展 环境电脑和手机都连接到同一个Wi-Fi, 比如TP_LINK_629F电脑: ip=192.168.1.100; 运行着Charles、mitmproxyCharles: 192.168.1.100:8888mitmproxy: 192.168.1.100:8080手机: 设置代理地址为Charles的地址192.168.1.100:8888 Charles - External Proxy Settings功能开启： Web Proxy(HTTP) - Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080 Secure Web Proxy(HTTPS) - Secure Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080 手机 Charles - External Proxy Settings 应用应用：自动生成接口的python代码 以趣头条App为例：阅读得积分的接口为: https://api.1sapp.com/readtimer/report自动生成的代码大约如下： 12345678910111213141516171819def readtimer_report(self): headers = &#123; &apos;User-Agent&apos;: &apos;qukan_android;retrofit/2.4.0 okhttp/3.11.0;os/7.0 M5 Note Meizu;device/862546036581345;version/3.9.41.000.0904.1121;channel/012&apos;, &apos;Host&apos;: &apos;api.1sapp.com&apos;, &apos;Accept-Encoding&apos;: &apos;gzip&apos;, &apos;Connection&apos;: &apos;keep-alive&apos;, &#125; params = &#123; &apos;qdata&apos;: &apos;NzVFNkE3Mjc0RjEzRkYwRTM5OTEzNjAyRUZBMDMzQTAuY0dGeVlXMGZPR0kyTldKalltTXRNVGczT1MwME9EZGlMVGszT0RBdE1EUmlOVEV3TWpOak9UazRIblpsY25OcGIyNGZNVEVlY0d4aGRHWnZjbTBmWVc1a2NtOXBaQjVsWXg4eC46LxvyIvgD62/T93SlANmywpigTwlOwcfCHe0iZ1D8mH1zpslt2JCRPdiHOj1M20bU0zDX0odUOBig6Kt51mheNJuQYeDvp15R8RSGTT3LR9s55nBCGvWyTLq+3pjEvkyERElR9E2I384/nHQR4iqxqv7LKQ4rBA0R6bNG8sksHqNl1izSbF87G/4/Qw5vVYcuNUfU0BM6vvIbsy2CTPWlJ51YCzadQZZLONuaYTpyhuOiUV4vnx6qkvpYDNp9XpPPjbXxJAb7fikqjWSdyx167hXDPzUkNZGndjZsv7kQANDkIk2Dm+g5YW1I49xnkOzJkmxvyrLevnsSb9S5fSEUEyfq0GlPHE0RRBeSjFxVltH1zdZraTtk13Z+MvA7HBYQONz/0OwyMnujc1Ety91uKh6YCCVEDvBO+RTOzoRDa3nlRo3FTo9OeRBsyL20qIP24977MMYXEoxinTuwNonipCjnjSYIrhOu6cyv7uxuLd6FxtmTsydawNGMPI/K+habIKXNUFsQMCUcAGhYpoKQJvkQqHEq6lPyZZzXDot1EsN6bsGj56xQdiuJZLMFyZaGNR6E9FmVlI0LAVT8ttVpOvs+5f08T0iMxMNb0VQk6DOySpYHp7EVjc9YFpPcVxj8aXvuTjoPkaNGhSKQ0fgBd8HVRLslcnzX0QLJkTuU7NQ9aili6m2M2hWvh/q8ghWrvtLT+izCiFNKHE+4GTC9J6jqgyjHsXkAjcOSBAaIXMQKnOd664hdoR2GqV+GAy95fc5zZCJ7EFvzmTbJQrpMOwW+Y2NvYPZtgjw1uJEyU7AR7nVw7VqMjPpCDYeWBWoQ1W4OjlXTqgBR4MIu1sTag6a+my/0hItf91SNa58zCN3YmE2NnsWwwiCC+ZP91moV/KqPwX3vMLKW4/3Vsziqe8gl&apos;, &#125; data = &#123; &#125; url = &apos;http://api.1sapp.com/readtimer/report&apos; result = self._get(url, headers=headers, params=params, data=data) return result 应用步骤： 手机按上面环境设置好代理地址 在电脑上启动Charles，Charles按上面环境设置 在电脑上启动mitimproxy, 启动命令如下：mitmproxy -s gen_code_mitm.py 文件gen_code_mitm.py内容参考下面 在手机趣头条App阅读文章或看视频一定时间 会在~/Desktop/api/目录下生成一个叫readtimer_report.text 把readtimer_report.text的相应代码复制粘帖到文件qu_tou_tiao.py中 按需要修改自动生成的代码为希望的样子 运行qu_tou_tiao.py 注意： readtimer_report.text的名字和所在目录是由代码gen_code_mitm.py决定的，请自行阅读修改 readtimer_report方法名由代码gen_code_mitm.py决定的，请自行阅读修改 对body为复杂json格式的代码自动生成会有错误，有能力的自行修改 readtimer/report这个接口自动生成的代码数据是不能重复获取积分的，这里只是演示 文件文件qu_tou_tiao.py: 1234567891011121314151617181920212223242526272829303132333435363738394041424344&apos;&apos;&apos;代码模板&apos;&apos;&apos;import requestsimport jsonimport logginglogging.basicConfig(format=&apos;%(asctime)s:%(message)s&apos;, datefmt=&apos;%m-%d %H:%M:%S&apos;, level=logging.INFO)class User(object): def __init__(self): pass def api_need_implement(self): pass def _header(self): return &#123; &apos;User-Agent&apos;: &apos;&apos;, &apos;Cookie&apos;:self.cookie &#125; @staticmethod def _post(url, data=None, json=None, p=logging.warning, **kwargs): res = requests.post(url, data=data, **kwargs) result = res.text p(res.json()) logging.info(&apos;&apos;) return result @staticmethod def _get(url, params=None, p=logging.warning, **kwargs): res = requests.get(url, params=params, **kwargs) result = res.text p(json.loads(result)) logging.info(&apos;&apos;) return resultdef genUsers(): yield User()if __name__ == &quot;__main__&quot;: for user in genUsers(): user.api_need_implement() 文件gen_code_mitm.py 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132import jsonimport refrom urllib.parse import urlparsefrom mitmproxy import ctxfrom mitmproxy import flowfilterfrom mitmproxy import http&apos;&apos;&apos;生成接口python代码&apos;&apos;&apos;class GenCode(object): def __init__(self): ctx.log.info(&apos;__init__&apos;) # 趣头条 urls = [ r&apos;taskcenter/getListV2&apos;,#tab页：任务 r&apos;readtimer/report&apos;, ] self.qu_tou_tiao = flowfilter.parse(&apos;|&apos;.join(urls)) # 百度 - 全民小视频 urls = [ r&apos;mvideo/api&apos;, # 每日签到 ] self.quan_ming = flowfilter.parse(&apos;|&apos;.join(urls)) self.flowfilters = [ self.qu_tou_tiao, self.quan_ming, ] def load(self, loader): ctx.log.info(&apos;event: load&apos;) def configure(self, updated): ctx.log.info(&apos;event: configure&apos;) def running(self): ctx.log.info(&apos;event: running&apos;) def done(self): ctx.log.info(&apos;event: done&apos;) def response(self, flow: http.HTTPFlow): if any( [ filter(flow) for filter in self.flowfilters ] ): request: http.HTTPRequest = flow.request parse_result = urlparse(request.url) url_path = parse_result.path function_name = re.sub(r&apos;[/-]&apos;,&apos;_&apos;, url_path).strip(&apos;_&apos;) headers_code = self.headers_string(flow) params_code = self.params_string(flow) data_code = self.data_string(flow) path = f&apos;&apos;&apos;/Users/zhoujie/Desktop/api/&#123;function_name&#125;.text&apos;&apos;&apos; with open(path, &apos;a&apos;) as f: print(f&apos;&apos;&apos;# ---------------------&apos;&apos;&apos;,file=f) code = f&apos;&apos;&apos;def &#123;function_name&#125;(self): &#123;headers_code&#125; &#123;params_code&#125; &#123;data_code&#125; url = &apos;&#123;request.scheme&#125;://&#123;request.pretty_host&#125;&#123;url_path&#125;&apos; result = self._&#123;request.method.lower()&#125;(url, headers=headers, params=params, data=data) return result &apos;&apos;&apos; f.write(code) print(f&apos;&apos;&apos;Response:&apos;&apos;&apos;,file=f) print(f&apos;&apos;&apos;&#123;flow.response.text&#125;&apos;&apos;&apos;,file=f) print(f&apos;&apos;&apos;# ---------------------\n\n&apos;&apos;&apos;,file=f) def headers_string(self, flow: http.HTTPFlow): lines = &apos;&apos; for key,value in flow.request.headers.items(): lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot; s = f&apos;&apos;&apos;headers = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos; return s def params_string(self, flow: http.HTTPFlow): lines = &apos;&apos; for key,value in flow.request.query.items(): lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot; s = f&apos;&apos;&apos;params = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos; return s def data_string(self, flow: http.HTTPFlow): &apos;&apos;&apos; Content-Type: application/x-www-form-urlencoded Content-Type: application/json; charset=utf-8 Content-Type: text/plain;charset=utf-8 &apos;&apos;&apos; lines = &apos;&apos; # [urlencoded_form, multipart_form, plan, json]取其一 for key,value in flow.request.urlencoded_form.items(): lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot; for key,value in flow.request.multipart_form.items(): key = key.decode(encoding=&apos;utf-8&apos;) value = value.decode(encoding=&apos;utf-8&apos;) lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot; # Todo:复杂json数据还不能代码化 if &apos;application/json&apos; in flow.request.headers.get(&apos;content-type&apos;,&apos;&apos;): d = json.loads(flow.request.text) for key,value in d.items(): lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &#123;value&#125;,&quot; s = f&apos;&apos;&apos;data = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos; return s addons = [ GenCode()]]]></content>
      <tags>
        <tag>mitmproxy</tag>
        <tag>charles</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F09%2F27%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
  <entry>
    <title><![CDATA[我的阅读列表]]></title>
    <url>%2F2019%2F09%2F27%2F%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[基础 汇编语言入门教程 理解字节序 正则表达式30分钟入门教程 YAML 语言教程 理解OAuth 2.0 基于python flask详述 OAuth 2.0 的运作流程 RESTful API 最佳实践 算法 《我的第一本算法书》 极客时间-数据结构与算法之美 极客时间-算法面试通关40讲 网络 极客时间-趣谈网络协议 《Wireshark网络分析就这么简单》 《Wireshark网络抓包从入门到熟练》 The First Few Milliseconds of an HTTPS Connection 为什么Wireshark无法解密HTTPS数据 curl 的用法指南 curl 网站开发指南 使用 curl 命令分析请求的耗时情况 在Linux中使用curl命令参数详解 协议 WebSocket 教程 SSH原理与运用（一）：远程登录 SSH原理与运用（二）：远程登录 SSH 技巧 ssh密钥对登录安全吗？原理篇 针对不同主机使用不同 SSH Key JavaScript ECMAScript 6 入门 前端基础进阶系列 JavaScript深入系列 iOS iOS阅读列表 Python Python阅读列表 Node.js Node Cookbook Second Edition 深入浅出Node.js 前端 Flask Web开发：基于Python的Web应用开发实战 Front-End Web Development The Big Nerd Ranch Guide Handlebars模板引擎 Shell xargs 命令教程 Bash 脚本 set 命令教程 命令行通配符教程 Pro Bash Programming, Second Edition linux命令行精选网 linux常用命令-帮助命令-授之以渔 Printing colors in the terminal Linux linux 网络虚拟化： network namespace 简介 Linux 的启动流程 Systemd 入门教程：命令篇 Systemd 入门教程：实战篇 详解 Linux 下的用户管理、用户组管理和权限管理 Docker 入门教程 图书 编译系统透视 SQL基础教程（第2版） 图解密码技术 深度学习入门：基于Python的理论与实现(英文名：Deep Learning From Scratch) Python深度学习(英文名：Deep Learning With Python) Python3网络爬虫开发实战 精通Scrapy网络爬虫 网站]]></content>
  </entry>
</search>
