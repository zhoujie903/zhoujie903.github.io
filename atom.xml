<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一吻江山</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-05T13:40:21.576Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jason zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mitmproxy的应用-代码生成</title>
    <link href="http://yoursite.com/2019/12/28/mitmproxy%E7%9A%84%E5%BA%94%E7%94%A8-%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90/"/>
    <id>http://yoursite.com/2019/12/28/mitmproxy的应用-代码生成/</id>
    <published>2019-12-28T05:48:17.000Z</published>
    <updated>2020-01-05T13:40:21.576Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>很多手机App都有做任务，得金币兑换现金的功能<br>手动做任务有很多限制；写代码自动化运行可以消除一些限制<br>但写代码时的敲键盘有点费时间，这篇文章就是要解决自动生成代码的问题</p><h2 id="运行环境"><a href="#运行环境" class="headerlink" title="运行环境"></a>运行环境</h2><p>背景知识: python、mitmproxy、jinja2<br>python: 3.7.3<br>python第三方库: mitmproxy, requests, Jinja2<br>手机代理地址: mitmproxy的地址</p><a id="more"></a><p>因为有多个文件，这里贴部分代码，完整代码地址：<br><a href="https://github.com/zhoujie903/LearnPython/tree/master/mitmproxy_addons/gen_code" target="_blank" rel="noopener">https://github.com/zhoujie903/LearnPython/tree/master/mitmproxy_addons/gen_code</a></p><h2 id="使用说明"><a href="#使用说明" class="headerlink" title="使用说明"></a>使用说明</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>设置:<br>设置1：设置<code>self.api_dir</code>: 存放<code>App目录</code>的父目录<br><code>代码目录</code>下的<code>gen_code_mitm.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&apos;__init__&apos;)</span><br><span class="line">        # 设置代码文件生成的目录\文件夹</span><br><span class="line">        self.api_dir = &apos;/Users/zhoujie/Desktop/api/&apos;</span><br></pre></td></tr></table></figure><p>设置2: 后面说明…</p><p>步骤: </p><ol><li>电脑上运行起mitmproxy；手机设置代理地址为mitmproxy的地址</li><li>打开手机App，正常操作：点击、滑动触发相应网络请求被触发，这时各个api方法代码已生成<code>&lt;api-name&gt;.text</code></li><li>正常结束mitmproxy，这时在done方法里会生成整体代码<code>code-&lt;app-name&gt;.py</code></li><li>微修改<code>code-&lt;app-name&gt;.py</code>并运行</li></ol><p>步骤说明:<br>步骤1: 启动mitmproxy</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --set session=&apos;huawei&apos; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure><p><strong>session的值在后面说明…</strong></p><h3 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h3><p><code>gen_code_mitm.py</code>并不会自动生成全部网络请求的代码，只会生成已配置好的网络请求的代码</p><p>配置如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">class Api(object):</span><br><span class="line">    ...</span><br><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&apos;__init__&apos;)</span><br><span class="line">        ...</span><br><span class="line">        </span><br><span class="line">        # 趣头条</span><br><span class="line">        # 步骤1: urls里增加用URL path代表的网络请求</span><br><span class="line">        urls = [</span><br><span class="line">            r&apos;x/tree-game/&apos;,</span><br><span class="line">            Api(r&apos;/app/re/taskCenter/info/v1/get&apos;,params_as_all=True),            ,</span><br><span class="line">        ]</span><br><span class="line">        </span><br><span class="line">        # 步骤2: 创建代表App的App对象</span><br><span class="line">        self.qu_tou_tiao = App(urls, &apos;qu-tou-tiao&apos;)</span><br><span class="line">        </span><br><span class="line">        # 百度 - 好看视频</span><br><span class="line">        urls = [...]      </span><br><span class="line">        self.hao_kan = App(urls, &apos;hao-kan&apos;) </span><br><span class="line">        </span><br><span class="line">        # 步骤3: 把App添加进来</span><br><span class="line">        self.flowfilters = [</span><br><span class="line">            self.qu_tou_tiao, </span><br><span class="line">            self.hao_kan,</span><br><span class="line">            ...</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><ul><li><ol><li><code>urls</code>里增加用URL path代表的网络请求</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">urls = [</span><br><span class="line">    r&apos;x/tree-game/&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>创建代表App的App对象</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># &apos;qu-tou-tiao&apos;中给App取的名字</span><br><span class="line">self.qu_tou_tiao = App(urls, &apos;qu-tou-tiao&apos;)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>把App对象加入到self.flowfilters中，代表要生成这个App的代码</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">self.flowfilters = [</span><br><span class="line">    self.qu_tou_tiao, </span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>urls的配置在后面说明…</strong></p><h3 id="目录-文件夹"><a href="#目录-文件夹" class="headerlink" title="目录/文件夹"></a>目录/文件夹</h3><p>先约定2个概念：<code>代码目录</code>、<code>App目录</code><br><code>代码目录</code>：生成<code>App目录</code>的代码、模板等文件的目录<br><code>App目录</code>：保存自动生成的App代码文件的目录</p><p><code>代码目录</code>有2类文件：</p><ul><li>*.py    - 代码文件 <code>gen_code_mitm.py</code></li><li>*.j2.py - 模板文件</li></ul><p><code>App目录</code>有3类文件：</p><ul><li>*.py - 代码文件：sessions.py、code-xxx.py、session_xxx.py</li><li>*.text - api文件，包含2个版本的代码文件、响应http_resopnse_body，不会被py文件读取</li><li>*.json - 暂时无用，不会被py文件读取</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">依赖关系[import关系]</span><br><span class="line">code-xxx.py</span><br><span class="line">    sessions.py</span><br><span class="line">        session_xxx.py</span><br></pre></td></tr></table></figure><ul><li><p>session_xxx.py: 保存着像账号ID、cookie、token等用户登录数据 </p></li><li><p>每个App都有自己的目录: 比如这里有 今天头条极速版本[‘jin-ri-tou-tiao’], 趣头条[‘qu-tou-tiao’] 两个目录/文件夹</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">➜  api tree</span><br><span class="line">.</span><br><span class="line">├── jin-ri-tou-tiao</span><br><span class="line">│   ├── api_news_feed_v47.text</span><br><span class="line">│   ├── code-jin-ri-tou-tiao.py</span><br><span class="line">│   ├── data-bodys-keys-huawei.json</span><br><span class="line">│   ├── data-bodys-keys-ios.json</span><br><span class="line">│   ├── xxxx.json</span><br><span class="line">│   ├── search_suggest_homepage_suggest.text</span><br><span class="line">│   ├── session_huawei.py</span><br><span class="line">│   ├── session_ios.py</span><br><span class="line">│   ├── session_xiaomi.py</span><br><span class="line">│   └── sessions.py</span><br><span class="line">└── qu-tou-tiao</span><br><span class="line">    ├── app_re_taskcenter_info_v1_get.text</span><br><span class="line">    ├── code-qu-tou-tiao.py</span><br><span class="line">    ├── xxx.json</span><br><span class="line">    ├── session_huawei.py</span><br><span class="line">    ├── session_xiaomi.py</span><br><span class="line">    ├── sessions.py</span><br><span class="line">    └── sign_sign.text</span><br><span class="line">    </span><br><span class="line">2 directories, 40 files</span><br></pre></td></tr></table></figure><ul><li>每个App会有多份session_xxx.py：比如session_huawei.py, session_ios.py, session_xiaomi.py; 表示有华为、iPhone、小米三台手机的运行数据</li></ul><h3 id="session"><a href="#session" class="headerlink" title="session"></a>session</h3><p>这里有一个需求与实现方案的问题：</p><p>需求: 一份代码[code-xxx.py] - 维护成本低; 多份账号数据[session_xxx.py] - 批量运行, 效率高<br>问题: 一个网络请求的数据怎么知道写入哪个账号数据文件中[session_xxx.py]<br>解决: </p><ul><li>推断: 从网络请求的headers、parameters、query、body中的值来推断为某个session</li><li>指定: 启动时指定为某个session</li></ul><p>先约定1个概念：<code>一次mitmproxy运行</code><br><code>一次mitmproxy运行</code>: 启动mitmproxy -&gt; 1或多部手机操作相同App -&gt;退出\停止mitmproxy[ctrl+c或Q]</p><p><strong>方案一: 指定</strong></p><p>在启动时指定<code>--set session=&#39;huawei&#39;</code>, 则所有数据写入session_huawei.py文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --set session=&apos;huawei&apos; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure><p><strong>问题:</strong> 多部手机[代表不同账号]操作相同App时，多个账号数据都写入到了同一个账号文件中[session_huawei.py]</p><p><strong>最佳实践: <code>一次mitmproxy运行</code>只操作一个手机[一个账号]</strong></p><p><strong>方案二: 推断</strong><br>在启动时不指定session, 代码自动推断</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure><p>举例：<br><code>今日头条极速版</code>有一个api: <code>/search/suggest/homepage_suggest/</code><br>在parameters\query有<code>&quot;device_platform&quot;: &quot;iphone&quot;</code>字段值, 那就写入session_ios.py中。</p><p><strong>问题：</strong><br>如果有一个api无法从headers、parameters、query、body等信息中判断出该写入哪个文件？</p><p>这时会写入session_default.py文件中，这时一个账号的数据被写到2个文件中: session_default.py、session_xxx.py, 生成的代码会被认为是2个账号，无法”正常运行”</p><p><strong>最佳实践: <code>一次mitmproxy运行</code>只操作一个手机[一个账号], 且启动时设置<code>guess_as_session</code></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --set guess_as_session=&apos;huawei&apos; -s &quot;gen_code_mitm.py&quot;</span><br></pre></td></tr></table></figure><p>guess_as_session不能像session那样设定任意值<br>guess_as_session的取值：ios, huawei, xiaomi [自己手头只有这些设备]<br>若要guess_as_session可以取其它值，需要设置：</p><p><code>gen_code_mitm.py</code> - <code>class GenCode(object)</code> - <code>__init__</code>方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">self.guess_session = collections.OrderedDict(</span><br><span class="line">    ios=re.compile(r&apos;iphone|ios&apos;, flags=re.IGNORECASE),</span><br><span class="line">    xiaomi=re.compile(r&apos;xiaomi|mi\+5|miui&apos;, flags=re.IGNORECASE),</span><br><span class="line">    huawei=re.compile(r&apos;huawei&apos;, flags=re.IGNORECASE),</span><br><span class="line">    # 在这里增加其它的自己想要的值</span><br><span class="line">    # meizhu=re.compile(r&apos;meizhu&apos;, flags=re.IGNORECASE),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><h3 id="urls的配置-Api"><a href="#urls的配置-Api" class="headerlink" title="urls的配置 - Api"></a>urls的配置 - Api</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">urls = [</span><br><span class="line">    r&apos;x/tree-game/&apos;,</span><br><span class="line">    Api(r&apos;/app/re/taskCenter/info/v1/get&apos;,params_as_all=True),            ,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>urls中可以添加2类对象: str, Api</p><p><strong>Api类说明</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">class Api(object):</span><br><span class="line">    def __init__(self, url, f_name=&apos;&apos;, log=&apos;&apos;, params_as_all=False, p_as_all_limit=50, body_as_all=False, f_p_enc: set=None, f_b_enc: set=None, f_p_arg: set=None, f_p_kwarg: dict=None, f_b_arg: set=None, f_b_kwarg: dict=None, content_type=&apos;&apos;):</span><br></pre></td></tr></table></figure><p>参数说明</p><ul><li>url - 不需要完整的URL</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">urls = [</span><br><span class="line">    # 方式01：包含host</span><br><span class="line">    &apos;game-center-new.1sapp.com/x/open/game&apos;,</span><br><span class="line">    </span><br><span class="line">    # 方式02：只有path</span><br><span class="line">    &apos;/x/open/game&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>url - 通配: 一个URL生成多个api方法代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">urls = [</span><br><span class="line">    # 只要写&apos;score_task/v1/sleep/&apos;路径前缀, 所有以它为前缀的方法都会生成相应代码</span><br><span class="line">    # &apos;score_task/v1/sleep/status/&apos;,</span><br><span class="line">    # &apos;score_task/v1/sleep/start/&apos;,</span><br><span class="line">    # &apos;score_task/v1/sleep/stop/&apos;,</span><br><span class="line">    # &apos;score_task/v1/sleep/done_task/&apos;,</span><br><span class="line">    &apos;score_task/v1/sleep/&apos;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>url - 通配与匹配顺序</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">urls = [</span><br><span class="line">    # 当触发&apos;score_task/v1/sleep/done_task/&apos;时，</span><br><span class="line">    # 因为&apos;score_task/v1/sleep/&apos;先添加并且也匹配</span><br><span class="line">    # 不会再寻找最佳匹配&apos;score_task/v1/sleep/done_task/&apos;</span><br><span class="line">    # 所以会生成默认的方法名：score_task_v1_sleep_done_task</span><br><span class="line">    # 而不是：sleep_done_task</span><br><span class="line">    &apos;score_task/v1/sleep/&apos;,</span><br><span class="line">    Api(&apos;score_task/v1/sleep/done_task/&apos;, f_name=&apos;sleep_done_task&apos;)   </span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">最佳实践：先具体[长], 后模糊[前缀]</span><br><span class="line"></span><br><span class="line">urls = [</span><br><span class="line">    Api(&apos;score_task/v1/sleep/done_task/&apos;, f_name=&apos;sleep_done_task&apos;)</span><br><span class="line">    &apos;score_task/v1/sleep/&apos;,       </span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>f_name - 指定方法名</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">默认方法名：</span><br><span class="line">    parse_result = urlparse(request.url)</span><br><span class="line">    url_path = parse_result.path</span><br><span class="line">    function_name = re.sub(r&apos;[./-]&apos;, &apos;_&apos;, url_path).strip(&apos;_&apos;).lower()</span><br><span class="line">    </span><br><span class="line">比如：</span><br><span class="line">    urls = [&apos;/score_task/v1/walk/count/&apos;]</span><br><span class="line">    触发的url为：https://i-hl.snssdk.com/score_task/v1/walk/count/</span><br><span class="line">默认：</span><br><span class="line">    def score_task_v1_walk_count(self)</span><br><span class="line">    </span><br><span class="line">指定后：    </span><br><span class="line">    urls = [Api(&apos;/score_task/v1/walk/count/&apos;,f_name=&apos;walk_count&apos;)]</span><br><span class="line">    def walk_count(self):</span><br></pre></td></tr></table></figure><ul><li>log - 指定打印的日志信息</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">默认：</span><br><span class="line">    def score_task_v1_walk_count(self):</span><br><span class="line">        logging.info(&apos;score_task_v1_walk_count&apos;)</span><br><span class="line">指定后：</span><br><span class="line">    urls = [Api(&apos;/score_task/v1/walk/count/&apos;,log=&apos;睡觉 - 领金币&apos;)]</span><br><span class="line">    def score_task_v1_walk_count(self):</span><br><span class="line">        logging.info(&apos;睡觉 - 领金币&apos;)</span><br></pre></td></tr></table></figure><ul><li>params_as_all\body_as_all - 应对sign签名的问题</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">比如：</span><br><span class="line">    趣头条的&apos;任务&apos;界面，会调用</span><br><span class="line">    http://api.1sapp.com/app/re/taskCenter/info/v1/get</span><br><span class="line">    来获取任务列表\进度信息</span><br><span class="line">    params有一个字段：&quot;sign&quot;: &quot;1ad43dd2b7dbacc62b0e2b98e325483a&quot;</span><br><span class="line">    这个字段和其它字段是一个整体，且我们不能伪造sign的值</span><br><span class="line">    直接把整个params值拿来用</span><br><span class="line">默认：</span><br><span class="line">    def app_re_taskcenter_info_v1_get(self):</span><br><span class="line">        url = self.urls[&apos;app/re/taskcenter/info/v1/get&apos;]</span><br><span class="line">        params = self._params_from(url)</span><br><span class="line">指定后：</span><br><span class="line">    urls = [Api(r&apos;/app/re/taskCenter/info/v1/get&apos;,params_as_all=True)]</span><br><span class="line">    def app_re_taskcenter_info_v1_get(self, params_as_all):</span><br><span class="line">        url = self.urls[&apos;app/re/taskcenter/info/v1/get&apos;]</span><br><span class="line">        params = self._params_from(url)</span><br><span class="line">        params = params_as_all</span><br><span class="line"></span><br><span class="line">    并会生成一个全局方法</span><br><span class="line">    def app_re_taskcenter_info_v1_get(user: User):</span><br><span class="line">        for item in user.params_as_all[&apos;/app/re/taskCenter/info/v1/get&apos;]:</span><br><span class="line">            user.app_re_taskcenter_info_v1_get(item)</span><br></pre></td></tr></table></figure><ul><li>p_as_all_limit - 没有实现</li><li>f_p_arg\f_b_arg - 输入参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">默认：</span><br><span class="line">    def actcenter_piggy_videoconfirm(self):</span><br><span class="line">        params = self._params_from(url)     </span><br><span class="line">指定后：</span><br><span class="line">    urls = [Api(r&apos;/actcenter/piggy/videoConfirm&apos;, f_p_arg=&#123;&apos;tag&apos;,&apos;count&apos;&#125;)]</span><br><span class="line">    def actcenter_piggy_videoconfirm(self, tag, count):</span><br><span class="line">        params = self._params_from(url)</span><br><span class="line">        params[&apos;tag&apos;] = tag</span><br><span class="line">        params[&apos;count&apos;] = count</span><br><span class="line">``` </span><br><span class="line">* f_p_enc\f_b_enc - params_as_all 与 f_p_arg 的结合体</span><br><span class="line"></span><br><span class="line">```    </span><br><span class="line">类中方法 与f_p_arg\f_b_arg相同</span><br><span class="line">并会生成一个像params_as_all\body_as_all相似的全局方法</span><br><span class="line">    def v5_user_rewar_video_callback_json(self, p):</span><br><span class="line">        url = self.urls[&apos;/v5/user/rewar_video_callback.json&apos;]</span><br><span class="line">        data = self._bodys_from(url)</span><br><span class="line">        data[&apos;p&apos;] = p</span><br><span class="line">        </span><br><span class="line">def v5_user_rewar_video_callback_json(user: User):</span><br><span class="line">    for item in user.bodys_encry[&apos;/v5/user/rewar_video_callback.json&apos;][&apos;p&apos;]:</span><br><span class="line">        user.v5_user_rewar_video_callback_json(item)</span><br></pre></td></tr></table></figure><ul><li>f_p_kwarg\f_b_kwarg - 有默认值的输入参数</li></ul><h3 id="未实现需求"><a href="#未实现需求" class="headerlink" title="未实现需求"></a>未实现需求</h3><ol><li><p>类似动态变化可伪造的值，比如时间戳，没有实现自动生成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">def api_contains_timstamp(self):</span><br><span class="line">    #这句需要自己输入</span><br><span class="line">    params[&apos;ts&apos;] = time.time()</span><br></pre></td></tr></table></figure></li><li><p>同品牌的2台手机，无法区分出session</p></li><li><p>Api收集数据没有限制数量</p></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;需求&quot;&gt;&lt;a href=&quot;#需求&quot; class=&quot;headerlink&quot; title=&quot;需求&quot;&gt;&lt;/a&gt;需求&lt;/h2&gt;&lt;p&gt;很多手机App都有做任务，得金币兑换现金的功能&lt;br&gt;手动做任务有很多限制；写代码自动化运行可以消除一些限制&lt;br&gt;但写代码时的敲键盘有点费时间，这篇文章就是要解决自动生成代码的问题&lt;/p&gt;&lt;h2 id=&quot;运行环境&quot;&gt;&lt;a href=&quot;#运行环境&quot; class=&quot;headerlink&quot; title=&quot;运行环境&quot;&gt;&lt;/a&gt;运行环境&lt;/h2&gt;&lt;p&gt;背景知识: python、mitmproxy、jinja2&lt;br&gt;python: 3.7.3&lt;br&gt;python第三方库: mitmproxy, requests, Jinja2&lt;br&gt;手机代理地址: mitmproxy的地址&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mitmproxy, python" scheme="http://yoursite.com/tags/mitmproxy-python/"/>
    
  </entry>
  
  <entry>
    <title>趣消除App自动化 - 成语消消乐-全自动化</title>
    <link href="http://yoursite.com/2019/09/29/%E6%88%90%E8%AF%AD%E6%B6%88%E6%B6%88%E4%B9%90-%E5%85%A8%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/29/成语消消乐-全自动化/</id>
    <published>2019-09-29T08:29:50.000Z</published>
    <updated>2019-09-29T08:30:52.537Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="趣消除App自动化-成语消消乐-全自动化"><a href="#趣消除App自动化-成语消消乐-全自动化" class="headerlink" title="趣消除App自动化 - 成语消消乐-全自动化"></a>趣消除App自动化 - 成语消消乐-全自动化</h1><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p><a href="https://www.jianshu.com/p/508c4169272d" target="_blank" rel="noopener">趣消除App自动化 - 成语消消乐-半自动化</a><br>这篇文章实现了<code>成语消消乐</code>的半自动化：</p><ul><li>用户点击开始一局游戏</li><li>代码自动答题</li><li>对代码没有找到的成语，用户自己点击成语赢得游戏</li></ul><p>这篇文章的目的是全自动化：</p><ul><li>代码自动开始一局游戏</li><li>代码自动答题</li><li>对没有全部找到的，放弃这局：等待对方赢得游戏；</li><li>开始下一局游戏</li></ul><a id="more"></a><p>写在前面：</p><ul><li>自己的文章从不介绍背景知识，直接上代码；因为定位实战，非教程</li><li>看了些评论，多是<code>不明觉厉</code>，希望你可以评主题相关的讨论或感谢</li><li>这篇文章<code>威力巨大</code>[呵呵]，所以<strong>不要做恶；不要做恶；不要做恶</strong>；</li></ul><p><strong>不要做恶：</strong><br>比如游戏有12个成语要找，但代码只答对了11个，还有1个成语4个字，共有<code>4*3*2*1=24</code>种排列组合，请读者不要发24个请求来找到这最后一个成语，这是楼主认为的’做恶’，也是对自动化：<code>对没有全部找到的，放弃这局：等待对方赢得游戏</code>做出的取舍；你可以用游戏里的<code>认输</code>和<code>提示</code></p><p>写这篇文章与代码的目的：</p><ul><li>虚荣：有读者阅读、评论</li><li>金钱：赢得游戏有几分钱</li><li>时间：游戏里插了很广告，跳过广告；自动化节约自己时间</li><li>能力：要写能用的代码，一定要学点什么，比如学习了websocket库</li><li>爱惜：自己的手机用了3年了，移植到电脑上来执行，可以让手机再战一年啊</li><li>成就：代码和文章等作品；不同维度地’虐人’的快感[鄙视]</li></ul><p>好了，希望你找到了学习的兴趣与动力，上代码</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>App: <code>趣消除App</code>iOS版本、<code>扶我起来学数学App</code>iOS版本<br>工具: python、Charles、python第三方库websocket<br>背景知识：python、抓包、websocket</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p><code>成语消消乐</code>有2个接口：</p><ol><li><a href="https://king.hddgood.com/king_api/v1/game/join_game[http]" target="_blank" rel="noopener">https://king.hddgood.com/king_api/v1/game/join_game[http]</a></li><li>wss://king.hddgood.com/websock_m/websock_message?uid={}&amp;gameid={}&amp;token={}[websocket]</li></ol><ul><li><code>game/join_game</code>接口会返回<code>websock_m/websock_message</code>接口需要的<code>gameid</code>；<code>gameid</code>每局都不同</li><li><code>uid</code>对每个账号是固定</li><li><code>token</code>对一次登入是固定，每局游戏都一样；</li><li>游戏的消息来回传递都在<code>websock_m/websock_message</code>接口websocket协议里完成</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /king_api/v1/game/join_game HTTP/1.1</span><br><span class="line">Host: king.hddgood.com</span><br><span class="line">A-Token-Header: PTtWUFdWUkBFHEVZCVcNdUtVWwdc=</span><br><span class="line">Cookie: UM_distinctid=16b27e625da1ef-038c4847dc733-336d7451-4a640-16b27e625dd490; cn_1276022107_dplus=%7B%22distinct_id%22%3A%20%2216b27e625da1ef-038c4847dc733-336d7451-4a640-16b27e625dd490%22%2C%22%24_sessionid%22%3A%20104%2C%22%24_sessionTime%22%3A%201561087099%2C%22%24dp%22%3A%200%2C%22%24_sessionPVTime%22%3A%201561087099%2C%22initial_view_time%22%3A%20%221559738991%22%2C%22initial_referrer%22%3A%20%22%24direct%22%2C%22initial_referrer_domain%22%3A%20%22%24direct%22%2C%22%24recent_outside_referrer%22%3A%20%22%24direct%22%7D; CNZZDATA1276022107=326225286-1559738991-%7C1561086230</span><br><span class="line"></span><br><span class="line">uid=1457362&amp;rank=11&amp;type=G</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">HTTP/1.1 200 </span><br><span class="line">Content-Type: application/json;charset=UTF-8</span><br><span class="line">Connection: close</span><br><span class="line"></span><br><span class="line">&#123;&quot;success&quot;:true,&quot;msg&quot;:&quot;操作成功&quot;,&quot;code&quot;:&quot;200&quot;,&quot;codemsg&quot;:&quot;操作成功&quot;,&quot;result&quot;:&#123;&quot;gameid&quot;:&quot;G11-810737&quot;,&quot;dup&quot;:0,&quot;starter&quot;:472251&#125;&#125;</span><br></pre></td></tr></table></figure><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>写2个文件：<code>chengyu-auto.py</code>[代码文件]、<code>chengyu.text</code>[数据文件]</p><ul><li><code>chengyu-auto.py</code>从<code>asking</code>消息里解析出<code>ask_string</code>到<code>chengyu.text</code>文件里查找是否包含相应的成语</li><li>自动提交成语答案</li><li><code>chengyu.text</code>文件刚开始是空的；在每局游戏结束时，游戏都会发送<code>game_result</code>消息给我们，里面有这局游戏的答案成语，把这些成语写到文件中</li><li>玩的局数越多，<code>chengyu.text</code>文件包含的成语越多，查找到答案的可能性越大</li></ul><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>需要安装第三方python库：<a href="https://pypi.org/project/websockets/" target="_blank" rel="noopener">websockets</a><br><code>chengyu-auto.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string"># 趣消除App-成语消消乐全自动化；</span></span><br><span class="line"><span class="string"># App版本：1.1.2</span></span><br><span class="line"><span class="string"># App地址：https://itunes.apple.com/cn/app/id1449545954</span></span><br><span class="line"><span class="string">提现非常迅速</span></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> collections</span><br><span class="line"><span class="keyword">import</span> pathlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Red = <span class="string">'\033[0;31m'</span></span><br><span class="line">Green = <span class="string">'\033[0;32m'</span></span><br><span class="line">Yellow = <span class="string">'\033[0;33m'</span> </span><br><span class="line">Blue = <span class="string">'\033[0;34m'</span></span><br><span class="line">Purple = <span class="string">'\033[0;35m'</span> </span><br><span class="line">Cyan = <span class="string">'\033[0;36m'</span>  </span><br><span class="line">White = <span class="string">'\033[0;37m'</span> </span><br><span class="line"></span><br><span class="line">colors = &#123;</span><br><span class="line">    <span class="number">0</span>:Red,</span><br><span class="line">    <span class="number">1</span>:Purple,</span><br><span class="line">    <span class="number">2</span>:Yellow,</span><br><span class="line">    <span class="number">3</span>:Blue,</span><br><span class="line">    <span class="number">4</span>:White,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这些变量的值可以通过像Charles抓包软件获得</span></span><br><span class="line"><span class="comment"># 账号变量</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"><span class="comment"># A_Token_Header的一些结论：</span></span><br><span class="line"><span class="comment"># 1.每个账号不同；</span></span><br><span class="line"><span class="comment"># 2.同一个账号每次登录时也是不一样的</span></span><br><span class="line"><span class="comment"># 3.同一个账号，退出时，只要不登录，上次的A-Token-Header的值还有效，只有再登录时，上次的token值才失败</span></span><br><span class="line">A_Token_Header_zxg = <span class="string">'PTtWUFdWUkBFHEVZCVcNdUtVWwdc'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># Cookie的一些结论：</span></span><br><span class="line"><span class="comment"># 1.同一个账号，退出或再登录，都不用修改，一直有效</span></span><br><span class="line"><span class="comment"># 2.值为空也可以</span></span><br><span class="line">Cookie_zxg = <span class="string">''</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># UUID的一些结论：</span></span><br><span class="line"><span class="comment"># 1.固定不变</span></span><br><span class="line">UUID_zxg = <span class="string">'1457362'</span></span><br><span class="line"><span class="comment"># ------------------------------------------------</span></span><br><span class="line"></span><br><span class="line">api_ = <span class="string">'https://king.hddgood.com/king_api/v1/'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">QuXiaoChuUser</span><span class="params">()</span>:</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'Host'</span>: <span class="string">'king.hddgood.com'</span>,</span><br><span class="line">        <span class="string">'Accept'</span>: <span class="string">'application/json, text/plain, */*'</span>,</span><br><span class="line">        <span class="string">'Accept-Language'</span>: <span class="string">'zh-cn'</span>,</span><br><span class="line">        <span class="string">'Origin'</span>: <span class="string">'https://king.hddgood.com'</span>,</span><br><span class="line">        <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (iPhone; CPU iPhone OS 12_1_4 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Mobile/16D57/; quxiaochu/ios v1.1.2'</span>,</span><br><span class="line">        <span class="string">'Referer'</span>: <span class="string">'https://king.hddgood.com/'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'uid'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'channel'</span>: <span class="string">''</span>,</span><br><span class="line">        <span class="string">'version'</span>: <span class="string">'1.1.2'</span>,</span><br><span class="line">        <span class="string">'os'</span>: <span class="string">'ios'</span>,</span><br><span class="line">        <span class="string">'web_ver'</span>: <span class="string">'20190261'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SLEEP = <span class="number">0.5</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, uid, token_header, cookie)</span>:</span></span><br><span class="line">        self.uid = uid</span><br><span class="line">        self.headers = dict(QuXiaoChuUser.headers)</span><br><span class="line">        self.headers[<span class="string">'A-Token-Header'</span>] = token_header</span><br><span class="line">        self.token_header = token_header</span><br><span class="line">        self.headers[<span class="string">'Cookie'</span>] = cookie</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">game_chengyu_join_game</span><span class="params">(self, rank)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">        成语消消乐-获取游戏id</span></span><br><span class="line"><span class="string">        https://king.hddgood.com/king_api/v1/game/join_game</span></span><br><span class="line"><span class="string">        &#123;"success":true,"msg":"操作成功","code":"200","codemsg":"操作成功","result":&#123;"gameid":"G15-3232777","dup":0,"starter":531492&#125;&#125;</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        print(<span class="string">"成语消消乐-获取游戏id &#123;&#125;"</span>.format(self.uid))</span><br><span class="line"></span><br><span class="line">        data = self._uid_data()</span><br><span class="line">        <span class="comment"># 1:书童；2:儒生；15:殿阁大学士</span></span><br><span class="line">        data[<span class="string">'rank'</span>] = str(rank) </span><br><span class="line">        data[<span class="string">'type'</span>] = <span class="string">'G'</span></span><br><span class="line"></span><br><span class="line">        api = self._genapi(<span class="string">'game/join_game'</span>)</span><br><span class="line">        result = self._post(api, self.headers, data) </span><br><span class="line">        <span class="keyword">return</span> json.loads(result)       </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_uid_data</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">'uid'</span>: self.uid&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_genapi</span><span class="params">(path)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'https://king.hddgood.com/king_api/v1/'</span> + path</span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_post</span><span class="params">(api, headers, data, p=logging.warning)</span>:</span></span><br><span class="line">        time.sleep(QuXiaoChuUser.SLEEP)</span><br><span class="line"></span><br><span class="line">        res = requests.post(api, headers=headers, data=data, verify=<span class="literal">False</span>)</span><br><span class="line">        print(res.url)</span><br><span class="line">        result = res.text</span><br><span class="line">        print(result)</span><br><span class="line">        print(<span class="string">''</span>)</span><br><span class="line">        <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chengyu</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        path = pathlib.PurePath(__file__)</span><br><span class="line">        path = path.parent.joinpath(<span class="string">'chengyu.text'</span>)</span><br><span class="line">        self.dictpath = str(path) </span><br><span class="line">        self.chengyu = set()</span><br><span class="line">        <span class="keyword">with</span> open(self.dictpath, <span class="string">'rt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                self.chengyu.add(line.strip())</span><br><span class="line">        </span><br><span class="line">        self.answers = list()</span><br><span class="line">        self.ask_string = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;'和':[1,8], '我':[11]&#125;</span></span><br><span class="line">        self.char_indexs_dict = dict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;1:'和', 8:'和', 11:'我'&#125;</span></span><br><span class="line">        self.index_char_dict = dict()</span><br><span class="line"></span><br><span class="line">        self.count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 自动提交答案的网络发送次数</span></span><br><span class="line">        self.auto_send_answers = list()</span><br><span class="line">        self.ack_true_answers = list()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 找到的的成语中各异字符为2个的答案数量：如 [真真假假] </span></span><br><span class="line">        self.answer_2chars_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;'中流砥柱':[1,9,21,25]&#125;</span></span><br><span class="line">        self.answer_indexs_dict = dict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># &#123;'中流砥柱':set('中流砥柱')&#125;</span></span><br><span class="line">        self.answer_charset_dict = dict()</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 查找到的错误答案</span></span><br><span class="line">        self.error_answers = []</span><br><span class="line"></span><br><span class="line">    <span class="comment"># ---------------------------------------------</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_answers_v2</span><span class="params">(self, ask_string)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">            在内存成语字典查找答案</span></span><br><span class="line"><span class="string">        '''</span>      </span><br><span class="line">        ask_set = set(ask_string)        </span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> enumerate(ask_string):</span><br><span class="line">            self.char_indexs_dict.setdefault(c, []).append(i)</span><br><span class="line">        self.index_char_dict = dict( zip(range(len(ask_string)), ask_string)) </span><br><span class="line"></span><br><span class="line">        max_count = (len(ask_string) / <span class="number">4</span> ) * <span class="number">1.5</span>         </span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.chengyu:</span><br><span class="line">            item_set = self.answer_charset_dict.setdefault(item, set(item))</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (item_set - ask_set):</span><br><span class="line">                self.answers.append(item)</span><br><span class="line">                <span class="keyword">if</span> len(item_set)&lt;<span class="number">4</span>:</span><br><span class="line">                    self.answer_2chars_count += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> len(self.answers) - self.answer_2chars_count &gt;= max_count :</span><br><span class="line">                    self.count = len(self.answers)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        self.count = len(self.answers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">auto_answer</span><span class="params">(self, flow)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> len(self.answers):</span><br><span class="line">            item = self.answers[<span class="number">0</span>]</span><br><span class="line">            answer_index = []</span><br><span class="line">            counter = collections.Counter(item)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> char, count <span class="keyword">in</span> counter.items():</span><br><span class="line">                <span class="keyword">if</span> self.char_indexs_dict[char]:</span><br><span class="line">                    <span class="keyword">if</span> len(self.char_indexs_dict[char]) &lt; count:</span><br><span class="line">                        self.error_answers.append(item)</span><br><span class="line">                        self.answers.remove(item)</span><br><span class="line">                        <span class="keyword">return</span></span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> c <span class="keyword">in</span> item:</span><br><span class="line">                <span class="keyword">if</span> self.char_indexs_dict[c]:</span><br><span class="line">                    index = self.char_indexs_dict[c][<span class="number">0</span>]  </span><br><span class="line">                    answer_index.append( str(index) )</span><br><span class="line">                    <span class="keyword">del</span> self.char_indexs_dict[c][<span class="number">0</span>]</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    <span class="keyword">pass</span></span><br><span class="line">              </span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> len(set(answer_index)) &lt; <span class="number">4</span>:</span><br><span class="line">                print(<span class="string">'算法有错误：&#123;&#125; 小于4'</span>.format(answer_index))</span><br><span class="line"></span><br><span class="line">            send_message = &#123;</span><br><span class="line">                <span class="string">'answer'</span>: item,</span><br><span class="line">                <span class="string">'answer_index'</span>: answer_index,</span><br><span class="line">                <span class="string">'type'</span>: <span class="string">'answer'</span></span><br><span class="line">            &#125;</span><br><span class="line">            mm = json.dumps(send_message)</span><br><span class="line">            <span class="comment"># -----------------------</span></span><br><span class="line">            print(mm)</span><br><span class="line">            <span class="comment"># ----------------------- </span></span><br><span class="line">            self.answer_indexs_dict[item] = answer_index</span><br><span class="line">            <span class="comment"># 向服务器发送消息</span></span><br><span class="line">            self.auto_send_answers.append(item)</span><br><span class="line">            self.answers.remove(item)</span><br><span class="line">            <span class="keyword">await</span> flow.send(mm)</span><br><span class="line">            <span class="comment"># time.sleep(0.5)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_worlds_to_memory</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">            把答案增加到内存字典中</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> len(self.ack_true_answers) &lt; len(m[<span class="string">'all_answer'</span>]):</span><br><span class="line">            <span class="keyword">for</span> answer <span class="keyword">in</span> m[<span class="string">'all_answer'</span>]:</span><br><span class="line">                self.chengyu.add(answer[<span class="string">'phrase'</span>])</span><br><span class="line"></span><br><span class="line">        print(<span class="string">'\033[1;31m 共收录&#123;&#125;个成语 \033[0m'</span>.format(len(self.chengyu)))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add_new_worlds_to_file</span><span class="params">(self, m)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">            把答案增加到文件中</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        <span class="keyword">if</span> len(self.ack_true_answers) &lt; len(m[<span class="string">'all_answer'</span>]):</span><br><span class="line">            <span class="keyword">with</span> open(self.dictpath, <span class="string">'wt'</span>) <span class="keyword">as</span> f:</span><br><span class="line">                l = list(self.chengyu)</span><br><span class="line">                l.sort()</span><br><span class="line">                <span class="keyword">for</span> item <span class="keyword">in</span> l:</span><br><span class="line">                    f.write(item)</span><br><span class="line">                    f.write(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_answers</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">'''</span></span><br><span class="line"><span class="string">            图形化、色彩化显示答案</span></span><br><span class="line"><span class="string">        '''</span></span><br><span class="line">        self.print_color(<span class="string">'共找到 &#123;&#125;/&#123;&#125; 个成语'</span>.format(self.count, len(self.ask_string)//<span class="number">4</span>))</span><br><span class="line">        self.print_color(<span class="string">'错误成语 &#123;&#125;'</span>.format(self.error_answers))</span><br><span class="line">        self.print_color(<span class="string">'共自动 &#123;&#125; 次提交：&#123;&#125;'</span>.format(len(self.auto_send_answers),self.auto_send_answers))</span><br><span class="line">        self.print_color(<span class="string">'已确认 &#123;&#125; 个提交：&#123;&#125;'</span>.format(len(self.ack_true_answers),self.ack_true_answers))</span><br><span class="line">        self.print_color(<span class="string">'问题 &#123;&#125;'</span>.format(self.ask_string))</span><br><span class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> self.answers:</span><br><span class="line">            self.print_color(item)</span><br><span class="line">            <span class="comment"># self.print_matrix(item)</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">not</span> self.answers) <span class="keyword">and</span> self.index_char_dict:</span><br><span class="line">            self.print_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_matrix</span><span class="params">(self, item = [])</span>:</span></span><br><span class="line">        chars_in_line = <span class="number">6</span></span><br><span class="line">        length = len(self.ask_string)        </span><br><span class="line"></span><br><span class="line">        lines = (length + chars_in_line - <span class="number">1</span>) // chars_in_line</span><br><span class="line">        PADDING = <span class="string">' '</span>*(lines * chars_in_line - length) </span><br><span class="line">        is_need_padding = len(PADDING) != <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.print_color(<span class="string">'--'</span>*chars_in_line)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">global</span> colors, White</span><br><span class="line">        <span class="keyword">for</span> i, c <span class="keyword">in</span> self.index_char_dict.items():</span><br><span class="line">            end = <span class="string">''</span></span><br><span class="line">            <span class="keyword">if</span> (i+<span class="number">1</span>) % chars_in_line == <span class="number">0</span> <span class="keyword">or</span> (i+<span class="number">1</span>) == length:</span><br><span class="line">                end = <span class="string">'\n'</span>                </span><br><span class="line">            </span><br><span class="line">            color = White</span><br><span class="line">            <span class="keyword">if</span> c <span class="keyword">in</span> item:                    </span><br><span class="line">                color = colors[item.index(c)]</span><br><span class="line"></span><br><span class="line">            line, first = divmod(i, chars_in_line)</span><br><span class="line">            <span class="keyword">if</span> is_need_padding <span class="keyword">and</span> first == <span class="number">0</span> <span class="keyword">and</span> (line + <span class="number">1</span> == lines):</span><br><span class="line">                c = PADDING + c </span><br><span class="line"></span><br><span class="line">            self.print_color(c, end=end, color=color)</span><br><span class="line"></span><br><span class="line">        self.print_color(<span class="string">'--'</span>*chars_in_line)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">print_color</span><span class="params">(self, message, end=<span class="string">'\n'</span>, color=Red)</span>:</span></span><br><span class="line">        print(<span class="string">'&#123;&#125;&#123;&#125;\033[0m'</span>.format(color, message), end=end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reset_data_to_init</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.ask_string = <span class="string">''</span></span><br><span class="line">        self.answers.clear()</span><br><span class="line">        self.index_char_dict.clear()</span><br><span class="line"></span><br><span class="line">        self.count = <span class="number">0</span>        </span><br><span class="line">        self.answer_2chars_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">        self.answer_indexs_dict.clear()</span><br><span class="line">        self.char_indexs_dict.clear()</span><br><span class="line">        self.error_answers.clear()</span><br><span class="line">        self.ack_true_answers.clear()</span><br><span class="line">        self.auto_send_answers.clear()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chengyu_auto_answer</span><span class="params">(user: QuXiaoChuUser)</span>:</span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    成语消消乐自动答题</span></span><br><span class="line"><span class="string">    wss://king.hddgood.com/websock_m/websock_message?uid=472251&amp;gameid=G15-3232777&amp;token=JSdLVVRRV0ZCH0INUlYNchcDUlc=</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    result = user.game_chengyu_join_game(g_rank)</span><br><span class="line">    <span class="keyword">if</span> result[<span class="string">'success'</span>]:</span><br><span class="line">        gameid = result[<span class="string">'result'</span>][<span class="string">'gameid'</span>]</span><br><span class="line">        url = <span class="string">'wss://king.hddgood.com/websock_m/websock_message?uid=&#123;&#125;&amp;gameid=&#123;&#125;&amp;token=&#123;&#125;'</span></span><br><span class="line">        url = url.format(user.uid, gameid, user.token_header)</span><br><span class="line">        print(url)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">import</span> asyncio</span><br><span class="line">        <span class="keyword">import</span> websockets</span><br><span class="line"></span><br><span class="line">        <span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">chengyu</span><span class="params">()</span>:</span></span><br><span class="line">            <span class="keyword">async</span> <span class="keyword">with</span> websockets.connect(url) <span class="keyword">as</span> websocket:</span><br><span class="line">                print(<span class="string">'连接成功'</span>)</span><br><span class="line">                <span class="keyword">global</span> chengyu</span><br><span class="line">                live = <span class="literal">True</span></span><br><span class="line">                count = <span class="number">0</span></span><br><span class="line">                <span class="keyword">while</span> live:</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> count % <span class="number">10</span> == <span class="number">0</span>:</span><br><span class="line">                        keeplive = json.dumps(&#123;<span class="string">"type"</span>:<span class="string">"keepalive"</span>&#125;)</span><br><span class="line">                        <span class="keyword">await</span> websocket.send(keeplive)</span><br><span class="line">                        print(<span class="string">'send keeplive'</span>)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># await asyncio.sleep(0.5)                    </span></span><br><span class="line">                    count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">                    m = <span class="keyword">await</span> websocket.recv()</span><br><span class="line">                    print(<span class="string">f"\n<span class="subst">&#123;m&#125;</span>\n"</span>)</span><br><span class="line"></span><br><span class="line">                    m = json.loads(m)</span><br><span class="line">                    message_type = m[<span class="string">'type'</span>]</span><br><span class="line">                    <span class="keyword">if</span> m.get(<span class="string">'ask_string'</span>):</span><br><span class="line">                        chengyu.ask_string = m[<span class="string">'ask_string'</span>]        </span><br><span class="line">                        <span class="comment"># 计算答案</span></span><br><span class="line">                        chengyu.find_answers_v2(chengyu.ask_string)</span><br><span class="line"></span><br><span class="line">                    <span class="keyword">if</span> message_type == <span class="string">'answer'</span>:</span><br><span class="line">                        chengyu.answer_indexs_dict[m[<span class="string">'answer'</span>]] = m[<span class="string">'answer_index'</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 删除已回答正确的答案</span></span><br><span class="line">                    <span class="keyword">if</span> m.get(<span class="string">'ack'</span>) == <span class="number">1</span>:</span><br><span class="line"></span><br><span class="line">                        answer = m[<span class="string">'answer'</span>]</span><br><span class="line">                        chengyu.ack_true_answers.append(answer)</span><br><span class="line">                        answer_index = chengyu.answer_indexs_dict.get(answer,[])</span><br><span class="line">                        <span class="keyword">for</span> i <span class="keyword">in</span> answer_index:</span><br><span class="line">                            chengyu.index_char_dict[int(i)] = <span class="string">'  '</span></span><br><span class="line">                        <span class="keyword">try</span>:</span><br><span class="line">                            chengyu.answers.remove(m[<span class="string">'answer'</span>])</span><br><span class="line">                        <span class="keyword">except</span>:</span><br><span class="line">                            <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 自动答题</span></span><br><span class="line">                    <span class="keyword">await</span> chengyu.auto_answer(websocket)</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 显示答案</span></span><br><span class="line">                    <span class="keyword">if</span> len(chengyu.ask_string):</span><br><span class="line">                        chengyu.print_answers()</span><br><span class="line"></span><br><span class="line">                    </span><br><span class="line">                    <span class="keyword">if</span> message_type == <span class="string">'game_result'</span>:</span><br><span class="line">                        live = <span class="literal">False</span></span><br><span class="line">                        <span class="comment"># 把答案增加到内存字典中</span></span><br><span class="line">                        chengyu.add_new_worlds_to_memory(m)</span><br><span class="line"></span><br><span class="line">                        chengyu.add_new_worlds_to_file(m) </span><br><span class="line"></span><br><span class="line">                        chengyu.reset_data_to_init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="comment"># 其它解析</span></span><br><span class="line">                        <span class="keyword">for</span> item <span class="keyword">in</span> m[<span class="string">'scores'</span>]:</span><br><span class="line">                            <span class="keyword">if</span> str(item[<span class="string">'uid'</span>]) == user.uid:</span><br><span class="line">                                <span class="keyword">global</span> g_rank</span><br><span class="line">                                g_rank = item[<span class="string">'rank'</span>] </span><br><span class="line"></span><br><span class="line">                        print(<span class="string">'\033[1;31m 获得金币: &#123;&#125; Rank: &#123;&#125;\033[0m'</span>.format(m[<span class="string">'coin'</span>], g_rank))</span><br><span class="line"></span><br><span class="line">                print(<span class="string">'\033[1;31m 游戏结束 \033[0m'</span>)            </span><br><span class="line"></span><br><span class="line">        asyncio.get_event_loop().run_until_complete(chengyu())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">genUsers</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">yield</span> QuXiaoChuUser(UUID_zxg, A_Token_Header_zxg, Cookie_zxg)</span><br><span class="line"></span><br><span class="line">g_rank = <span class="number">15</span></span><br><span class="line">chengyu = Chengyu()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> user <span class="keyword">in</span> genUsers():</span><br><span class="line"></span><br><span class="line">        start_time = time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime())</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> range(<span class="number">20</span>):   </span><br><span class="line">            chengyu_auto_answer(user)</span><br><span class="line">            time.sleep(<span class="number">1</span>)</span><br><span class="line">        print(<span class="string">'开始时间 '</span>, start_time)</span><br><span class="line">        print(<span class="string">'结束时间 '</span>, time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))</span><br></pre></td></tr></table></figure><p><code>chengyu.text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">一劳永逸</span><br><span class="line">一掷千金</span><br><span class="line">一曝十寒</span><br><span class="line">一石二鸟</span><br><span class="line">一筹莫展</span><br><span class="line">一落千丈</span><br><span class="line">一衣带水</span><br><span class="line">一语破的</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p><strong>注意：</strong><br><strong><code>chengyu.text</code>与<code>chengyu-auto.py</code>放在同一目录下</strong><br><strong><code>chengyu.text</code>收集约1926个成语，98%能找到全部答案</strong></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程</a></li><li><a href="https://pypi.org/project/websockets/" target="_blank" rel="noopener">https://pypi.org/project/websockets/</a></li></ul><p>楼主的<code>趣消除App</code>系列文章</p><ol><li><a href="https://www.52pojie.cn/thread-923040-1-1.html" target="_blank" rel="noopener">趣消除App自动化 - 签到and作战休息区</a></li><li><a href="https://www.jianshu.com/p/508c4169272d" target="_blank" rel="noopener">趣消除App自动化 - 成语消消乐-半自动化</a></li><li><a href="https://www.jianshu.com/p/ac3add6cb1a1" target="_blank" rel="noopener">趣消除App自动化 - 成语消消乐-全自动化</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;趣消除App自动化-成语消消乐-全自动化&quot;&gt;&lt;a href=&quot;#趣消除App自动化-成语消消乐-全自动化&quot; class=&quot;headerlink&quot; title=&quot;趣消除App自动化 - 成语消消乐-全自动化&quot;&gt;&lt;/a&gt;趣消除App自动化 - 成语消消乐-全自动化&lt;/h1&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://www.jianshu.com/p/508c4169272d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;趣消除App自动化 - 成语消消乐-半自动化&lt;/a&gt;&lt;br&gt;这篇文章实现了&lt;code&gt;成语消消乐&lt;/code&gt;的半自动化：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;用户点击开始一局游戏&lt;/li&gt;
&lt;li&gt;代码自动答题&lt;/li&gt;
&lt;li&gt;对代码没有找到的成语，用户自己点击成语赢得游戏&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;这篇文章的目的是全自动化：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;代码自动开始一局游戏&lt;/li&gt;
&lt;li&gt;代码自动答题&lt;/li&gt;
&lt;li&gt;对没有全部找到的，放弃这局：等待对方赢得游戏；&lt;/li&gt;
&lt;li&gt;开始下一局游戏&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>趣消除App自动化-成语消消乐-半自动化</title>
    <link href="http://yoursite.com/2019/09/29/%E6%88%90%E8%AF%AD%E6%B6%88%E6%B6%88%E4%B9%90-%E5%8D%8A%E8%87%AA%E5%8A%A8%E5%8C%96/"/>
    <id>http://yoursite.com/2019/09/29/成语消消乐-半自动化/</id>
    <published>2019-09-29T08:23:46.000Z</published>
    <updated>2019-12-26T09:24:35.388Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="目标"><a href="#目标" class="headerlink" title="目标"></a>目标</h2><p>做为一个程序员，已成<code>中年油腻大叔</code>了？那怎么行，来<code>趣消除App</code>、<code>扶我起来学数学App</code>的<code>成语消消乐</code>游戏battle下</p><p>做为已毕业十几年的理科生，在这个游戏中的优势肯定不是成语容量，而是工作专业技能 – 上代码</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>App: <code>趣消除App</code>iOS版本、<code>扶我起来学数学App</code>版本<br>工具: mitmproxy、python、Charles<br>背景知识：mitmproxy、python、抓包</p><a id="more"></a><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>游戏界面上呈现的：<br><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaa8f83tbgj30xc0tn0vl.jpg" alt="App游戏界面"></p><p>网络呈现：<br>游戏是通过websocket协议来传输json格式的字符串，举<code>asking</code>消息如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;ask_string&quot;: &quot;步不之来疏笔口平去重学青字斟浅之论暗明尊易伐道不云句来刊酌诛才师&quot;,</span><br><span class="line">  &quot;type&quot;: &quot;asking&quot;,</span><br><span class="line">  &quot;scores&quot;: [</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;nick&quot;: &quot;吕耀辉&quot;,</span><br><span class="line">      ....</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      &quot;nick&quot;: &quot;xxxx&quot;,</span><br><span class="line">      ......</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成语答案：<code>answer</code>消息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;answer&quot;: &quot;口诛笔伐&quot;,</span><br><span class="line">  &quot;answer_index&quot;: [</span><br><span class="line">    &quot;6&quot;,</span><br><span class="line">    &quot;29&quot;,</span><br><span class="line">    &quot;5&quot;,</span><br><span class="line">    &quot;21&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;type&quot;: &quot;answer&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>目的是把上面的<code>&quot;ask_string&quot;: &quot;步不之来疏笔口平去重学青字斟浅之论暗明尊易伐道不云句来刊酌诛才师&quot;</code>解析为一个个成语</p><h4 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h4><p>写2个文件：<code>chengyu_mitm.py</code>[代码文件]、<code>chengyu.text</code>[数据文件]</p><ul><li><code>chengyu_mitm.py</code>从<code>asking</code>消息里解析出<code>ask_string</code>到<code>chengyu.text</code>文件里查找是否包含相应的成语</li><li>如果包含成语，图形化、格式化显示结果</li><li><code>chengyu.text</code>文件刚开始是空的；在每局游戏结束时，游戏都会发送<code>game_result</code>消息给我们，里面有这局游戏的答案成语，把这些成语写到文件中</li><li>玩的局数越多，<code>chengyu.text</code>文件包含的成语越多，查找到答案的可能性越大</li></ul><p>所以我们只要关注：<code>asking</code>消息、<code>game_result</code>消息<br>如果要程序回复答案，可以关注下<code>answer</code>消息[客户端发给服务器的]</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p><code>chengyu_mitm.py</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import time</span><br><span class="line">import collections</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">&gt; mitmdump -s chengyu_mitm.py &apos;~u websock_m/websock_message&apos;</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">Red = &apos;\033[0;31m&apos;</span><br><span class="line">Green = &apos;\033[0;32m&apos;</span><br><span class="line">Yellow = &apos;\033[0;33m&apos;</span><br><span class="line">Blue = &apos;\033[0;34m&apos;</span><br><span class="line">Purple = &apos;\033[0;35m&apos;</span><br><span class="line">Cyan = &apos;\033[0;36m&apos;</span><br><span class="line">White = &apos;\033[0;37m&apos;</span><br><span class="line"></span><br><span class="line">colors = &#123;</span><br><span class="line">    0:Red,</span><br><span class="line">    1:Purple,</span><br><span class="line">    2:Yellow,</span><br><span class="line">    3:Blue,</span><br><span class="line">    4:White,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Chengyu(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.dictpath = &apos;/Users/zhoujie/chengyu.text&apos;</span><br><span class="line">        self.chengyu = set()</span><br><span class="line">        with open(self.dictpath, &apos;rt&apos;) as f:</span><br><span class="line">            for line in f.readlines():</span><br><span class="line">                self.chengyu.add(line.strip())</span><br><span class="line"></span><br><span class="line">        self.answers = list()</span><br><span class="line">        self.ask_string = &apos;&apos;</span><br><span class="line"></span><br><span class="line">        # &#123;&apos;和&apos;:[1,8], &apos;我&apos;:[11]&#125;</span><br><span class="line">        self.char_indexs_dict = dict()</span><br><span class="line"></span><br><span class="line">        # &#123;1:&apos;和&apos;, 8:&apos;和&apos;, 11:&apos;我&apos;&#125;</span><br><span class="line">        self.index_char_dict = dict()</span><br><span class="line"></span><br><span class="line">        self.count = 0</span><br><span class="line"></span><br><span class="line">        # 自动提交答案的网络发送次数</span><br><span class="line">        self.auto_send_count = 0</span><br><span class="line"></span><br><span class="line">        # 自动发送的成语</span><br><span class="line">        self.auto_send_list = list()</span><br><span class="line"></span><br><span class="line">        # 服务器确定正确的成语</span><br><span class="line">        self.ack_true_list = list()</span><br><span class="line"></span><br><span class="line">        # &#123;&apos;中流砥柱&apos;:[1,9,21,25]&#125;</span><br><span class="line">        self.answer_indexs_dict = dict()</span><br><span class="line"></span><br><span class="line">        # 查找到的错误答案</span><br><span class="line">        self.error_answers = []</span><br><span class="line"></span><br><span class="line">        # 玩了多少局</span><br><span class="line">        self.play_times = 0</span><br><span class="line"></span><br><span class="line">        self.firt_auto_answer = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # General lifecycle</span><br><span class="line">    def load(self, loader):</span><br><span class="line">        ctx.log.info(&apos;\033[1;31mevent: load\033[0m&apos;)</span><br><span class="line"></span><br><span class="line">    def configure(self, updated):</span><br><span class="line">        ctx.log.info(&apos;\033[1;31mevent: configure\033[0m&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # Websocket lifecycle</span><br><span class="line">    def websocket_message(self, flow):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            Called when a WebSocket message is received from the client or</span><br><span class="line">            server. The most recent message will be flow.messages[-1]. The</span><br><span class="line">            message is user-modifiable. Currently there are two types of</span><br><span class="line">            messages, corresponding to the BINARY and TEXT frame types.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">        ctx.log.info(&apos;\033[1;31m websocket_message \033[0m&apos;)</span><br><span class="line"></span><br><span class="line">        # get the latest message</span><br><span class="line">        message = flow.messages[-1]</span><br><span class="line"></span><br><span class="line">        # simply print the content of the message</span><br><span class="line">        ctx.log.info(&apos;&apos;)</span><br><span class="line">        ctx.log.info(message.content)</span><br><span class="line">        ctx.log.info(&apos;&apos;)</span><br><span class="line"></span><br><span class="line">        m = json.loads(message.content)</span><br><span class="line">        message_type = m[&apos;type&apos;]</span><br><span class="line">        if m.get(&apos;ask_string&apos;):</span><br><span class="line">            self.ask_string = m[&apos;ask_string&apos;]</span><br><span class="line">            # 计算答案</span><br><span class="line">            self.find_answers_v2(self.ask_string)</span><br><span class="line">            self.play_times += 1</span><br><span class="line"></span><br><span class="line">        # &#123;&quot;answer&quot;: &quot;\u957f\u9a71\u76f4\u5165&quot;, &quot;answer_index&quot;: [&quot;0&quot;, &quot;20&quot;, &quot;43&quot;, &quot;41&quot;], &quot;type&quot;: &quot;answer&quot;&#125;</span><br><span class="line">        if message_type == &apos;answer&apos;:</span><br><span class="line">            self.answer_indexs_dict[m[&apos;answer&apos;]] = m[&apos;answer_index&apos;]</span><br><span class="line"></span><br><span class="line">        # 删除已回答正确的答案</span><br><span class="line">        ack = False</span><br><span class="line"></span><br><span class="line">        # &#123;&quot;answer&quot;:&quot;长驱直入&quot;,&quot;type&quot;:&quot;answer_ack&quot;,&quot;seq&quot;:0,&quot;ack&quot;:1&#125;</span><br><span class="line">        if m.get(&apos;ack&apos;) == 1:</span><br><span class="line"></span><br><span class="line">            answer = m[&apos;answer&apos;]</span><br><span class="line">            self.ack_true_list.append(answer)</span><br><span class="line">            answer_index = self.answer_indexs_dict.get(answer,[])</span><br><span class="line">            for i in answer_index:</span><br><span class="line">                self.index_char_dict[int(i)] = &apos;  &apos;</span><br><span class="line"></span><br><span class="line">            for c,i in zip(answer,answer_index):                </span><br><span class="line">                indexs = self.char_indexs_dict[c]</span><br><span class="line">                indexs.remove(int(i))</span><br><span class="line"></span><br><span class="line">            try:</span><br><span class="line">                ack = True</span><br><span class="line">                self.answers.remove(m[&apos;answer&apos;])</span><br><span class="line">            except:</span><br><span class="line">                pass</span><br><span class="line"></span><br><span class="line">        if message_type == &apos;answer_ack&apos; and m.get(&apos;ack&apos;) == 0:</span><br><span class="line">            pass</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        # 自动答题</span><br><span class="line">        if message_type == &apos;answer_ack&apos; or self.firt_auto_answer:</span><br><span class="line">            </span><br><span class="line">            self.auto_answer(flow)</span><br><span class="line"></span><br><span class="line">        # 显示答案</span><br><span class="line">        if len(self.ask_string):</span><br><span class="line">            self.print_answers()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        if message_type == &apos;game_result&apos;:</span><br><span class="line">            # 把答案增加到内存字典中</span><br><span class="line">            self.__add_new_worlds_to_memory(m)</span><br><span class="line"></span><br><span class="line">            self.reset_data_to_init()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def websocket_end(self, flow):</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">            A websocket connection has ended.</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        ctx.log.info(&apos;\033[1;31m websocket_end \033[0m&apos;)</span><br><span class="line"></span><br><span class="line">        self.reset_data_to_init()</span><br><span class="line"></span><br><span class="line">        if self.play_times % 5 == 0:</span><br><span class="line">            with open(self.dictpath, &apos;wt&apos;) as f:</span><br><span class="line">                l = list(self.chengyu)</span><br><span class="line">                l.sort()</span><br><span class="line">                for item in l:</span><br><span class="line">                    f.write(item)</span><br><span class="line">                    f.write(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # ---------------------------------------------</span><br><span class="line">    def find_answers_v2(self, ask_string):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">            在内存成语字典查找答案</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        ask_set = set(ask_string)</span><br><span class="line">        for i, c in enumerate(ask_string):</span><br><span class="line">            self.char_indexs_dict.setdefault(c, []).append(i)</span><br><span class="line">        self.index_char_dict = dict( zip(range(len(ask_string)), ask_string))</span><br><span class="line"></span><br><span class="line">        used_chars = set()</span><br><span class="line">        # 找到的的成语中各异字符为2个的答案数量：如 [真真假假]</span><br><span class="line">        answer_2chars_count = 0</span><br><span class="line">        max_count = len(ask_string) / 4</span><br><span class="line">        for item in self.chengyu:</span><br><span class="line">            item_set = set(item)</span><br><span class="line">            if not (item_set - ask_set):</span><br><span class="line">                self.answers.append(item)</span><br><span class="line">                used_chars.update(item_set)</span><br><span class="line">                if len(item_set)&lt;4:</span><br><span class="line">                    answer_2chars_count += 1</span><br><span class="line">                if len(self.answers) - answer_2chars_count &gt;= max_count and used_chars &gt;= ask_set:</span><br><span class="line">                    self.count = len(self.answers)</span><br><span class="line">                    return</span><br><span class="line">        self.count = len(self.answers)</span><br><span class="line"></span><br><span class="line">    def auto_answer(self, flow):</span><br><span class="line">        while len(self.answers) &gt; 0:</span><br><span class="line">            item = self.answers[0]</span><br><span class="line">            answer_index = []</span><br><span class="line">            counter = collections.Counter(item)</span><br><span class="line"></span><br><span class="line">            b_continue = False</span><br><span class="line">            for char, count in counter.items():</span><br><span class="line">                if len(self.char_indexs_dict[char]) &lt; count:</span><br><span class="line">                    self.error_answers.append(item)</span><br><span class="line">                    self.answers.remove(item)</span><br><span class="line">                    b_continue = True</span><br><span class="line">                    break # break for</span><br><span class="line"></span><br><span class="line">            if b_continue:</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            char_index = &#123;&#125;</span><br><span class="line">            for c in item:                </span><br><span class="line">                x = char_index.get(c, 0)</span><br><span class="line">                index = self.char_indexs_dict[c][x]</span><br><span class="line">                answer_index.append( str(index) )</span><br><span class="line">                char_index[c] = x+1</span><br><span class="line"></span><br><span class="line">            if len(set(answer_index)) &lt; 4:</span><br><span class="line">                ctx.log.error(f&apos;?算法有错误：&#123;answer_index&#125; 小于4&apos;)</span><br><span class="line">                continue</span><br><span class="line"></span><br><span class="line">            send_message = &#123;</span><br><span class="line">                &apos;answer&apos;: item,</span><br><span class="line">                &apos;answer_index&apos;: answer_index,</span><br><span class="line">                &apos;type&apos;: &apos;answer&apos;</span><br><span class="line">            &#125;</span><br><span class="line">            mm = json.dumps(send_message)</span><br><span class="line">            # -----------------------</span><br><span class="line">            print(mm)</span><br><span class="line">            # -----------------------</span><br><span class="line">            self.answer_indexs_dict[item] = answer_index</span><br><span class="line">            # 向服务器发送消息</span><br><span class="line">            if not flow.ended and not flow.error:</span><br><span class="line">                self.firt_auto_answer = False</span><br><span class="line">                self.auto_send_count += 1</span><br><span class="line">                self.auto_send_list.append(item)</span><br><span class="line">                self.answers.remove(item)</span><br><span class="line">                time.sleep(1.5)</span><br><span class="line">                flow.inject_message(flow.server_conn, mm)</span><br><span class="line">                break</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def __add_new_worlds_to_memory(self, m):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">            把答案增加到内存字典中</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        for answer in m[&apos;all_answer&apos;]:</span><br><span class="line">            self.chengyu.add(answer[&apos;phrase&apos;])</span><br><span class="line"></span><br><span class="line">        ctx.log.info(&apos;\033[1;31m 共收录&#123;&#125;个成语 \033[0m&apos;.format(len(self.chengyu)))</span><br><span class="line">        ctx.log.info(f&apos;\033[1;31m 共玩了 &#123;self.play_times&#125; 局\033[0m&apos;)</span><br><span class="line"></span><br><span class="line">    def print_answers(self):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">            图形化、色彩化显示答案</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        self.print_color(self.ask_string)</span><br><span class="line">        self.print_color(&apos;共找到 &#123;&#125;/&#123;&#125; 个成语&apos;.format(self.count, len(self.ask_string)//4))</span><br><span class="line">        self.print_color(&apos;错误成语 &#123;&#125;&apos;.format(self.error_answers))</span><br><span class="line">        self.print_color(&apos;共自动 &#123;&#125; 次提交&apos;.format(self.auto_send_count))</span><br><span class="line">        self.print_color(&apos;自动&#123;:2&#125;个：&#123;&#125;&apos;.format(len(self.auto_send_list),self.auto_send_list))</span><br><span class="line">        self.print_color(&apos;确认&#123;:2&#125;个：&#123;&#125;&apos;.format(len(self.ack_true_list),self.ack_true_list))</span><br><span class="line">        for item in self.answers:</span><br><span class="line">            self.print_color(item)</span><br><span class="line">            self.print_matrix(item)</span><br><span class="line"></span><br><span class="line">        if (not self.answers) and self.index_char_dict:</span><br><span class="line">            self.print_matrix()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def print_matrix(self, item = []):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        item: &apos;腊尽春回&apos; or []</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        chars_in_line = 6</span><br><span class="line">        length = len(self.ask_string)</span><br><span class="line"></span><br><span class="line">        lines = (length + chars_in_line - 1) // chars_in_line</span><br><span class="line">        PADDING = &apos; &apos;*(lines * chars_in_line - length)</span><br><span class="line">        is_need_padding = len(PADDING) != 0</span><br><span class="line"></span><br><span class="line">        global colors, White</span><br><span class="line">        </span><br><span class="line">        self.print_color(&apos;--&apos;*chars_in_line)</span><br><span class="line"></span><br><span class="line">        for i, c in self.index_char_dict.items():</span><br><span class="line">            end = &apos;&apos;</span><br><span class="line">            if (i+1) % chars_in_line == 0 or (i+1) == length:</span><br><span class="line">                end = &apos;\n&apos;</span><br><span class="line"></span><br><span class="line">            color = White</span><br><span class="line">            if c in item:</span><br><span class="line">                color = colors[item.index(c)]</span><br><span class="line"></span><br><span class="line">            line, first = divmod(i, chars_in_line)</span><br><span class="line">            if is_need_padding and first == 0 and (line + 1 == lines):</span><br><span class="line">                c = PADDING + c</span><br><span class="line"></span><br><span class="line">            self.print_color(c, end=end, front_color=color)</span><br><span class="line"></span><br><span class="line">        self.print_color(&apos;--&apos;*chars_in_line)</span><br><span class="line"></span><br><span class="line">    def print_color(self, message, end=&apos;\n&apos;, front_color=Red):</span><br><span class="line">        print(f&apos;&#123;front_color&#125;&#123;message&#125;\033[0m&apos;, end=end)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def reset_data_to_init(self):</span><br><span class="line">        self.ask_string = &apos;&apos;</span><br><span class="line">        self.answers.clear()</span><br><span class="line">        self.index_char_dict.clear()</span><br><span class="line"></span><br><span class="line">        self.count = 0</span><br><span class="line">        self.auto_send_count = 0</span><br><span class="line"></span><br><span class="line">        self.answer_indexs_dict.clear()</span><br><span class="line">        self.char_indexs_dict.clear()</span><br><span class="line">        self.error_answers.clear()</span><br><span class="line">        self.ack_true_list.clear()</span><br><span class="line">        self.auto_send_list.clear()</span><br><span class="line">        self.firt_auto_answer = True</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Chengyu()</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    c = Chengyu()</span><br><span class="line"></span><br><span class="line">    ask_string = &apos;腊见家义降德若功赎仁判悲生升道肘两身乐极尽立罪春命明回人捉襟性暗&apos;</span><br><span class="line">    ask_string = &apos;来戴恶自唇而怙到生二不马亡竹锲寒擒梅香听寒星圆其十贼其鸟舍悛口一自不月披青擒王说曝手然擒一齿齿石&apos;</span><br><span class="line">    ask_string = &apos;侧拨扮相大拔挈然纲打富提敲如涌门见助济行踽全弄轩责刀危踽击贫独波可云岌日班思求斧乔备泉领旁岌劫装&apos;</span><br><span class="line">    c.ask_string = ask_string</span><br><span class="line">    c.find_answers_v2(ask_string)</span><br><span class="line">    print(c.answers)</span><br><span class="line">    c.print_answers()</span><br></pre></td></tr></table></figure><p><code>chengyu.text</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">一劳永逸</span><br><span class="line">一掷千金</span><br><span class="line">一曝十寒</span><br><span class="line">一石二鸟</span><br><span class="line">一筹莫展</span><br><span class="line">一落千丈</span><br><span class="line">一衣带水</span><br><span class="line">一语破的</span><br></pre></td></tr></table></figure><p><strong>注意：<code>self.dictpath = &#39;/Users/xxx/chengyu.text&#39;</code> 一定要修改成你自己的chengyu.text所在路径</strong></p><h4 id="运行效果"><a href="#运行效果" class="headerlink" title="运行效果"></a>运行效果</h4><p><img src="https://tva1.sinaimg.cn/large/006tNbRwly1gaa8ni4a5fj30yg0liacl.jpg" alt="运行效果"></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程</a></li><li><a href="https://kaazing.com/demos/" target="_blank" rel="noopener">https://kaazing.com/demos/</a></li><li><a href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/simple/websocket_messages.py" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/blob/master/examples/simple/websocket_messages.py</a></li><li><a href="https://github.com/mitmproxy/mitmproxy/blob/master/examples/complex/websocket_inject_message.py" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy/blob/master/examples/complex/websocket_inject_message.py</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;目标&quot;&gt;&lt;a href=&quot;#目标&quot; class=&quot;headerlink&quot; title=&quot;目标&quot;&gt;&lt;/a&gt;目标&lt;/h2&gt;&lt;p&gt;做为一个程序员，已成&lt;code&gt;中年油腻大叔&lt;/code&gt;了？那怎么行，来&lt;code&gt;趣消除App&lt;/code&gt;、&lt;code&gt;扶我起来学数学App&lt;/code&gt;的&lt;code&gt;成语消消乐&lt;/code&gt;游戏battle下&lt;/p&gt;&lt;p&gt;做为已毕业十几年的理科生，在这个游戏中的优势肯定不是成语容量，而是工作专业技能 – 上代码&lt;/p&gt;&lt;h2 id=&quot;测试环境&quot;&gt;&lt;a href=&quot;#测试环境&quot; class=&quot;headerlink&quot; title=&quot;测试环境&quot;&gt;&lt;/a&gt;测试环境&lt;/h2&gt;&lt;p&gt;App: &lt;code&gt;趣消除App&lt;/code&gt;iOS版本、&lt;code&gt;扶我起来学数学App&lt;/code&gt;版本&lt;br&gt;工具: mitmproxy、python、Charles&lt;br&gt;背景知识：mitmproxy、python、抓包&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>mitmproxy与charles的抓包应用</title>
    <link href="http://yoursite.com/2019/09/29/mitmproxy-and-charles-use/"/>
    <id>http://yoursite.com/2019/09/29/mitmproxy-and-charles-use/</id>
    <published>2019-09-29T08:14:57.000Z</published>
    <updated>2019-11-21T03:43:11.973Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>mitmproxy是命令行界面，不太方便查看，自己遇到的问题有：</p><ul><li>在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情</li><li>json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文</li><li>不知道怎么复制界面中显示的内容</li></ul><p>Charles的编程能力弱</p><p>把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>电脑和手机都连接到同一个Wi-Fi, 比如TP_LINK_629F<br>电脑: ip=192.168.1.100; 运行着Charles、mitmproxy<br>Charles: 192.168.1.100:8888<br>mitmproxy: 192.168.1.100:8080<br>手机: 设置代理地址为Charles的地址192.168.1.100:8888</p><p>Charles - External Proxy Settings功能开启：</p><ul><li>Web Proxy(HTTP) - Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li><li>Secure Web Proxy(HTTPS) - Secure Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li></ul><table><thead><tr><th align="center">手机</th></tr></thead><tbody><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2bq3vglj30u01hcaak.jpg" alt></td></tr><tr><td align="center"></td></tr><tr><td align="center">Charles - External Proxy Settings</td></tr><tr><td align="center"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2ks0wauj31am0qe76x.jpg" alt></td></tr></tbody></table><h2 id="补充-mitmproxy设置上游代理"><a href="#补充-mitmproxy设置上游代理" class="headerlink" title="补充: mitmproxy设置上游代理"></a>补充: mitmproxy设置上游代理</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --mode=upstream:http://127.0.0.1:8888 --ssl-insecure</span><br></pre></td></tr></table></figure><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>应用：自动生成接口的python代码</p><p>以<code>趣头条App</code>为例：<br>阅读得积分的接口为: <code>https://api.1sapp.com/readtimer/report</code><br>自动生成的代码大约如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def readtimer_report(self):</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">&apos;User-Agent&apos;: &apos;qukan_android;retrofit/2.4.0 okhttp/3.11.0;os/7.0 M5 Note Meizu;device/862546036581345;version/3.9.41.000.0904.1121;channel/012&apos;,</span><br><span class="line">&apos;Host&apos;: &apos;api.1sapp.com&apos;,</span><br><span class="line">&apos;Accept-Encoding&apos;: &apos;gzip&apos;,</span><br><span class="line">&apos;Connection&apos;: &apos;keep-alive&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">&apos;qdata&apos;: &apos;NzVFNkE3Mjc0RjEzRkYwRTM5OTEzNjAyRUZBMDMzQTAuY0dGeVlXMGZPR0kyTldKalltTXRNVGczT1MwME9EZGlMVGszT0RBdE1EUmlOVEV3TWpOak9UazRIblpsY25OcGIyNGZNVEVlY0d4aGRHWnZjbTBmWVc1a2NtOXBaQjVsWXg4eC46LxvyIvgD62/T93SlANmywpigTwlOwcfCHe0iZ1D8mH1zpslt2JCRPdiHOj1M20bU0zDX0odUOBig6Kt51mheNJuQYeDvp15R8RSGTT3LR9s55nBCGvWyTLq+3pjEvkyERElR9E2I384/nHQR4iqxqv7LKQ4rBA0R6bNG8sksHqNl1izSbF87G/4/Qw5vVYcuNUfU0BM6vvIbsy2CTPWlJ51YCzadQZZLONuaYTpyhuOiUV4vnx6qkvpYDNp9XpPPjbXxJAb7fikqjWSdyx167hXDPzUkNZGndjZsv7kQANDkIk2Dm+g5YW1I49xnkOzJkmxvyrLevnsSb9S5fSEUEyfq0GlPHE0RRBeSjFxVltH1zdZraTtk13Z+MvA7HBYQONz/0OwyMnujc1Ety91uKh6YCCVEDvBO+RTOzoRDa3nlRo3FTo9OeRBsyL20qIP24977MMYXEoxinTuwNonipCjnjSYIrhOu6cyv7uxuLd6FxtmTsydawNGMPI/K+habIKXNUFsQMCUcAGhYpoKQJvkQqHEq6lPyZZzXDot1EsN6bsGj56xQdiuJZLMFyZaGNR6E9FmVlI0LAVT8ttVpOvs+5f08T0iMxMNb0VQk6DOySpYHp7EVjc9YFpPcVxj8aXvuTjoPkaNGhSKQ0fgBd8HVRLslcnzX0QLJkTuU7NQ9aili6m2M2hWvh/q8ghWrvtLT+izCiFNKHE+4GTC9J6jqgyjHsXkAjcOSBAaIXMQKnOd664hdoR2GqV+GAy95fc5zZCJ7EFvzmTbJQrpMOwW+Y2NvYPZtgjw1uJEyU7AR7nVw7VqMjPpCDYeWBWoQ1W4OjlXTqgBR4MIu1sTag6a+my/0hItf91SNa58zCN3YmE2NnsWwwiCC+ZP91moV/KqPwX3vMLKW4/3Vsziqe8gl&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    url = &apos;http://api.1sapp.com/readtimer/report&apos;</span><br><span class="line">    result = self._get(url, headers=headers, params=params, data=data)</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure><p>应用步骤：</p><ol><li>手机按上面环境设置好代理地址</li><li>在电脑上启动Charles，Charles按上面环境设置</li><li>在电脑上启动mitimproxy, 启动命令如下：<code>mitmproxy -s gen_code_mitm.py</code></li><li>文件gen_code_mitm.py内容参考下面</li><li>在手机<code>趣头条App</code>阅读文章或看视频一定时间</li><li>会在<code>~/Desktop/api/</code>目录下生成一个叫<code>readtimer_report.text</code></li><li>把<code>readtimer_report.text</code>的相应代码复制粘帖到<code>文件qu_tou_tiao.py</code>中</li><li>按需要修改自动生成的代码为希望的样子</li><li>运行<code>qu_tou_tiao.py</code></li></ol><p>注意：</p><ul><li><code>readtimer_report.text</code>的名字和所在目录是由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li><li><code>readtimer_report</code>方法名由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li><li>对body为复杂json格式的代码自动生成会有错误，有能力的自行修改</li><li><code>readtimer/report</code>这个接口自动生成的代码数据是不能重复获取积分的，这里只是演示</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s4idpz9gj31fa0u045o.jpg" alt></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件qu_tou_tiao.py: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">代码模板</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=&apos;%(asctime)s:%(message)s&apos;, datefmt=&apos;%m-%d %H:%M:%S&apos;, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">class User(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    def api_need_implement(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def _header(self):</span><br><span class="line">        return &#123;</span><br><span class="line">            &apos;User-Agent&apos;: &apos;&apos;,</span><br><span class="line">            &apos;Cookie&apos;:self.cookie</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _post(url, data=None, json=None, p=logging.warning, **kwargs):</span><br><span class="line">        res = requests.post(url, data=data, **kwargs)</span><br><span class="line">        result = res.text</span><br><span class="line">        p(res.json())</span><br><span class="line">        logging.info(&apos;&apos;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _get(url, params=None, p=logging.warning, **kwargs):</span><br><span class="line">        res = requests.get(url, params=params, **kwargs)</span><br><span class="line">        result = res.text</span><br><span class="line">        p(json.loads(result))</span><br><span class="line">        logging.info(&apos;&apos;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">def genUsers():</span><br><span class="line">    yield User()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for user in genUsers():</span><br><span class="line">        user.api_need_implement()</span><br></pre></td></tr></table></figure><p>文件gen_code_mitm.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">生成接口python代码</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&apos;__init__&apos;)</span><br><span class="line"></span><br><span class="line">        # 趣头条</span><br><span class="line">        urls = [</span><br><span class="line">            r&apos;taskcenter/getListV2&apos;,#tab页：任务</span><br><span class="line">            r&apos;readtimer/report&apos;,</span><br><span class="line">        ]</span><br><span class="line">        self.qu_tou_tiao = flowfilter.parse(&apos;|&apos;.join(urls)) </span><br><span class="line"></span><br><span class="line">        # 百度 - 全民小视频 </span><br><span class="line">        urls = [</span><br><span class="line">            r&apos;mvideo/api&apos;, # 每日签到</span><br><span class="line">        ]</span><br><span class="line">        self.quan_ming = flowfilter.parse(&apos;|&apos;.join(urls)) </span><br><span class="line"></span><br><span class="line">        self.flowfilters = [</span><br><span class="line">            self.qu_tou_tiao, </span><br><span class="line">            self.quan_ming,</span><br><span class="line">        ]      </span><br><span class="line"></span><br><span class="line">    def load(self, loader):</span><br><span class="line">        ctx.log.info(&apos;event: load&apos;)</span><br><span class="line"></span><br><span class="line">    def configure(self, updated):</span><br><span class="line">        ctx.log.info(&apos;event: configure&apos;)</span><br><span class="line"></span><br><span class="line">    def running(self):</span><br><span class="line">        ctx.log.info(&apos;event: running&apos;)</span><br><span class="line"></span><br><span class="line">    def done(self):</span><br><span class="line">        ctx.log.info(&apos;event: done&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if any( [ filter(flow) for filter in self.flowfilters ] ):</span><br><span class="line"></span><br><span class="line">            request: http.HTTPRequest = flow.request</span><br><span class="line"></span><br><span class="line">            parse_result = urlparse(request.url)</span><br><span class="line">            url_path = parse_result.path</span><br><span class="line"></span><br><span class="line">            function_name = re.sub(r&apos;[/-]&apos;,&apos;_&apos;, url_path).strip(&apos;_&apos;)</span><br><span class="line">            headers_code = self.headers_string(flow)</span><br><span class="line">            params_code = self.params_string(flow)</span><br><span class="line">            data_code = self.data_string(flow) </span><br><span class="line"></span><br><span class="line">            path = f&apos;&apos;&apos;/Users/zhoujie/Desktop/api/&#123;function_name&#125;.text&apos;&apos;&apos;  </span><br><span class="line">            with open(path, &apos;a&apos;) as f:</span><br><span class="line">                print(f&apos;&apos;&apos;# ---------------------&apos;&apos;&apos;,file=f)</span><br><span class="line"></span><br><span class="line">                code = f&apos;&apos;&apos;</span><br><span class="line">def &#123;function_name&#125;(self):</span><br><span class="line"></span><br><span class="line">    &#123;headers_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;params_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;data_code&#125;</span><br><span class="line"></span><br><span class="line">    url = &apos;&#123;request.scheme&#125;://&#123;request.pretty_host&#125;&#123;url_path&#125;&apos;</span><br><span class="line">    result = self._&#123;request.method.lower()&#125;(url, headers=headers, params=params, data=data)</span><br><span class="line">    return result</span><br><span class="line">                </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">                f.write(code)</span><br><span class="line"></span><br><span class="line">                print(f&apos;&apos;&apos;Response:&apos;&apos;&apos;,file=f)</span><br><span class="line">                print(f&apos;&apos;&apos;&#123;flow.response.text&#125;&apos;&apos;&apos;,file=f)</span><br><span class="line">                print(f&apos;&apos;&apos;# ---------------------\n\n&apos;&apos;&apos;,file=f)</span><br><span class="line"></span><br><span class="line">    def headers_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line">        for key,value in flow.request.headers.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line">        s = f&apos;&apos;&apos;headers = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def params_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line">        for key,value in flow.request.query.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line">        s = f&apos;&apos;&apos;params = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line">    def data_string(self, flow: http.HTTPFlow):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        Content-Type: application/x-www-form-urlencoded</span><br><span class="line">        Content-Type: application/json; charset=utf-8</span><br><span class="line">        Content-Type: text/plain;charset=utf-8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line"></span><br><span class="line">        # [urlencoded_form, multipart_form, plan, json]取其一</span><br><span class="line">        for key,value in flow.request.urlencoded_form.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line"></span><br><span class="line">        for key,value in flow.request.multipart_form.items():</span><br><span class="line">            key = key.decode(encoding=&apos;utf-8&apos;)</span><br><span class="line">            value = value.decode(encoding=&apos;utf-8&apos;) </span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line"></span><br><span class="line">        # Todo:复杂json数据还不能代码化</span><br><span class="line">        if &apos;application/json&apos; in flow.request.headers.get(&apos;content-type&apos;,&apos;&apos;):</span><br><span class="line">            d = json.loads(flow.request.text)</span><br><span class="line">            for key,value in d.items():</span><br><span class="line">                lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &#123;value&#125;,&quot;</span><br><span class="line">        </span><br><span class="line">        s = f&apos;&apos;&apos;data = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    GenCode()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;mitmproxy是命令行界面，不太方便查看，自己遇到的问题有：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情&lt;/li&gt;
&lt;li&gt;json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文&lt;/li&gt;
&lt;li&gt;不知道怎么复制界面中显示的内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Charles的编程能力弱&lt;/p&gt;&lt;p&gt;把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>Charles的应用</title>
    <link href="http://yoursite.com/2019/09/28/Charles%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/28/Charles的应用/</id>
    <published>2019-09-28T10:27:26.000Z</published>
    <updated>2019-09-29T08:18:45.603Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Rewrite应用"><a href="#Rewrite应用" class="headerlink" title="Rewrite应用"></a>Rewrite应用</h2><h3 id="案例01"><a href="#案例01" class="headerlink" title="案例01"></a>案例01</h3><p>问题：<code>今日头条极速版</code>App每天的<code>阅读推送文章</code>任务因为每天收到的推送很少，因而不能得很高的积分，怎样把普通文章的阅读变为推送文章的阅读呢？</p><p>思考：对比普通文章的阅读与推送文章的阅读发出的网络数据，找出差异</p><p>普通文章的阅读与推送文章的阅读达到奖励标准时，都用相同的接口<code>https://is.snssdk.com/score_task/v1/task/get_read_bonus/</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 普通阅读文章/视频</span><br><span class="line">https://is.snssdk.com/score_task/v1/task/get_read_bonus/?fp=xxx&amp;...&amp;group_id=6689697061983486472</span><br><span class="line"></span><br><span class="line"># 推送文章的阅读</span><br><span class="line">https://is.snssdk.com/score_task/v1/task/get_read_bonus/?fp=xxx&amp;...&amp;&amp;impression_type=push&amp;group_id=6689697061983486472</span><br></pre></td></tr></table></figure><p>对比上面的接口数据发现：<br>推送阅读只比普通阅读<strong>多出了impression_type=push</strong>的Query String</p><p>解决：用Charles的<code>Rewrite功能Add Query Param</code>来增加impression_type=push解决问题</p><p><img src="http://upload-images.jianshu.io/upload_images/281540-64acc9462bb437c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Add Query Param"></p><p>上面的get_read_bonus重写规则Export导出的get_read_bonus.xml文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos; ?&gt;</span><br><span class="line">&lt;?charles serialisation-version=&apos;2.0&apos; ?&gt;</span><br><span class="line">&lt;rewriteSet-array&gt;</span><br><span class="line">  &lt;rewriteSet&gt;</span><br><span class="line">    &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">    &lt;name&gt;get_read_bonus&lt;/name&gt;</span><br><span class="line">    &lt;hosts&gt;</span><br><span class="line">      &lt;locationPatterns&gt;</span><br><span class="line">        &lt;locationMatch&gt;</span><br><span class="line">          &lt;location&gt;</span><br><span class="line">            &lt;protocol&gt;https&lt;/protocol&gt;</span><br><span class="line">            &lt;host&gt;is.snssdk.com&lt;/host&gt;</span><br><span class="line">            &lt;path&gt;/score_task/v1/task/get_read_bonus/&lt;/path&gt;</span><br><span class="line">          &lt;/location&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/locationMatch&gt;</span><br><span class="line">      &lt;/locationPatterns&gt;</span><br><span class="line">    &lt;/hosts&gt;</span><br><span class="line">    &lt;rules&gt;</span><br><span class="line">      &lt;rewriteRule&gt;</span><br><span class="line">        &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">        &lt;ruleType&gt;8&lt;/ruleType&gt;</span><br><span class="line">        &lt;matchHeader&gt;&lt;/matchHeader&gt;</span><br><span class="line">        &lt;matchValue&gt;&lt;/matchValue&gt;</span><br><span class="line">        &lt;matchHeaderRegex&gt;false&lt;/matchHeaderRegex&gt;</span><br><span class="line">        &lt;matchValueRegex&gt;false&lt;/matchValueRegex&gt;</span><br><span class="line">        &lt;matchRequest&gt;false&lt;/matchRequest&gt;</span><br><span class="line">        &lt;matchResponse&gt;false&lt;/matchResponse&gt;</span><br><span class="line">        &lt;newHeader&gt;impression_type&lt;/newHeader&gt;</span><br><span class="line">        &lt;newValue&gt;push&lt;/newValue&gt;</span><br><span class="line">        &lt;newHeaderRegex&gt;false&lt;/newHeaderRegex&gt;</span><br><span class="line">        &lt;newValueRegex&gt;false&lt;/newValueRegex&gt;</span><br><span class="line">        &lt;matchWholeValue&gt;false&lt;/matchWholeValue&gt;</span><br><span class="line">        &lt;caseSensitive&gt;false&lt;/caseSensitive&gt;</span><br><span class="line">        &lt;replaceType&gt;2&lt;/replaceType&gt;</span><br><span class="line">      &lt;/rewriteRule&gt;</span><br><span class="line">    &lt;/rules&gt;</span><br><span class="line">  &lt;/rewriteSet&gt;</span><br><span class="line">&lt;/rewriteSet-array&gt;</span><br></pre></td></tr></table></figure><p>重写规则设置正确与否验证：<br><img src="http://upload-images.jianshu.io/upload_images/281540-ea8dc4743ec32001.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="规则设置正确与否验证"></p><p>在上面的<code>Notes</code>列上会显示<code>Rewrite Tool: query added &quot;impression_type: push&quot;</code></p><p><strong>应用：</strong></p><ol><li>打开Charles并生效上面的Rewrite设置</li><li>手机设置代理为Charles的代理地址</li><li>正常阅读普通文章\视频达到奖励时点</li><li>查找<code>我的收益</code>页面，验证成功与否</li></ol><h3 id="案例02"><a href="#案例02" class="headerlink" title="案例02"></a>案例02</h3><p>问题：<code>趣消除</code>、<code>趣键盘</code>、<code>东方头条</code>等App都看广告得金币，怎样减少广告的时间？</p><p>思考：广告是哪里来的？广告时长是怎么来的？<br>当点击App上的按钮弹出广告时，3个App都调用了接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://is.snssdk.com/api/ad/union/sdk/get_ads/</span><br></pre></td></tr></table></figure><p>响应如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&quot;video&quot;: &#123;</span><br><span class="line">&quot;cover_height&quot;: 1280,</span><br><span class="line">&quot;cover_url&quot;: &quot;http://sf1-ttcdn-tos.pstatp.com/img/mosaic-legacy/1be91000a8c62c6ba6221~noop.jpg&quot;,</span><br><span class="line">&quot;cover_width&quot;: 720,</span><br><span class="line">&quot;endcard&quot;: &quot;https://www.toutiaopage.com/union/endcard/1629848424707111/?rit=909946692\u0026req_id=ED6EC127-C359-4C18-A41E-3A5F6F499250u3183\u0026ad_sdk_version=1.9.9.0\u0026os=ios\u0026lang=cn\u0026style_id=1104\u0026ad_id=1629844369912839\u0026_toutiao_params=%7B%22cid%22%3A1629848424707111%2C%22device_id%22%3A9724339963504202%2C%22log_extra%22%3A%22%7B%5C%22ad_price%5C%22%3A%5C%22XOub4AAGRWZc65vgAAZFZgz-hMMMgth42hwxAg%5C%22%2C%5C%22convert_id%5C%22%3A1629408290774020%2C%5C%22orit%5C%22%3A900000000%2C%5C%22req_id%5C%22%3A%5C%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%5C%22%2C%5C%22rit%5C%22%3A909946692%7D%22%2C%22orit%22%3A900000000%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%2C%22sign%22%3A%22D41D8CD98F00B204E9800998ECF8427E%22%2C%22uid%22%3A9724339963504202%2C%22ut%22%3A14%7D\u0026append=%7B%22openurl%22%3A%22%22%2C%22postdata%22%3A%5B%7B%22__type__%22%3A%22req_id%22%2C%22cid%22%3A1629848424707111%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%7D%5D%7D&quot;,</span><br><span class="line">&quot;resolution&quot;: &quot;720x1280&quot;,</span><br><span class="line">&quot;size&quot;: 5628226,</span><br><span class="line">&quot;video_duration&quot;: 29.04,</span><br><span class="line">&quot;video_url&quot;: &quot;http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda-jesntzw6569xqudw.mp4&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>广告就是从上面的接口获取而来的，广告时长由<code>video_url</code>字段对应的mp4的时长决定</p><p>解决：用Charles的<code>Rewrite功能Body</code>替换<code>video_url</code>字段的值<br><img src="https://upload-images.jianshu.io/upload_images/281540-e80209bd2b222ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Body"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">&quot;video_url&quot;:&quot;(.+)&quot;&#125;</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">&quot;video_url&quot;:&quot;http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda.mp4&quot;&#125;</span><br></pre></td></tr></table></figure><p>提供一个只有3秒的素材：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda-jesntzw6569xqudw.mp4</span><br></pre></td></tr></table></figure><h3 id="案例03"><a href="#案例03" class="headerlink" title="案例03"></a>案例03</h3><p>问题：<code>章鱼输入法</code>App有看广告得金币，没有像<code>案例02</code>那样找到相应的接口api返回广告视频的URL，怎样减少广告的时间？</p><p>思考：尝试替换广告视频的请求<br>比如广告视频的请求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Get https://v3-ad.ixigua.com/.../video/m/.../toutiao.mp4</span><br><span class="line"></span><br><span class="line">替换为只有3秒的视频地址</span><br><span class="line">Get http://vd2.bdstatic.com/.../3seconds.mp4</span><br></pre></td></tr></table></figure><p>解决：用Charles的<code>Rewrite功能URL</code>替换请求<br><img src="https://upload-images.jianshu.io/upload_images/281540-aa27f7180fd280a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:URL"></p><h3 id="案例04"><a href="#案例04" class="headerlink" title="案例04"></a>案例04</h3><p>问题：<code>扶我起来学数学</code>App的<code>作战休息区</code>有一个游戏<code>伪装者</code>，在上报成绩时，接口有hash字段，修改成绩字段，hash会验证不通过，达到了防止伪造成绩的功能，怎样在hash前伪造成绩？<br><img src="https://upload-images.jianshu.io/upload_images/281540-88406cb857175e0b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成绩上报接口"><br>思考：hash算法一般难破解，与其破解hash算法，不如转变思路：修改传入hash的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value肯定与成绩相关</span><br><span class="line">hash(value)</span><br></pre></td></tr></table></figure><p>那value具体是怎么样的呢？通过抓包的数据可以判定为是个h5游戏，在js代码中可能包含相要的答案<br><img src="https://upload-images.jianshu.io/upload_images/281540-685fef5fb145856f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>在浏览器中打开上面中的<code>game.html</code>验证确实是一个h5游戏：<br><img src="https://upload-images.jianshu.io/upload_images/281540-05b3b4529eb81455.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>解决：</p><ul><li>用Charles的<code>Mirror功能</code>把抓包的数据自动保存为文件，再在文本编辑器中检查代码</li><li>在<code>game.html</code>文件中查找<code>rest/game_report</code>，因为有这个网络包，所以先查找这个关键字，结果如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function _gameReport(score, callBack, hash, time)&#123;</span><br><span class="line">    var oAjax = null;</span><br><span class="line">    //这里进行HTTP请求</span><br><span class="line">    oAjax = new XMLHttpRequest();</span><br><span class="line">    oAjax.open(&apos;post&apos;,HOSTURLAPI+&quot;/rest/game_report&quot;+&quot;?uid=&quot;+UID+&quot;&amp;gameid=&quot;+GAMEID+&quot;&amp;score=&quot;+score+&quot;&amp;tm=&quot;+time+&quot;&amp;hash=&quot;+hash,true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找<code>_gameReport</code>函数的调用者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function gameReport(score, callBack)&#123;</span><br><span class="line">    var timeData = new Date().getTime();</span><br><span class="line">    var hashValue = UID+GAMEID+score+timeData;</span><br><span class="line">    var hash = &apos;&apos;;</span><br><span class="line">    dsBridge.call(&apos;hashCode&apos;,hashValue,function(data)&#123;</span><br><span class="line">        hash = data;</span><br><span class="line">        _gameReport(score, callBack, hash, timeData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gameReport(b[0], function(success, old_score)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>js代码调用到App的<code>hashCode</code>方法，<code>hashValue = UID+GAMEID+score+timeData</code><br>用Charles的<code>Rewrite功能Body</code>替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">gameReport(b[0]</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">gameReport(&apos;99&apos;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/281540-95aa5d5d7a03c5e6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>成绩已修改，hash验证已通过</li></ul><h2 id="Mirror应用"><a href="#Mirror应用" class="headerlink" title="Mirror应用"></a>Mirror应用</h2><p>文档：<a href="https://www.charlesproxy.com/documentation/tools/mirror/" target="_blank" rel="noopener">https://www.charlesproxy.com/documentation/tools/mirror/</a></p><blockquote><p>The Mirror tool saves responses to disk as they are received, creating a mirror copy of websites as you browse them.</p></blockquote><p>Mirror把响应保存为文件到硬盘上</p><p><img src="https://upload-images.jianshu.io/upload_images/281540-9a4d5b1810506685.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/281540-64531455206484fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mirror保存下来的文件"></p><h2 id="No-Caching-和-Block-Cookies应用"><a href="#No-Caching-和-Block-Cookies应用" class="headerlink" title="No Caching 和 Block Cookies应用"></a>No Caching 和 Block Cookies应用</h2><p>在案例：<code>扶我起来学数学</code>App的<code>伪装者</code>游戏通过Rewrite功能修改了js文件中的内容；但有时js文件不是每次都会传输，而是使用了缓存，这时Rewrite功能就失效了，因为没有发生网络请求；通过<code>No Caching 和 Block Cookies</code>使网络请求每次都发生</p><h2 id="Map-Local应用"><a href="#Map-Local应用" class="headerlink" title="Map Local应用"></a>Map Local应用</h2><table><thead><tr><th>Map Local应用场景</th></tr></thead><tbody><tr><td>修改js文件来改变App行为:</td></tr><tr><td>1. 使用No Caching 和 Block Cookies功能保证js文件通过网络请求加载到App</td></tr><tr><td>2. 使用Mirror功能把js文件保存到电脑上</td></tr><tr><td>3. 使用Map Local功能使App加载修改后的js文件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;Rewrite应用&quot;&gt;&lt;a href=&quot;#Rewrite应用&quot; class=&quot;headerlink&quot; title=&quot;Rewrite应用&quot;&gt;&lt;/a&gt;Rewrite应用&lt;/h2&gt;&lt;h3 id=&quot;案例01&quot;&gt;&lt;a href=&quot;#案例01&quot; class=&quot;headerlink&quot; title=&quot;案例01&quot;&gt;&lt;/a&gt;案例01&lt;/h3&gt;&lt;p&gt;问题：&lt;code&gt;今日头条极速版&lt;/code&gt;App每天的&lt;code&gt;阅读推送文章&lt;/code&gt;任务因为每天收到的推送很少，因而不能得很高的积分，怎样把普通文章的阅读变为推送文章的阅读呢？&lt;/p&gt;&lt;p&gt;思考：对比普通文章的阅读与推送文章的阅读发出的网络数据，找出差异&lt;/p&gt;&lt;p&gt;普通文章的阅读与推送文章的阅读达到奖励标准时，都用相同的接口&lt;code&gt;https://is.snssdk.com/score_task/v1/task/get_read_bonus/&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>mitmproxy的使用</title>
    <link href="http://yoursite.com/2019/09/28/mitmproxy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/28/mitmproxy的使用/</id>
    <published>2019-09-28T01:48:46.000Z</published>
    <updated>2019-09-29T08:02:05.239Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="mitmproxy的使用"><a href="#mitmproxy的使用" class="headerlink" title="mitmproxy的使用"></a>mitmproxy的使用</h1><p><strong>mitmproxy</strong> is a free and open source interactive HTTPS proxy.<br>官网：<a href="https://mitmproxy.org/" target="_blank" rel="noopener">https://mitmproxy.org/</a><br>安装：<code>pip3 install mitmproxy</code> 或 <code>brew install mitmproxy</code><br>安装后有3个命令行工具：mitmproxy, mitmdump, mitmweb</p><a id="more"></a><p>这里不介绍<code>mitmweb</code>的使用，<code>mitmproxy</code>与<code>mitmdump</code>的功能重点：<br><code>mitmproxy</code>：交互式；查看流量数据(请求与响应)；执行自定义脚本<br><code>mitmdump</code>：执行自定义脚本，脚本在Mitmproxy中叫做<code>Addon</code></p><p>使用<code>mitmproxy</code>：因为是命令行界面，所以需要记住一些快捷键<br>使用<code>mitmdump</code>：偏向编写python代码</p><p>通过一个典型的调用，来认识下<code>Mitmproxy</code>下的核心概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --set scripts=ad_short_mitm.py &apos;~u baidu\.com&apos;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>在Mitmproxy的叫法</th></tr></thead><tbody><tr><td>set</td><td><code>Command</code></td></tr><tr><td>scripts</td><td><code>Options</code></td></tr><tr><td>ad_short_mitm.py</td><td><code>Addon</code></td></tr><tr><td>‘~u baidu\.com’</td><td><code>Filter expressions</code></td></tr></tbody></table><h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure><p>输入上面命令，启动mitmproxy并显示<code>Flows界面</code>：</p><table><thead><tr><th>Flows界面</th></tr></thead><tbody><tr><td><img src="https://upload-images.jianshu.io/upload_images/281540-af5b56b103232a27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flows界面"></td></tr></tbody></table><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>第1个也是最重要的快捷键：<code>?</code>: 进入<code>Help界面</code>：</li></ul><table><thead><tr><th>进入Help界面</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td></tr></tbody></table><ul><li>第2个重要的快捷键：<code>:</code>: Command prompt,进入命令输入模式</li></ul><table><thead><tr><th>进入命令输入模式</th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5aqk3tgiej31r40kuwhs.jpg" alt="命令输入模式"></td></tr><tr><td>可以输入的命令：可以在<code>Command Reference界面</code>查看</td></tr><tr><td>可以按<code>tab</code>来命令补全：比如输入flow.m；再按tab; 补全为flow.mark</td></tr><tr><td>可以按<code>tab</code>来路径补全</td></tr><tr><td>按<code>enter</code>执行命令</td></tr><tr><td>常用的命令可以用快捷键，不用进入命令输入模式，省去输入的时间</td></tr></tbody></table><ul><li><strong>界面间跳转快捷键</strong></li></ul><table><thead><tr><th>快捷键</th><th>界面</th><th>截图</th></tr></thead><tbody><tr><td><code>?</code></td><td>Help界面</td><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td></tr><tr><td><code>K</code></td><td>Key Bindings界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4hkbne2j30xg0oqjv3.jpg" alt="Key Bindings界面"></td></tr><tr><td><code>P</code></td><td>Flow Details界面</td><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4l0oi7lj30xg0oqwi2.jpg" alt="Flow Details界面"></td></tr><tr><td><code>E</code></td><td>Events界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4mkekpvj30xg0oqaec.jpg" alt="Events界面"></td></tr><tr><td><code>C</code></td><td>Command Reference界面</td><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4nxo0cgj30xg0oqjv6.jpg" alt="Command Reference界面"></td></tr><tr><td><code>O</code></td><td>Options界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4pl36xyj30xg0oqadr.jpg" alt="Options界面"></td></tr><tr><td><strong>注意：上面的快捷键，都是大写字母，<code>mitmproxy</code>的快捷键是区分大小写的</strong></td><td></td><td></td></tr><tr><td><strong>Flows界面居然没有快捷键？</strong></td><td></td><td></td></tr></tbody></table><ul><li><strong>导航快捷键</strong></li></ul><table><thead><tr><th>快捷键</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>q</td><td>console.view.pop</td><td>返回：界面间的返回</td></tr><tr><td>g</td><td>console.nav.start</td><td>跳到第一行</td></tr><tr><td>G</td><td>console.nav.end</td><td>跳到最后一行</td></tr><tr><td>h</td><td>console.nav.left</td><td></td></tr><tr><td>j</td><td>console.nav.down</td><td>跳到下一行</td></tr><tr><td>k</td><td>console.nav.up</td><td>跳到上一行</td></tr><tr><td>l</td><td>console.nav.right</td><td></td></tr><tr><td>space</td><td>console.nav.pagedown</td><td></td></tr><tr><td>ctrl b</td><td>console.nav.pageup</td><td></td></tr><tr><td>ctrl f</td><td>console.nav.pagedown</td><td></td></tr><tr><td>tab</td><td>console.nav.next</td><td></td></tr><tr><td><strong>g\G\j\k等这样的导航键是通用的：在Flows、Events、Command、Options等界面都能用</strong></td><td></td><td></td></tr></tbody></table><p>刚开始学命令行界面时，有这么命令、快捷键要记，没记住怎么办？<br>这里介绍下mitmproxy的<code>--no-server, -n</code>应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --help</span><br><span class="line">usage: mitmproxy [options]</span><br><span class="line">...</span><br><span class="line">Proxy Options:</span><br><span class="line">  --no-server, -n</span><br><span class="line">  --server              Start a proxy server. Enabled by default.</span><br></pre></td></tr></table></figure><ul><li>第1个Terminal窗口里正常启动mitmproxy：<code>➜  ~ mitmproxy</code></li><li>开启第2个Terminal窗口带<code>--no-server</code>选项启动mitmproxy：<code>➜  ~ mitmproxy --no-server</code>；按<code>K</code>/<code>C</code>/<code>O</code>/<code>?</code>查看快捷键、Command、Options、帮助</li></ul><table><thead><tr><th>第2个mitmproxy专门用于查看快捷键、Command、Options、帮助</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d9drzuxfj31ic0ku0uz.jpg" alt></td></tr></tbody></table><h3 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h3><p>以<code>东方头条App - 幸运大转盘</code>这个游戏为实战</p><table><thead><tr><th>东方头条App - 幸运大转盘</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d0cz6rndj30n00kgabm.jpg" alt></td></tr><tr><td>1.点击’领取金币’：会发出https://…/zhuanpan/get_zhuanpan_new网络请求</td></tr><tr><td>2.点击’立即领取’：会发出https://…/zhuanpan/get_gold网络请求</td></tr></tbody></table><p>应用目的：通过mitmproxy的replay功能来减少手动操作时间<br>知识点：<code>Filter expressions</code>, <code>Options</code>, <code>Command</code></p><ul><li>1.启动mitmproxy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure><ul><li>2.点开<code>东方头条App</code>到<code>幸运大转盘</code>界面</li><li>3.点击’领取金币’；点击’立即领取’；</li><li>问题：这时候mitmrpoxy的<code>Flow界面</code>已包含上面的网络请求，网络请求非常多，怎么找到需要的请求</li><li>解答：应用mitmrpoxy的<code>Filter expressions</code></li><li>4.按<code>f</code>快捷键：设置<code>view_filter</code>这个<code>Option</code></li></ul><table><thead><tr><th>按<code>f</code>快捷键, 设置<code>view_filter</code></th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5d1kj7qvvj316z0u0adk.jpg" alt></td></tr><tr><td>* 5.输入<code>~u zhuanpan</code>, 按回车执行命令</td></tr></tbody></table><table><thead><tr><th>输入<code>~u zhuanpan</code></th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5d1zhmp90j316z0u0gr2.jpg" alt></td></tr><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d1un59ssj316z0u0dl4.jpg" alt></td></tr></tbody></table><ul><li><p>知识点：<code>~u zhuanpan</code>是<code>Filter expressions</code>：<code>~u regex</code>，用来过滤URL符合regex正则表达式的网络请求；可以按<code>？</code>跳转到<code>Help界面</code>查看全部的<code>Filter expressions</code></p></li><li><p>6.用<code>j</code>导航快捷键定位到<code>zhuanpan/get_zhuanpan_new</code>网络请求；按下<code>m</code>快捷键将这条网络请求标记</p></li></ul><table><thead><tr><th>按下<code>m</code>标记网络请求</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2sgnjiqj316z0u0n2j.jpg" alt></td></tr></tbody></table><ul><li>7.用同样的操作，标记<code>zhuanpan/get_gold</code>网络请求</li></ul><table><thead><tr><th>按下<code>m</code>标记网络请求</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2va55pyj316z0u079q.jpg" alt></td></tr></tbody></table><ul><li>8.按<code>:</code>快捷键, 进入命令输入模式；输入<code>rep</code>, 按<code>tab</code>补全命令; 输入<code>@marked</code>; 按回车执行命令</li></ul><table><thead><tr><th>按<code>tab</code>补全命令</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5d3gwr0noj316z0u07a6.jpg" alt> <img src="http://ww3.sinaimg.cn/large/006tNc79gy1g5d3q3ou9pj316z0u0q5x.jpg" alt></td></tr></tbody></table><p>出于演示使用mitmrpoxy的目的，才增加了许多不必要的步骤；简洁方法：</p><ul><li>去除步骤4、5、6、7</li><li>步骤8改为<code>: replay.client &quot;(~u zhuanpan/get_zhuanpan_new) | (~u zhuanpan/get_gold)&quot;</code></li></ul><p>案例到此结束，小结下用到的快捷键、命令：</p><table><thead><tr><th>快捷键</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td><code>f</code></td><td>: set view_fliter=</td><td>只显示符合条件的网络请求</td></tr><tr><td><code>m</code></td><td>flow.mark.toggle @focus</td><td>Toggle mark on this flow</td></tr><tr><td></td><td>: replay.client @marked</td><td>重放多条标记的网络请求</td></tr></tbody></table><p>相关快捷键：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>M</td><td>flowlist</td><td>view.marked.toggle</td><td>Toggle viewing marked flows</td></tr><tr><td>U</td><td>flowlist</td><td>flow.mark @all false</td><td>Un-set all marks</td></tr><tr><td>r</td><td>flowlist</td><td>replay.client @focus</td><td>Replay this flow</td></tr></tbody></table><p>一些用到<code>Filter expressions</code>的<code>Options</code>:<br>view_filter、save_stream_filter、intercept</p><p>相关文档：<br><a href="https://docs.mitmproxy.org/stable/concepts-options/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/concepts-options/</a><br><a href="https://docs.mitmproxy.org/stable/concepts-filters/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/concepts-filters/</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面的实战有以下几个问题：</p><ul><li>第1次收集操作时，不是每次都抽到金币，也有可能抽到广告；怎样每次都跳过广告？</li><li>游戏有20次机会，要手动输入多次<code>replay.client @marked</code>才能把20次机会用完；怎样才能减少手动操作？</li></ul><p>这些问题我们通过编写脚本来解决。这里使用<code>mitmproxy</code>的其它功能为编写脚本提供方便<br>把实战的已被标记的2个网络请求保存为文件，方便查看：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>flowlist</td><td>console.command save.file @shown</td><td>Save listed flows to file</td></tr></tbody></table><ul><li>1.按<code>w</code>快捷键, 把<code>@shown</code>修改为<code>@marked</code>; 指定保存路径；按回车执行命令</li></ul><table><thead><tr><th>按<code>w</code>保存为文件</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5ggp27f86j31c80u0dll.jpg" alt> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ggphx21nj31c80u0ag4.jpg" alt></td></tr><tr><td>输入路径时，可以按<code>tab</code>来补全路径</td></tr><tr><td>最好不要使用<code>~</code>：像我自己Mac上输入<code>~/zhuanpan.mitm</code>，没有保存成功；当然你也可以测试下使用<code>~</code>的路径能否保存成功</td></tr><tr><td>输入的文件的后缀名是可以随意指定的；保存的文件为二进制格式</td></tr></tbody></table><ul><li>2.开启第2个Terminal窗口带–no-server选项启动mitmproxy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --no-server</span><br></pre></td></tr></table></figure><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>L</td><td>flowlist</td><td>console.command view.load</td><td>Load flows from file</td></tr></tbody></table><ul><li>3.按<code>L</code>快捷键, 把步骤1保存的文件加载进来</li></ul><table><thead><tr><th>按<code>L</code>加载文件</th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5ghc549tnj31c80u0q7b.jpg" alt> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ghcff17bj31c80u0q7e.jpg" alt></td></tr></tbody></table><p>好了，编写脚本的准备工作结束！<br>小结下用到的快捷键、命令：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>flowlist</td><td>console.command save.file @shown</td><td>Save listed flows to file</td></tr><tr><td>L</td><td>flowlist</td><td>console.command view.load</td><td>Load flows from file</td></tr></tbody></table><p>相关快捷键：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>e</td><td>flowlist</td><td>console.command export.file {choice} @focus</td><td>Export this flow to file</td></tr></tbody></table><p>快捷键<code>w</code>与<code>e</code>的区别</p><table><thead><tr><th>w</th><th>e</th></tr></thead><tbody><tr><td>文件为二进制文件</td><td>文件为文本文件</td></tr><tr><td>保存的信息完整</td><td>只保存请求信息，不保存响应信息</td></tr><tr><td>能一次保存多条网络请求信息</td><td>一次只能保存一条网络请求信息</td></tr></tbody></table><h2 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h2><p><code>Mitmproxy</code>是用python实现的，编写相应的<code>Addon</code>脚本也是用python</p><h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><p>先用在<code>mitmproxy</code>的<code>e</code>快捷键来辅助编写shell脚本，来解决下上面的实战问题</p><ul><li><ol><li>用<code>e</code>快捷键分别保存<code>zhuanpan/get_zhuanpan_new</code>、<code>zhuanpan/get_gold</code>网络请求为文件<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code></li></ol></li></ul><p>get_zhuanpan_new.sh文件内容：[get_gold.sh内容类似，不再列出]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &apos;Host:zhuanpan.dftoutiao.com&apos; -H &apos;Content-Type:application/x-www-form-urlencoded&apos; -H &apos;Connection:keep-alive&apos; -H &apos;Accept:*/*&apos; -H &apos;User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)&apos; -H &apos;Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8&apos; -H &apos;Content-Length:484&apos; -H &apos;Accept-Encoding:br, gzip, deflate&apos; -X POST &apos;https://zhuanpan.dftoutiao.com/zhuanpan/get_zhuanpan_new&apos; --data-binary &apos;accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;num=57&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368354&apos;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>把<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code>的内容合并到最终的文件中<code>zhuanpan.sh</code></li></ol></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">function zhuanpan</span><br><span class="line">&#123;</span><br><span class="line">    # mitmproxy用快捷键e导出的get_zhuanpan_new.sh文件内容原样写到这</span><br><span class="line">    curl -H 'Host:zhuanpan.dftoutiao.com' -H 'Content-Type:application/x-www-form-urlencoded' -H 'Connection:keep-alive' -H 'Accept:*/*' -H 'User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)' -H 'Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8' -H 'Content-Length:484' -H 'Accept-Encoding:br, gzip, deflate' -X POST 'https://zhuanpan.dftoutiao.com/zhuanpan/get_zhuanpan_new' --data-binary 'accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;num=57&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368354'</span><br><span class="line"></span><br><span class="line">    # mitmproxy用快捷键e导出的get_gold.sh文件内容原样写到这</span><br><span class="line">    curl -H 'Host:zhuanpan.dftoutiao.com' -H 'Content-Type:application/x-www-form-urlencoded' -H 'Connection:keep-alive' -H 'Accept:*/*' -H 'User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)' -H 'Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8' -H 'Content-Length:487' -H 'Accept-Encoding:br, gzip, deflate' -X POST 'https://zhuanpan.dftoutiao.com/zhuanpan/get_gold' --data-binary 'accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;isfirst=0&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=c6f61f80d1c001ac5382ef73632e0e9e&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368376'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ((i=0; i&lt;20; i++));</span><br><span class="line">do</span><br><span class="line">    zhuanpan</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>ok，shell脚本以编写完成</p><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>关于<code>Addon</code>的概念可以查看：<br><a href="https://docs.mitmproxy.org/stable/addons-overview/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/addons-overview/</a></p><p>编写<code>Addon</code>脚本写些什么呢？先上一下模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line">from mitmproxy import addonmanager</span><br><span class="line"></span><br><span class="line">class Myaddon(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def load(self, entry: addonmanager.Loader):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def request(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Myaddon()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>编写<code>Addon</code>脚本:就是选择性的实现上面的方法</strong></p><p><strong>具体都有哪些方法可以选择性实现，可以查看如下文档：</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://docs.mitmproxy.org/stable/addons-events/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/addons-events/</a></td></tr><tr><td>源代码</td><td>docs/src/examples/addons/events.py</td></tr><tr><td>源代码</td><td>mitmproxy/eventsequence.py</td></tr></tbody></table><p>开始实现<code>Addon</code>脚本：</p><ul><li><ol><li>新建文件<code>zhuangpan_mitm.py</code>, 实现<code>__init__</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">class Zhuangpan(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.filter = flowfilter.parse(r&apos;(~u zhuanpan/get_zhuanpan_new) | (~u zhuanpan/get_gold)&apos;)</span><br><span class="line">        self.new_fliter = flowfilter.parse(r&apos;~u zhuanpan/get_zhuanpan_new&apos;) </span><br><span class="line">        self.get_fliter = flowfilter.parse(r&apos;~u zhuanpan/get_gold&apos;)</span><br><span class="line">        self.flows = []</span><br><span class="line">        self.urls = set()</span><br><span class="line">        self.remain = 0</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Zhuangpan()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里用到了Mitmproxy的api:<code>flowfilter.parse</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mitmproxy/flowfilter.py文件</span><br><span class="line">def parse(s: str) -&gt; TFilter:</span><br><span class="line"></span><br><span class="line"># 还定义了：</span><br><span class="line">def match(flt, flow):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        Matches a flow against a compiled filter expression.</span><br><span class="line">        Returns True if matched, False if not.</span><br><span class="line">        ....</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>实现<code>request</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Zhuangpan(object):</span><br><span class="line">    ...</span><br><span class="line">    def request(self, flow: http.HTTPFlow):               </span><br><span class="line">        if flowfilter.match(self.filter, flow):</span><br><span class="line">            url = flow.request.url</span><br><span class="line">            if not url in self.urls: </span><br><span class="line">                ctx.log.alert(url)</span><br><span class="line">                self.flows.append(flow)</span><br><span class="line">                self.urls.add(url)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>实现<code>response</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Zhuangpan(object):                       </span><br><span class="line">    ...</span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if flowfilter.match(self.new_fliter, flow):</span><br><span class="line">            flow.response.replace(r&apos;&quot;gold&quot;:0&apos;, &apos;&quot;gold&quot;:999&apos;)</span><br><span class="line"></span><br><span class="line">            text = flow.response.text</span><br><span class="line">            data = json.loads(text)</span><br><span class="line">            self.remain = data.get(&apos;data&apos;).get(&apos;cur_num&apos;)</span><br><span class="line">            ctx.log.alert(&apos;remain count:&#123;&#125;&apos;.format(self.remain))</span><br><span class="line"></span><br><span class="line">        if flowfilter.match(self.get_fliter, flow):</span><br><span class="line">            if self.remain &gt; 0 and len(self.urls) &gt;= 2:                </span><br><span class="line">                flows = [f.copy() for f in self.flows]</span><br><span class="line">                ctx.master.commands.call(&quot;replay.client&quot;, flows)</span><br></pre></td></tr></table></figure><p>使用<code>ctx.log.xxx</code>等方法来代替使用<code>print</code>或<code>logging.warning</code>等方法：  </p><ul><li>在mitmproxy中，<code>ctx.log.xxx</code>记录的信息会出现在<code>Event</code>界面,         而其它方法不会出现在<code>Event</code>界面</li><li>在mitmdump中，<code>ctx.log.xxx</code>记录的信息事件显示的顺序正确,         而其它方法显示的顺序不正确</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmdump --scripts zhuangpan_mitm.py</span><br><span class="line">Loading script zhuangpan_mitm.py</span><br><span class="line">Proxy server listening at http://*:8080</span><br><span class="line"></span><br><span class="line">  # --scripts SCRIPT, -s SCRIPT</span><br><span class="line">                        Execute a script. May be passed multiple times.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --set userid=zhj -s &quot;mitm_user_xxx.py&quot;  -s math_mitm.py &apos;~u mapi.hddgood.com&apos;</span><br><span class="line"></span><br><span class="line">mitmdump --set replacements=&apos;/~s/&quot;video_url&quot;:&quot;(.+)&quot;&#125;/&quot;video_url&quot;:&quot;https://vd3.bdstatic.com/abc.mp4&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 代码里可以调用</span><br><span class="line">ctx.master.commands.call(&quot;replay.client&quot;, [flow])</span><br><span class="line"></span><br><span class="line">ctx.master.commands.execute(&quot;view.focus.go 0&quot;)</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>问题：只关注某个域名下的流量，怎么设置？<br>解决：ignore_hosts<br><a href="https://docs.mitmproxy.org/stable/howto-ignoredomains/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/howto-ignoredomains/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Ignore everything but example.com and mitmproxy.org:</span><br><span class="line">--ignore-hosts &apos;^(?!example\.com)(?!mitmproxy\.org)&apos;</span><br><span class="line"></span><br><span class="line">正则表达式：反前瞻</span><br><span class="line">反前瞻：要匹配某个模式时，需要在它 后面找不到含有给定前瞻模式的内容</span><br><span class="line">foo(?!bar)  Negative lookahead assertion. The pattern foo will only match if not followed by a match of pattern bar.</span><br></pre></td></tr></table></figure><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><p>源码地址：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy</a></p><p>mitmproxy/tools/_main.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">入口方法：</span><br><span class="line">def mitmproxy(args=None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(console.master.ConsoleMaster)</span><br><span class="line"></span><br><span class="line">def mitmdump(args=None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(dump.DumpMaster)</span><br><span class="line">    </span><br><span class="line">主要代码</span><br><span class="line">def run(master_cls):</span><br><span class="line"></span><br><span class="line">    opts   = options.Options()</span><br><span class="line">    master = master_cls(opts)</span><br><span class="line">    </span><br><span class="line">    pconf  = proxy.config.ProxyConfig(opts)</span><br><span class="line">    server = proxy.server.ProxyServer(pconf)</span><br><span class="line">    </span><br><span class="line">    master.server = server</span><br><span class="line">    master.run()</span><br><span class="line">    return master</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">master.Master</span><br><span class="line">    console.master.ConsoleMaster</span><br><span class="line">    dump.DumpMaster</span><br><span class="line">    web.master.WebMaster</span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">    proxy.server.ProxyServer</span><br><span class="line">    proxy.server.DummyServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master与Server关系：</span><br><span class="line">    master.server = server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master和Server对象生成：</span><br><span class="line">    Master(opts: options.Options)</span><br><span class="line">    Server(config: config.ProxyConfig)</span><br><span class="line"></span><br><span class="line">ProxyConfig与Options关系：</span><br><span class="line">    ProxyConfig(options: options.Options)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">开始运行：</span><br><span class="line">    master.run()</span><br><span class="line">        master.start()</span><br><span class="line"></span><br><span class="line">    def start(self):</span><br><span class="line">        if self.server:</span><br><span class="line">            ServerThread(self.server).start()</span><br><span class="line"></span><br><span class="line">class ServerThread(basethread.BaseThread):</span><br><span class="line">    def __init__(self, server):</span><br><span class="line">        self.server = server</span><br><span class="line">        address = getattr(self.server, &quot;address&quot;, None)</span><br><span class="line">        super().__init__(</span><br><span class="line">            &quot;ServerThread (&#123;&#125;)&quot;.format(repr(address))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">线程：</span><br><span class="line">    ServerThread</span><br><span class="line">    connection_thread</span><br><span class="line"></span><br><span class="line">    def connection_thread(self, connection, client_address):</span><br><span class="line">        with self.handler_counter:</span><br><span class="line">            try:</span><br><span class="line">                self.handle_client_connection(connection, client_address)</span><br><span class="line">            finally:</span><br><span class="line">                close_socket(connection)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def handle_client_connection(self, conn, client_address):</span><br><span class="line">        h = ConnectionHandler(</span><br><span class="line">            conn,</span><br><span class="line">            client_address,</span><br><span class="line">            self.config,</span><br><span class="line">            self.channel</span><br><span class="line">        )</span><br><span class="line">        h.handle()</span><br><span class="line"></span><br><span class="line">    def handle(self):</span><br><span class="line">        self.log(&quot;clientconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">        root_layer = None</span><br><span class="line">        root_layer = self._create_root_layer()</span><br><span class="line">        root_layer = self.channel.ask(&quot;clientconnect&quot;, root_layer)</span><br><span class="line">        root_layer()</span><br><span class="line"></span><br><span class="line">        self.log(&quot;clientdisconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">    def _create_root_layer(self):</span><br><span class="line">        root_ctx = ...</span><br><span class="line">        mode = self.config.options.mode</span><br><span class="line">        if mode.startswith(&quot;upstream:&quot;):</span><br><span class="line">            return modes.HttpUpstreamProxy</span><br><span class="line">        elif mode == &quot;transparent&quot;:</span><br><span class="line">            return modes.TransparentProxy(root_ctx)</span><br><span class="line">        elif mode == &quot;regular&quot;:</span><br><span class="line">            return modes.HttpProxy(root_ctx)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">addons的运行过程[生命周期]</span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line"></span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">DumpMaster.__init__(self,options):</span><br><span class="line">    super().__init__(options)</span><br><span class="line">    self.addons.add(*addons.default_addons())</span><br><span class="line"></span><br><span class="line">AddonManager.add(self, *addons):</span><br><span class="line">    for i in addons:</span><br><span class="line">        self.chain.append(self.register(i))</span><br><span class="line">        </span><br><span class="line">AddonManager.register(self, addon):</span><br><span class="line">    l = Loader(self.master)</span><br><span class="line">    self.invoke_addon(addon, &quot;load&quot;, l)</span><br><span class="line">    </span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">master.run():</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    self.run_loop(loop.run_forever)</span><br><span class="line">        </span><br><span class="line">    master.run_loop(self, loop):</span><br><span class="line">        asyncio.ensure_future(self.running())</span><br><span class="line">        </span><br><span class="line">    master.running(self):</span><br><span class="line">        self.addons.trigger(&quot;running&quot;)</span><br><span class="line">        </span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line">class AddonManager:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.lookup = &#123;&#125;</span><br><span class="line">        self.chain = []</span><br><span class="line">        self.master = master</span><br><span class="line">        master.options.changed.connect(self._configure_all)</span><br><span class="line"></span><br><span class="line">    def _configure_all(self, options, updated):</span><br><span class="line">        self.trigger(&quot;configure&quot;, updated)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script" target="_blank" rel="noopener">https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script</a></p><p><a href="https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg" target="_blank" rel="noopener">https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg</a></p><p><a href="https://github.com/KevCui/mitm-scripts" target="_blank" rel="noopener">https://github.com/KevCui/mitm-scripts</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;mitmproxy的使用&quot;&gt;&lt;a href=&quot;#mitmproxy的使用&quot; class=&quot;headerlink&quot; title=&quot;mitmproxy的使用&quot;&gt;&lt;/a&gt;mitmproxy的使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;mitmproxy&lt;/strong&gt; is a free and open source interactive HTTPS proxy.&lt;br&gt;官网：&lt;a href=&quot;https://mitmproxy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mitmproxy.org/&lt;/a&gt;&lt;br&gt;安装：&lt;code&gt;pip3 install mitmproxy&lt;/code&gt; 或 &lt;code&gt;brew install mitmproxy&lt;/code&gt;&lt;br&gt;安装后有3个命令行工具：mitmproxy, mitmdump, mitmweb&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
  </entry>
  
  <entry>
    <title>iOS快速设置代理</title>
    <link href="http://yoursite.com/2019/09/27/ios-switch-proxy/"/>
    <id>http://yoursite.com/2019/09/27/ios-switch-proxy/</id>
    <published>2019-09-27T14:30:52.000Z</published>
    <updated>2019-09-29T07:58:27.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>手动设置wifi的步骤非常长：</p><ol><li>点击“设置”</li><li>点击“无线局域网”</li><li>点击已连接的wifi</li><li>点击“配置代理”</li><li>点击“手动”</li><li>定位服务器输入框，输入ip</li><li>定位端口输入框，输入port</li><li>点击“存储”</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>用iOS上的Shadowrocket和Mac上的Charles来快速设置代理<br>iOS和Mac在同一wifi</p><a id="more"></a><ol><li>启动Charles，假设代理地址为：192.168.0.100:8888</li><li>Shadowrocket设置<code>全局路由</code>为<code>代理</code></li><li>Shadowrocket添加<code>HTTP</code>类型的节点</li><li>Shadowrocket打开连接</li></ol><p><strong>添加<code>HTTP</code>类型的节点:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-3a3a4df908ac1248.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加节点"></p><p><strong>结果:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-c94d3b52048e63e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;手动设置wifi的步骤非常长：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;点击“设置”&lt;/li&gt;
&lt;li&gt;点击“无线局域网”&lt;/li&gt;
&lt;li&gt;点击已连接的wifi&lt;/li&gt;
&lt;li&gt;点击“配置代理”&lt;/li&gt;
&lt;li&gt;点击“手动”&lt;/li&gt;
&lt;li&gt;定位服务器输入框，输入ip&lt;/li&gt;
&lt;li&gt;定位端口输入框，输入port&lt;/li&gt;
&lt;li&gt;点击“存储”&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;用iOS上的Shadowrocket和Mac上的Charles来快速设置代理&lt;br&gt;iOS和Mac在同一wifi&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/27/hello-world/"/>
    <id>http://yoursite.com/2019/09/27/hello-world/</id>
    <published>2019-09-27T13:34:13.443Z</published>
    <updated>2019-09-27T13:34:13.444Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>Python阅读列表</title>
    <link href="http://yoursite.com/2019/09/27/Python%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/27/Python阅读列表/</id>
    <published>2019-09-27T11:35:38.000Z</published>
    <updated>2020-01-08T07:31:23.282Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul><li><a href="https://www.kawabangga.com/posts/2340" target="_blank" rel="noopener">理解Python的import</a></li><li><a href="https://www.kawabangga.com/posts/2772" target="_blank" rel="noopener">理解Python的Iterable和Iterator</a></li></ul><h2 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h2><ul><li><a href="http://wklken.me/posts/2013/08/20/python-extra-itertools.html" target="_blank" rel="noopener">Python-进阶-itertools模块小结</a></li><li><a href="https://www.jianshu.com/p/a8cb5375171a" target="_blank" rel="noopener">Python Traceback详解</a></li><li><a href="https://yanbin.blog/python-execute-system-command/" target="_blank" rel="noopener">Python 执行系统命令 - subprocess 模块的使用</a></li><li><a href="https://juejin.im/post/5c13960bf265da6134384ae5" target="_blank" rel="noopener">time date datetme timestamp 傻傻分不清楚</a></li><li><a href="https://cuiqingcai.com/6921.html" target="_blank" rel="noopener">一看就懂，Python 日志 logging 模块详解及应用</a></li><li><a href="https://cuiqingcai.com/6598.html" target="_blank" rel="noopener">Python3 中使用 Pathlib 模块进行文件操作</a></li><li><a href="https://mp.weixin.qq.com/s/NQEKTuSf3rPCloJJw1bPYA" target="_blank" rel="noopener">你还在用 os.path？快来感受一下 pathlib 给你带来的便捷吧</a></li><li><a href="https://cuiqingcai.com/7071.html" target="_blank" rel="noopener">Python 中 typing 模块和类型注解的使用</a></li></ul><a id="more"></a><h2 id="并发-amp-异步"><a href="#并发-amp-异步" class="headerlink" title="并发 &amp; 异步"></a>并发 &amp; 异步</h2><ul><li><a href="https://zhuanlan.zhihu.com/p/25228075" target="_blank" rel="noopener">从0到1，Python异步编程的演进之路</a></li><li><a href="https://zhuanlan.zhihu.com/p/27258289" target="_blank" rel="noopener">Python Async/Await入门指南</a></li><li><a href="https://lotabout.me/2017/Python-Generator/" target="_blank" rel="noopener">Python Generator</a></li><li><a href="https://lotabout.me/2017/understand-python-asyncio/" target="_blank" rel="noopener">理解 Python asyncio</a></li><li><a href="https://www.dongwm.com/post/understand-asyncio-1/" target="_blank" rel="noopener">深入理解asyncio(一)</a></li><li><a href="https://www.dongwm.com/post/understand-asyncio-2/" target="_blank" rel="noopener">深入理解asyncio(二)</a></li><li><a href="https://zhuanlan.zhihu.com/p/25228075" target="_blank" rel="noopener">Python中异步协程的使用方法介绍</a></li></ul><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><ul><li><a href="https://github.com/piglei/one-python-craftsman" target="_blank" rel="noopener">Python 工匠</a></li><li><a href="https://coding.imooc.com/class/213.html" target="_blank" rel="noopener">Python3实用编程技巧进阶</a></li><li><a href="https://mp.weixin.qq.com/s/ztMEpv4-MJ0y7ad6gb7dyQ" target="_blank" rel="noopener">python3中的unicode和bytes，让编码更流畅</a></li><li><a href="http://cizixs.com/2014/11/08/understand-wsgi/" target="_blank" rel="noopener">python wsgi 简介</a></li><li><a href="https://manjusaka.itscoder.com/posts/2018/02/23/something-about-decorator/" target="_blank" rel="noopener">怎么样去理解 Python 中的装饰器 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;概念&quot;&gt;&lt;a href=&quot;#概念&quot; class=&quot;headerlink&quot; title=&quot;概念&quot;&gt;&lt;/a&gt;概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kawabangga.com/posts/2340&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解Python的import&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kawabangga.com/posts/2772&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解Python的Iterable和Iterator&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;模块&quot;&gt;&lt;a href=&quot;#模块&quot; class=&quot;headerlink&quot; title=&quot;模块&quot;&gt;&lt;/a&gt;模块&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://wklken.me/posts/2013/08/20/python-extra-itertools.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python-进阶-itertools模块小结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/a8cb5375171a&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python Traceback详解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://yanbin.blog/python-execute-system-command/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 执行系统命令 - subprocess 模块的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://juejin.im/post/5c13960bf265da6134384ae5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;time date datetme timestamp 傻傻分不清楚&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cuiqingcai.com/6921.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;一看就懂，Python 日志 logging 模块详解及应用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cuiqingcai.com/6598.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python3 中使用 Pathlib 模块进行文件操作&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/NQEKTuSf3rPCloJJw1bPYA&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;你还在用 os.path？快来感受一下 pathlib 给你带来的便捷吧&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://cuiqingcai.com/7071.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python 中 typing 模块和类型注解的使用&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>我的阅读列表</title>
    <link href="http://yoursite.com/2019/09/27/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/27/我的阅读列表/</id>
    <published>2019-09-27T05:09:47.000Z</published>
    <updated>2020-01-08T06:55:36.670Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="https://cloverkits.github.io/2018/08/12/%E5%A6%82%E4%BD%95%E7%94%A8%E5%A5%BD%E8%B0%B7%E6%AD%8C%E7%AD%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/" target="_blank" rel="noopener">如何用好谷歌等搜索引擎</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">汇编语言入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html" target="_blank" rel="noopener">理解字节序</a></li><li><a href="http://jalan.space/2019/11/26/2019/binary-show/" target="_blank" rel="noopener">深入浅出：举个例子解读原码、反码与补码</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0</a></li><li><a href="https://www.jianshu.com/p/65225f50fe76" target="_blank" rel="noopener">基于python flask详述 OAuth 2.0 的运作流程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="noopener">RESTful API 最佳实践</a></li><li><a href="https://www.kawabangga.com/vim%e7%b3%bb%e5%88%97" target="_blank" rel="noopener">Vim系列教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/vimrc.html" target="_blank" rel="noopener">Vim 配置入门</a></li><li><a href="https://www.jianshu.com/p/923aec861af3" target="_blank" rel="noopener">mac下配置vim</a></li><li><a href="https://blog.csdn.net/JasonDing1354/article/details/45372007" target="_blank" rel="noopener">使用map自定义快捷键</a></li></ul><a id="more"></a><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li><a href="https://book.douban.com/subject/30357170/" target="_blank" rel="noopener">《我的第一本算法书》</a></li><li><a href="https://time.geekbang.org/column/intro/126" target="_blank" rel="noopener">极客时间-数据结构与算法之美</a></li><li><a href="https://time.geekbang.org/course/intro/130" target="_blank" rel="noopener">极客时间-算法面试通关40讲</a></li><li><a href="http://aaaron7.github.io/blog/algorithm/kmp-explain" target="_blank" rel="noopener">可能是最容易理解的 KMP 教程</a></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><a href="https://time.geekbang.org/column/intro/85" target="_blank" rel="noopener">极客时间-趣谈网络协议</a></li><li><a href="https://www.amazon.cn/dp/B00VE6RYPS" target="_blank" rel="noopener">《Wireshark网络分析就这么简单》</a></li><li><a href="https://mp.weixin.qq.com/s/WvjQQRRdpMIeArblGV94Tg" target="_blank" rel="noopener">《Wireshark网络抓包从入门到熟练》</a> </li><li><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" target="_blank" rel="noopener">The First Few Milliseconds of an HTTPS Connection</a> </li><li><a href="https://blog.csdn.net/linuxnews/article/details/51900900" target="_blank" rel="noopener">为什么Wireshark无法解密HTTPS数据</a></li><li><a href="https://juejin.im/post/5cc313755188252d6f11b463" target="_blank" rel="noopener">Android平台HTTPS抓包解决方案及问题分析</a></li><li><a href="https://juejin.im/post/5c98482c5188252d9559247e" target="_blank" rel="noopener">Android 网络优化，使用 HTTPDNS 优化 DNS，从原理到 OkHttp 集成</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener">curl 的用法指南</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">curl 网站开发指南</a></li><li><a href="http://cizixs.com/2017/04/11/use-curl-to-analyze-request/" target="_blank" rel="noopener">使用 curl 命令分析请求的耗时情况</a></li><li><a href="https://mp.weixin.qq.com/s/nAY46Cs5TURFnINv_BLb7Q" target="_blank" rel="noopener">在Linux中使用curl命令参数详解</a></li><li><a href="https://www.open-open.com/lib/view/open1419826381531.html" target="_blank" rel="noopener">Nginx 配置从零开始</a></li><li><a href="https://www.open-open.com/news/view/19493be" target="_blank" rel="noopener">https://www.open-open.com/news/view/19493be</a></li><li><a href="https://zhuanlan.zhihu.com/p/34474787" target="_blank" rel="noopener">室友不敢深夜打游戏篇一：ping/ICMP学以致用</a></li><li><a href="https://zhuanlan.zhihu.com/p/34897282" target="_blank" rel="noopener">室友不敢深夜打游戏篇二：如何用python-scapy进行arp欺骗</a></li></ul><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html" target="_blank" rel="noopener">SSH原理与运用（二）：远程登录</a></li><li><a href="https://lotabout.me/2019/SSH-Port-Forwarding/" target="_blank" rel="noopener">SSH 端口转发教程</a></li><li><a href="https://www.jianshu.com/p/defcfdc49b89?utm_campaign=hugo&utm_medium=reader_share&utm_content=note" target="_blank" rel="noopener">SSH 技巧</a></li><li><a href="https://mp.weixin.qq.com/s/KvP55uhq8fGd8NPvXdw0Vg" target="_blank" rel="noopener">ssh密钥对登录安全吗？原理篇</a></li><li><a href="https://imququ.com/post/multiple-ssh-keys-with-different-hosts.html" target="_blank" rel="noopener">针对不同主机使用不同 SSH Key</a></li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/12/mktemp.html" target="_blank" rel="noopener">Bash 脚本如何创建临时文件：mktemp 命令和 trap 命令教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html" target="_blank" rel="noopener">xargs 命令教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html" target="_blank" rel="noopener">Bash 脚本 set 命令教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html" target="_blank" rel="noopener">命令行通配符教程</a></li><li><a href="https://www.kawabangga.com/posts/2819" target="_blank" rel="noopener">Shell单引号、双引号和反引号的区别</a></li><li><a href="http://www.apress.com/br/book/9781484201220" target="_blank" rel="noopener">Pro Bash Programming, Second Edition</a></li><li><a href="https://weibo.com/u/2674868673" target="_blank" rel="noopener">linux命令行精选网</a></li><li><a href="https://blog.csdn.net/Hello_Hwc/article/details/40918385" target="_blank" rel="noopener">linux常用命令-帮助命令-授之以渔</a></li><li><a href="http://kishorelive.com/2011/12/05/printing-colors-in-the-terminal/" target="_blank" rel="noopener">Printing colors in the terminal</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="https://cizixs.com/2017/02/10/network-virtualization-network-namespace/" target="_blank" rel="noopener">linux 网络虚拟化： network namespace 简介</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">Linux 的启动流程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="noopener">Systemd 入门教程：实战篇</a></li><li><a href="https://cuiqingcai.com/6284.html" target="_blank" rel="noopener">详解 Linux 下的用户管理、用户组管理和权限管理</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a></li><li><a href="https://www.dongwm.com/post/docker-machine-and-swarm/" target="_blank" rel="noopener">Python项目容器化实践(二) - Docker Machine和Docker Swarm</a><h2 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h2></li><li><a href="https://www.cnblogs.com/finlay/p/3665302.html" target="_blank" rel="noopener">图像处理：图像灰度化</a></li></ul><h2 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h2><ul><li><a href="https://www.jianshu.com/u/f5a5bfa4f659" target="_blank" rel="noopener">Sqli-Labs</a></li><li><a href="https://thief.one/2017/05/19/1/" target="_blank" rel="noopener">【渗透神器系列】搜索引擎</a></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="http://www.jianshu.com/p/cd3fee40ef59" target="_blank" rel="noopener">前端基础进阶系列</a></li><li><a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">JavaScript深入系列</a></li></ul><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul><li><a href="https://www.jianshu.com/p/a4d0a1c7baae" target="_blank" rel="noopener">iOS阅读列表</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="https://www.jianshu.com/p/505ea52bfe93" target="_blank" rel="noopener">Python阅读列表</a></li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li><a href="https://book.douban.com/subject/25985946/" target="_blank" rel="noopener">Node Cookbook Second Edition</a></li><li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00GOM5IL4" target="_blank" rel="noopener">深入浅出Node.js</a></li></ul><h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/08/elasticsearch.html" target="_blank" rel="noopener">全文搜索引擎 Elasticsearch 入门教程</a></li><li><a href="https://cuiqingcai.com/6214.html" target="_blank" rel="noopener">Elasticsearch 基本介绍及其与 Python 的对接实现</a></li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><a href="https://book.douban.com/subject/30293851/" target="_blank" rel="noopener">Flask Web开发：基于Python的Web应用开发实战</a></li><li><a href="https://www.bignerdranch.com/books/front-end-web-development/" target="_blank" rel="noopener">Front-End Web Development The Big Nerd Ranch Guide</a></li><li><a href="http://www.imooc.com/learn/859" target="_blank" rel="noopener">Handlebars模板引擎</a></li><li><a href="https://mrleo.gitbooks.io/books/content/resource/spy-debugger.html" target="_blank" rel="noopener">https://mrleo.gitbooks.io/books/content/resource/spy-debugger.html</a></li></ul><h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><ul><li><a href="https://book.douban.com/subject/26762311/" target="_blank" rel="noopener">编译系统透视</a></li><li><a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener">SQL基础教程（第2版）</a></li><li><a href="https://item.jd.com/11942019.html" target="_blank" rel="noopener">图解密码技术</a></li><li><a href="http://www.ituring.com.cn/book/1921" target="_blank" rel="noopener">深度学习入门：基于Python的理论与实现(英文名：Deep Learning From Scratch)</a></li><li><a href="http://www.ituring.com.cn/book/2599" target="_blank" rel="noopener">Python深度学习(英文名：Deep Learning With Python)</a></li><li><a href="https://germey.gitbooks.io/python3webspider/content/" target="_blank" rel="noopener">Python3网络爬虫开发实战</a></li><li><a href="http://item.jd.com/12207223.html?dist=" target="_blank" rel="noopener">精通Scrapy网络爬虫</a></li></ul><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://cloverkits.github.io/2018/08/12/%E5%A6%82%E4%BD%95%E7%94%A8%E5%A5%BD%E8%B0%B7%E6%AD%8C%E7%AD%89%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;如何用好谷歌等搜索引擎&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汇编语言入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/11/byte-order.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解字节序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://jalan.space/2019/11/26/2019/binary-show/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;深入浅出：举个例子解读原码、反码与补码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://deerchao.net/tutorials/regex/regex.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML 语言教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/65225f50fe76&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于python flask详述 OAuth 2.0 的运作流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RESTful API 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.kawabangga.com/vim%e7%b3%bb%e5%88%97&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vim系列教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/09/vimrc.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vim 配置入门&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/923aec861af3&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;mac下配置vim&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/JasonDing1354/article/details/45372007&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用map自定义快捷键&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
