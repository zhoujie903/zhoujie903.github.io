<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一吻江山</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-09-29T08:18:43.088Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>jason zhou</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>mitmproxy与charles的抓包应用</title>
    <link href="http://yoursite.com/2019/09/29/mitmproxy-and-charles-use/"/>
    <id>http://yoursite.com/2019/09/29/mitmproxy-and-charles-use/</id>
    <published>2019-09-29T08:14:57.000Z</published>
    <updated>2019-09-29T08:18:43.088Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>mitmproxy是命令行界面，不太方便查看，自己遇到的问题有：</p><ul><li>在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情</li><li>json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文</li><li>不知道怎么复制界面中显示的内容</li></ul><p>Charles的编程能力弱</p><p>把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>电脑和手机都连接到同一个Wi-Fi, 比如TP_LINK_629F<br>电脑: ip=192.168.1.100; 运行着Charles、mitmproxy<br>Charles: 192.168.1.100:8888<br>mitmproxy: 192.168.1.100:8080<br>手机: 设置代理地址为Charles的地址192.168.1.100:8888</p><p>Charles - External Proxy Settings功能开启：</p><ul><li>Web Proxy(HTTP) - Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li><li>Secure Web Proxy(HTTPS) - Secure Web Proxy Server设置为mitmproxy的地址192.168.1.100:8080</li></ul><table><thead><tr><th align="center">手机</th></tr></thead><tbody><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2bq3vglj30u01hcaak.jpg" alt></td></tr><tr><td align="center"></td></tr><tr><td align="center">Charles - External Proxy Settings</td></tr><tr><td align="center"></td></tr><tr><td align="center"><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s2ks0wauj31am0qe76x.jpg" alt></td></tr></tbody></table><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>应用：自动生成接口的python代码</p><p>以<code>趣头条App</code>为例：<br>阅读得积分的接口为: <code>https://api.1sapp.com/readtimer/report</code><br>自动生成的代码大约如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">def readtimer_report(self):</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">&apos;User-Agent&apos;: &apos;qukan_android;retrofit/2.4.0 okhttp/3.11.0;os/7.0 M5 Note Meizu;device/862546036581345;version/3.9.41.000.0904.1121;channel/012&apos;,</span><br><span class="line">&apos;Host&apos;: &apos;api.1sapp.com&apos;,</span><br><span class="line">&apos;Accept-Encoding&apos;: &apos;gzip&apos;,</span><br><span class="line">&apos;Connection&apos;: &apos;keep-alive&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    params = &#123;</span><br><span class="line">&apos;qdata&apos;: &apos;NzVFNkE3Mjc0RjEzRkYwRTM5OTEzNjAyRUZBMDMzQTAuY0dGeVlXMGZPR0kyTldKalltTXRNVGczT1MwME9EZGlMVGszT0RBdE1EUmlOVEV3TWpOak9UazRIblpsY25OcGIyNGZNVEVlY0d4aGRHWnZjbTBmWVc1a2NtOXBaQjVsWXg4eC46LxvyIvgD62/T93SlANmywpigTwlOwcfCHe0iZ1D8mH1zpslt2JCRPdiHOj1M20bU0zDX0odUOBig6Kt51mheNJuQYeDvp15R8RSGTT3LR9s55nBCGvWyTLq+3pjEvkyERElR9E2I384/nHQR4iqxqv7LKQ4rBA0R6bNG8sksHqNl1izSbF87G/4/Qw5vVYcuNUfU0BM6vvIbsy2CTPWlJ51YCzadQZZLONuaYTpyhuOiUV4vnx6qkvpYDNp9XpPPjbXxJAb7fikqjWSdyx167hXDPzUkNZGndjZsv7kQANDkIk2Dm+g5YW1I49xnkOzJkmxvyrLevnsSb9S5fSEUEyfq0GlPHE0RRBeSjFxVltH1zdZraTtk13Z+MvA7HBYQONz/0OwyMnujc1Ety91uKh6YCCVEDvBO+RTOzoRDa3nlRo3FTo9OeRBsyL20qIP24977MMYXEoxinTuwNonipCjnjSYIrhOu6cyv7uxuLd6FxtmTsydawNGMPI/K+habIKXNUFsQMCUcAGhYpoKQJvkQqHEq6lPyZZzXDot1EsN6bsGj56xQdiuJZLMFyZaGNR6E9FmVlI0LAVT8ttVpOvs+5f08T0iMxMNb0VQk6DOySpYHp7EVjc9YFpPcVxj8aXvuTjoPkaNGhSKQ0fgBd8HVRLslcnzX0QLJkTuU7NQ9aili6m2M2hWvh/q8ghWrvtLT+izCiFNKHE+4GTC9J6jqgyjHsXkAjcOSBAaIXMQKnOd664hdoR2GqV+GAy95fc5zZCJ7EFvzmTbJQrpMOwW+Y2NvYPZtgjw1uJEyU7AR7nVw7VqMjPpCDYeWBWoQ1W4OjlXTqgBR4MIu1sTag6a+my/0hItf91SNa58zCN3YmE2NnsWwwiCC+ZP91moV/KqPwX3vMLKW4/3Vsziqe8gl&apos;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    data = &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    url = &apos;http://api.1sapp.com/readtimer/report&apos;</span><br><span class="line">    result = self._get(url, headers=headers, params=params, data=data)</span><br><span class="line">    return result</span><br></pre></td></tr></table></figure><p>应用步骤：</p><ol><li>手机按上面环境设置好代理地址</li><li>在电脑上启动Charles，Charles按上面环境设置</li><li>在电脑上启动mitimproxy, 启动命令如下：<code>mitmproxy -s gen_code_mitm.py</code></li><li>文件gen_code_mitm.py内容参考下面</li><li>在手机<code>趣头条App</code>阅读文章或看视频一定时间</li><li>会在<code>~/Desktop/api/</code>目录下生成一个叫<code>readtimer_report.text</code></li><li>把<code>readtimer_report.text</code>的相应代码复制粘帖到<code>文件qu_tou_tiao.py</code>中</li><li>按需要修改自动生成的代码为希望的样子</li><li>运行<code>qu_tou_tiao.py</code></li></ol><p>注意：</p><ul><li><code>readtimer_report.text</code>的名字和所在目录是由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li><li><code>readtimer_report</code>方法名由代码<code>gen_code_mitm.py</code>决定的，请自行阅读修改</li><li>对body为复杂json格式的代码自动生成会有错误，有能力的自行修改</li><li><code>readtimer/report</code>这个接口自动生成的代码数据是不能重复获取积分的，这里只是演示</li></ul><p><img src="https://tva1.sinaimg.cn/large/006y8mN6ly1g6s4idpz9gj31fa0u045o.jpg" alt></p><h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><p>文件qu_tou_tiao.py: </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">代码模板</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">import requests</span><br><span class="line">import json</span><br><span class="line">import logging</span><br><span class="line"></span><br><span class="line">logging.basicConfig(format=&apos;%(asctime)s:%(message)s&apos;, datefmt=&apos;%m-%d %H:%M:%S&apos;, level=logging.INFO)</span><br><span class="line"></span><br><span class="line">class User(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line">        </span><br><span class="line">    def api_need_implement(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def _header(self):</span><br><span class="line">        return &#123;</span><br><span class="line">            &apos;User-Agent&apos;: &apos;&apos;,</span><br><span class="line">            &apos;Cookie&apos;:self.cookie</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _post(url, data=None, json=None, p=logging.warning, **kwargs):</span><br><span class="line">        res = requests.post(url, data=data, **kwargs)</span><br><span class="line">        result = res.text</span><br><span class="line">        p(res.json())</span><br><span class="line">        logging.info(&apos;&apos;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">    @staticmethod</span><br><span class="line">    def _get(url, params=None, p=logging.warning, **kwargs):</span><br><span class="line">        res = requests.get(url, params=params, **kwargs)</span><br><span class="line">        result = res.text</span><br><span class="line">        p(json.loads(result))</span><br><span class="line">        logging.info(&apos;&apos;)</span><br><span class="line">        return result</span><br><span class="line"></span><br><span class="line">def genUsers():</span><br><span class="line">    yield User()</span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    for user in genUsers():</span><br><span class="line">        user.api_need_implement()</span><br></pre></td></tr></table></figure><p>文件gen_code_mitm.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">from urllib.parse import urlparse</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">生成接口python代码</span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line"></span><br><span class="line">class GenCode(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        ctx.log.info(&apos;__init__&apos;)</span><br><span class="line"></span><br><span class="line">        # 趣头条</span><br><span class="line">        urls = [</span><br><span class="line">            r&apos;taskcenter/getListV2&apos;,#tab页：任务</span><br><span class="line">            r&apos;readtimer/report&apos;,</span><br><span class="line">        ]</span><br><span class="line">        self.qu_tou_tiao = flowfilter.parse(&apos;|&apos;.join(urls)) </span><br><span class="line"></span><br><span class="line">        # 百度 - 全民小视频 </span><br><span class="line">        urls = [</span><br><span class="line">            r&apos;mvideo/api&apos;, # 每日签到</span><br><span class="line">        ]</span><br><span class="line">        self.quan_ming = flowfilter.parse(&apos;|&apos;.join(urls)) </span><br><span class="line"></span><br><span class="line">        self.flowfilters = [</span><br><span class="line">            self.qu_tou_tiao, </span><br><span class="line">            self.quan_ming,</span><br><span class="line">        ]      </span><br><span class="line"></span><br><span class="line">    def load(self, loader):</span><br><span class="line">        ctx.log.info(&apos;event: load&apos;)</span><br><span class="line"></span><br><span class="line">    def configure(self, updated):</span><br><span class="line">        ctx.log.info(&apos;event: configure&apos;)</span><br><span class="line"></span><br><span class="line">    def running(self):</span><br><span class="line">        ctx.log.info(&apos;event: running&apos;)</span><br><span class="line"></span><br><span class="line">    def done(self):</span><br><span class="line">        ctx.log.info(&apos;event: done&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if any( [ filter(flow) for filter in self.flowfilters ] ):</span><br><span class="line"></span><br><span class="line">            request: http.HTTPRequest = flow.request</span><br><span class="line"></span><br><span class="line">            parse_result = urlparse(request.url)</span><br><span class="line">            url_path = parse_result.path</span><br><span class="line"></span><br><span class="line">            function_name = re.sub(r&apos;[/-]&apos;,&apos;_&apos;, url_path).strip(&apos;_&apos;)</span><br><span class="line">            headers_code = self.headers_string(flow)</span><br><span class="line">            params_code = self.params_string(flow)</span><br><span class="line">            data_code = self.data_string(flow) </span><br><span class="line"></span><br><span class="line">            path = f&apos;&apos;&apos;/Users/zhoujie/Desktop/api/&#123;function_name&#125;.text&apos;&apos;&apos;  </span><br><span class="line">            with open(path, &apos;a&apos;) as f:</span><br><span class="line">                print(f&apos;&apos;&apos;# ---------------------&apos;&apos;&apos;,file=f)</span><br><span class="line"></span><br><span class="line">                code = f&apos;&apos;&apos;</span><br><span class="line">def &#123;function_name&#125;(self):</span><br><span class="line"></span><br><span class="line">    &#123;headers_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;params_code&#125;</span><br><span class="line"></span><br><span class="line">    &#123;data_code&#125;</span><br><span class="line"></span><br><span class="line">    url = &apos;&#123;request.scheme&#125;://&#123;request.pretty_host&#125;&#123;url_path&#125;&apos;</span><br><span class="line">    result = self._&#123;request.method.lower()&#125;(url, headers=headers, params=params, data=data)</span><br><span class="line">    return result</span><br><span class="line">                </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">                f.write(code)</span><br><span class="line"></span><br><span class="line">                print(f&apos;&apos;&apos;Response:&apos;&apos;&apos;,file=f)</span><br><span class="line">                print(f&apos;&apos;&apos;&#123;flow.response.text&#125;&apos;&apos;&apos;,file=f)</span><br><span class="line">                print(f&apos;&apos;&apos;# ---------------------\n\n&apos;&apos;&apos;,file=f)</span><br><span class="line"></span><br><span class="line">    def headers_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line">        for key,value in flow.request.headers.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line">        s = f&apos;&apos;&apos;headers = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def params_string(self, flow: http.HTTPFlow):</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line">        for key,value in flow.request.query.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line">        s = f&apos;&apos;&apos;params = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line">    def data_string(self, flow: http.HTTPFlow):</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        Content-Type: application/x-www-form-urlencoded</span><br><span class="line">        Content-Type: application/json; charset=utf-8</span><br><span class="line">        Content-Type: text/plain;charset=utf-8</span><br><span class="line">        &apos;&apos;&apos;</span><br><span class="line">        lines = &apos;&apos;</span><br><span class="line"></span><br><span class="line">        # [urlencoded_form, multipart_form, plan, json]取其一</span><br><span class="line">        for key,value in flow.request.urlencoded_form.items():</span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line"></span><br><span class="line">        for key,value in flow.request.multipart_form.items():</span><br><span class="line">            key = key.decode(encoding=&apos;utf-8&apos;)</span><br><span class="line">            value = value.decode(encoding=&apos;utf-8&apos;) </span><br><span class="line">            lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &apos;&#123;value&#125;&apos;,&quot;</span><br><span class="line"></span><br><span class="line">        # Todo:复杂json数据还不能代码化</span><br><span class="line">        if &apos;application/json&apos; in flow.request.headers.get(&apos;content-type&apos;,&apos;&apos;):</span><br><span class="line">            d = json.loads(flow.request.text)</span><br><span class="line">            for key,value in d.items():</span><br><span class="line">                lines += f&quot;\n\t\t&apos;&#123;key&#125;&apos;: &#123;value&#125;,&quot;</span><br><span class="line">        </span><br><span class="line">        s = f&apos;&apos;&apos;data = &#123;&#123;&#123;lines&#125;\n\t&#125;&#125;&apos;&apos;&apos;        </span><br><span class="line">        return s</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    GenCode()</span><br><span class="line">]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;mitmproxy是命令行界面，不太方便查看，自己遇到的问题有：&lt;/p&gt;&lt;ul&gt;
&lt;li&gt;在Flow Details界面不知道用哪个快捷键查看下一条或上一条网络请求详情&lt;/li&gt;
&lt;li&gt;json中的中文显示为 \ua9b4 或 ？不能看清是哪个中文&lt;/li&gt;
&lt;li&gt;不知道怎么复制界面中显示的内容&lt;/li&gt;
&lt;/ul&gt;&lt;p&gt;Charles的编程能力弱&lt;/p&gt;&lt;p&gt;把Charles和mitmproxy结合起来使用，可以查看方便、编程扩展&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>Charles的应用</title>
    <link href="http://yoursite.com/2019/09/28/Charles%E7%9A%84%E5%BA%94%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/28/Charles的应用/</id>
    <published>2019-09-28T10:27:26.000Z</published>
    <updated>2019-09-29T08:18:45.603Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h2 id="Rewrite应用"><a href="#Rewrite应用" class="headerlink" title="Rewrite应用"></a>Rewrite应用</h2><h3 id="案例01"><a href="#案例01" class="headerlink" title="案例01"></a>案例01</h3><p>问题：<code>今日头条极速版</code>App每天的<code>阅读推送文章</code>任务因为每天收到的推送很少，因而不能得很高的积分，怎样把普通文章的阅读变为推送文章的阅读呢？</p><p>思考：对比普通文章的阅读与推送文章的阅读发出的网络数据，找出差异</p><p>普通文章的阅读与推送文章的阅读达到奖励标准时，都用相同的接口<code>https://is.snssdk.com/score_task/v1/task/get_read_bonus/</code></p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 普通阅读文章/视频</span><br><span class="line">https://is.snssdk.com/score_task/v1/task/get_read_bonus/?fp=xxx&amp;...&amp;group_id=6689697061983486472</span><br><span class="line"></span><br><span class="line"># 推送文章的阅读</span><br><span class="line">https://is.snssdk.com/score_task/v1/task/get_read_bonus/?fp=xxx&amp;...&amp;&amp;impression_type=push&amp;group_id=6689697061983486472</span><br></pre></td></tr></table></figure><p>对比上面的接口数据发现：<br>推送阅读只比普通阅读<strong>多出了impression_type=push</strong>的Query String</p><p>解决：用Charles的<code>Rewrite功能Add Query Param</code>来增加impression_type=push解决问题</p><p><img src="http://upload-images.jianshu.io/upload_images/281540-64acc9462bb437c4.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Add Query Param"></p><p>上面的get_read_bonus重写规则Export导出的get_read_bonus.xml文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version=&apos;1.0&apos; encoding=&apos;UTF-8&apos; ?&gt;</span><br><span class="line">&lt;?charles serialisation-version=&apos;2.0&apos; ?&gt;</span><br><span class="line">&lt;rewriteSet-array&gt;</span><br><span class="line">  &lt;rewriteSet&gt;</span><br><span class="line">    &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">    &lt;name&gt;get_read_bonus&lt;/name&gt;</span><br><span class="line">    &lt;hosts&gt;</span><br><span class="line">      &lt;locationPatterns&gt;</span><br><span class="line">        &lt;locationMatch&gt;</span><br><span class="line">          &lt;location&gt;</span><br><span class="line">            &lt;protocol&gt;https&lt;/protocol&gt;</span><br><span class="line">            &lt;host&gt;is.snssdk.com&lt;/host&gt;</span><br><span class="line">            &lt;path&gt;/score_task/v1/task/get_read_bonus/&lt;/path&gt;</span><br><span class="line">          &lt;/location&gt;</span><br><span class="line">          &lt;enabled&gt;true&lt;/enabled&gt;</span><br><span class="line">        &lt;/locationMatch&gt;</span><br><span class="line">      &lt;/locationPatterns&gt;</span><br><span class="line">    &lt;/hosts&gt;</span><br><span class="line">    &lt;rules&gt;</span><br><span class="line">      &lt;rewriteRule&gt;</span><br><span class="line">        &lt;active&gt;true&lt;/active&gt;</span><br><span class="line">        &lt;ruleType&gt;8&lt;/ruleType&gt;</span><br><span class="line">        &lt;matchHeader&gt;&lt;/matchHeader&gt;</span><br><span class="line">        &lt;matchValue&gt;&lt;/matchValue&gt;</span><br><span class="line">        &lt;matchHeaderRegex&gt;false&lt;/matchHeaderRegex&gt;</span><br><span class="line">        &lt;matchValueRegex&gt;false&lt;/matchValueRegex&gt;</span><br><span class="line">        &lt;matchRequest&gt;false&lt;/matchRequest&gt;</span><br><span class="line">        &lt;matchResponse&gt;false&lt;/matchResponse&gt;</span><br><span class="line">        &lt;newHeader&gt;impression_type&lt;/newHeader&gt;</span><br><span class="line">        &lt;newValue&gt;push&lt;/newValue&gt;</span><br><span class="line">        &lt;newHeaderRegex&gt;false&lt;/newHeaderRegex&gt;</span><br><span class="line">        &lt;newValueRegex&gt;false&lt;/newValueRegex&gt;</span><br><span class="line">        &lt;matchWholeValue&gt;false&lt;/matchWholeValue&gt;</span><br><span class="line">        &lt;caseSensitive&gt;false&lt;/caseSensitive&gt;</span><br><span class="line">        &lt;replaceType&gt;2&lt;/replaceType&gt;</span><br><span class="line">      &lt;/rewriteRule&gt;</span><br><span class="line">    &lt;/rules&gt;</span><br><span class="line">  &lt;/rewriteSet&gt;</span><br><span class="line">&lt;/rewriteSet-array&gt;</span><br></pre></td></tr></table></figure><p>重写规则设置正确与否验证：<br><img src="http://upload-images.jianshu.io/upload_images/281540-ea8dc4743ec32001.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="规则设置正确与否验证"></p><p>在上面的<code>Notes</code>列上会显示<code>Rewrite Tool: query added &quot;impression_type: push&quot;</code></p><p><strong>应用：</strong></p><ol><li>打开Charles并生效上面的Rewrite设置</li><li>手机设置代理为Charles的代理地址</li><li>正常阅读普通文章\视频达到奖励时点</li><li>查找<code>我的收益</code>页面，验证成功与否</li></ol><h3 id="案例02"><a href="#案例02" class="headerlink" title="案例02"></a>案例02</h3><p>问题：<code>趣消除</code>、<code>趣键盘</code>、<code>东方头条</code>等App都看广告得金币，怎样减少广告的时间？</p><p>思考：广告是哪里来的？广告时长是怎么来的？<br>当点击App上的按钮弹出广告时，3个App都调用了接口：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://is.snssdk.com/api/ad/union/sdk/get_ads/</span><br></pre></td></tr></table></figure><p>响应如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">......</span><br><span class="line">&quot;video&quot;: &#123;</span><br><span class="line">&quot;cover_height&quot;: 1280,</span><br><span class="line">&quot;cover_url&quot;: &quot;http://sf1-ttcdn-tos.pstatp.com/img/mosaic-legacy/1be91000a8c62c6ba6221~noop.jpg&quot;,</span><br><span class="line">&quot;cover_width&quot;: 720,</span><br><span class="line">&quot;endcard&quot;: &quot;https://www.toutiaopage.com/union/endcard/1629848424707111/?rit=909946692\u0026req_id=ED6EC127-C359-4C18-A41E-3A5F6F499250u3183\u0026ad_sdk_version=1.9.9.0\u0026os=ios\u0026lang=cn\u0026style_id=1104\u0026ad_id=1629844369912839\u0026_toutiao_params=%7B%22cid%22%3A1629848424707111%2C%22device_id%22%3A9724339963504202%2C%22log_extra%22%3A%22%7B%5C%22ad_price%5C%22%3A%5C%22XOub4AAGRWZc65vgAAZFZgz-hMMMgth42hwxAg%5C%22%2C%5C%22convert_id%5C%22%3A1629408290774020%2C%5C%22orit%5C%22%3A900000000%2C%5C%22req_id%5C%22%3A%5C%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%5C%22%2C%5C%22rit%5C%22%3A909946692%7D%22%2C%22orit%22%3A900000000%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%2C%22sign%22%3A%22D41D8CD98F00B204E9800998ECF8427E%22%2C%22uid%22%3A9724339963504202%2C%22ut%22%3A14%7D\u0026append=%7B%22openurl%22%3A%22%22%2C%22postdata%22%3A%5B%7B%22__type__%22%3A%22req_id%22%2C%22cid%22%3A1629848424707111%2C%22req_id%22%3A%22ED6EC127-C359-4C18-A41E-3A5F6F499250u3183%22%2C%22rit%22%3A909946692%7D%5D%7D&quot;,</span><br><span class="line">&quot;resolution&quot;: &quot;720x1280&quot;,</span><br><span class="line">&quot;size&quot;: 5628226,</span><br><span class="line">&quot;video_duration&quot;: 29.04,</span><br><span class="line">&quot;video_url&quot;: &quot;http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda-jesntzw6569xqudw.mp4&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;],</span><br><span class="line">......</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>广告就是从上面的接口获取而来的，广告时长由<code>video_url</code>字段对应的mp4的时长决定</p><p>解决：用Charles的<code>Rewrite功能Body</code>替换<code>video_url</code>字段的值<br><img src="https://upload-images.jianshu.io/upload_images/281540-e80209bd2b222ac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:Body"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">&quot;video_url&quot;:&quot;(.+)&quot;&#125;</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">&quot;video_url&quot;:&quot;http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda.mp4&quot;&#125;</span><br></pre></td></tr></table></figure><p>提供一个只有3秒的素材：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vd2.bdstatic.com/mda-jesntzw6569xqudw/mda-jesntzw6569xqudw.mp4</span><br></pre></td></tr></table></figure><h3 id="案例03"><a href="#案例03" class="headerlink" title="案例03"></a>案例03</h3><p>问题：<code>章鱼输入法</code>App有看广告得金币，没有像<code>案例02</code>那样找到相应的接口api返回广告视频的URL，怎样减少广告的时间？</p><p>思考：尝试替换广告视频的请求<br>比如广告视频的请求如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Get https://v3-ad.ixigua.com/.../video/m/.../toutiao.mp4</span><br><span class="line"></span><br><span class="line">替换为只有3秒的视频地址</span><br><span class="line">Get http://vd2.bdstatic.com/.../3seconds.mp4</span><br></pre></td></tr></table></figure><p>解决：用Charles的<code>Rewrite功能URL</code>替换请求<br><img src="https://upload-images.jianshu.io/upload_images/281540-aa27f7180fd280a7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Rewrite功能-Type:URL"></p><h3 id="案例04"><a href="#案例04" class="headerlink" title="案例04"></a>案例04</h3><p>问题：<code>扶我起来学数学</code>App的<code>作战休息区</code>有一个游戏<code>伪装者</code>，在上报成绩时，接口有hash字段，修改成绩字段，hash会验证不通过，达到了防止伪造成绩的功能，怎样在hash前伪造成绩？<br><img src="https://upload-images.jianshu.io/upload_images/281540-88406cb857175e0b.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="成绩上报接口"><br>思考：hash算法一般难破解，与其破解hash算法，不如转变思路：修改传入hash的值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">value肯定与成绩相关</span><br><span class="line">hash(value)</span><br></pre></td></tr></table></figure><p>那value具体是怎么样的呢？通过抓包的数据可以判定为是个h5游戏，在js代码中可能包含相要的答案<br><img src="https://upload-images.jianshu.io/upload_images/281540-685fef5fb145856f.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>在浏览器中打开上面中的<code>game.html</code>验证确实是一个h5游戏：<br><img src="https://upload-images.jianshu.io/upload_images/281540-05b3b4529eb81455.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p>解决：</p><ul><li>用Charles的<code>Mirror功能</code>把抓包的数据自动保存为文件，再在文本编辑器中检查代码</li><li>在<code>game.html</code>文件中查找<code>rest/game_report</code>，因为有这个网络包，所以先查找这个关键字，结果如下：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">function _gameReport(score, callBack, hash, time)&#123;</span><br><span class="line">    var oAjax = null;</span><br><span class="line">    //这里进行HTTP请求</span><br><span class="line">    oAjax = new XMLHttpRequest();</span><br><span class="line">    oAjax.open(&apos;post&apos;,HOSTURLAPI+&quot;/rest/game_report&quot;+&quot;?uid=&quot;+UID+&quot;&amp;gameid=&quot;+GAMEID+&quot;&amp;score=&quot;+score+&quot;&amp;tm=&quot;+time+&quot;&amp;hash=&quot;+hash,true);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>查找<code>_gameReport</code>函数的调用者</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">function gameReport(score, callBack)&#123;</span><br><span class="line">    var timeData = new Date().getTime();</span><br><span class="line">    var hashValue = UID+GAMEID+score+timeData;</span><br><span class="line">    var hash = &apos;&apos;;</span><br><span class="line">    dsBridge.call(&apos;hashCode&apos;,hashValue,function(data)&#123;</span><br><span class="line">        hash = data;</span><br><span class="line">        _gameReport(score, callBack, hash, timeData);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">gameReport(b[0], function(success, old_score)&#123;&#125;)</span><br></pre></td></tr></table></figure><p>js代码调用到App的<code>hashCode</code>方法，<code>hashValue = UID+GAMEID+score+timeData</code><br>用Charles的<code>Rewrite功能Body</code>替换：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Match Value:</span><br><span class="line">gameReport(b[0]</span><br><span class="line"></span><br><span class="line">Replace Value:</span><br><span class="line">gameReport(&apos;99&apos;</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/281540-95aa5d5d7a03c5e6.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><ul><li>成绩已修改，hash验证已通过</li></ul><h2 id="Mirror应用"><a href="#Mirror应用" class="headerlink" title="Mirror应用"></a>Mirror应用</h2><p>文档：<a href="https://www.charlesproxy.com/documentation/tools/mirror/" target="_blank" rel="noopener">https://www.charlesproxy.com/documentation/tools/mirror/</a></p><blockquote><p>The Mirror tool saves responses to disk as they are received, creating a mirror copy of websites as you browse them.</p></blockquote><p>Mirror把响应保存为文件到硬盘上</p><p><img src="https://upload-images.jianshu.io/upload_images/281540-9a4d5b1810506685.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image"></p><p><img src="https://upload-images.jianshu.io/upload_images/281540-64531455206484fc.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Mirror保存下来的文件"></p><h2 id="No-Caching-和-Block-Cookies应用"><a href="#No-Caching-和-Block-Cookies应用" class="headerlink" title="No Caching 和 Block Cookies应用"></a>No Caching 和 Block Cookies应用</h2><p>在案例：<code>扶我起来学数学</code>App的<code>伪装者</code>游戏通过Rewrite功能修改了js文件中的内容；但有时js文件不是每次都会传输，而是使用了缓存，这时Rewrite功能就失效了，因为没有发生网络请求；通过<code>No Caching 和 Block Cookies</code>使网络请求每次都发生</p><h2 id="Map-Local应用"><a href="#Map-Local应用" class="headerlink" title="Map Local应用"></a>Map Local应用</h2><table><thead><tr><th>Map Local应用场景</th></tr></thead><tbody><tr><td>修改js文件来改变App行为:</td></tr><tr><td>1. 使用No Caching 和 Block Cookies功能保证js文件通过网络请求加载到App</td></tr><tr><td>2. 使用Mirror功能把js文件保存到电脑上</td></tr><tr><td>3. 使用Map Local功能使App加载修改后的js文件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h2 id=&quot;Rewrite应用&quot;&gt;&lt;a href=&quot;#Rewrite应用&quot; class=&quot;headerlink&quot; title=&quot;Rewrite应用&quot;&gt;&lt;/a&gt;Rewrite应用&lt;/h2&gt;&lt;h3 id=&quot;案例01&quot;&gt;&lt;a href=&quot;#案例01&quot; class=&quot;headerlink&quot; title=&quot;案例01&quot;&gt;&lt;/a&gt;案例01&lt;/h3&gt;&lt;p&gt;问题：&lt;code&gt;今日头条极速版&lt;/code&gt;App每天的&lt;code&gt;阅读推送文章&lt;/code&gt;任务因为每天收到的推送很少，因而不能得很高的积分，怎样把普通文章的阅读变为推送文章的阅读呢？&lt;/p&gt;&lt;p&gt;思考：对比普通文章的阅读与推送文章的阅读发出的网络数据，找出差异&lt;/p&gt;&lt;p&gt;普通文章的阅读与推送文章的阅读达到奖励标准时，都用相同的接口&lt;code&gt;https://is.snssdk.com/score_task/v1/task/get_read_bonus/&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>mitmproxy的使用</title>
    <link href="http://yoursite.com/2019/09/28/mitmproxy%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://yoursite.com/2019/09/28/mitmproxy的使用/</id>
    <published>2019-09-28T01:48:46.000Z</published>
    <updated>2019-09-29T08:02:05.239Z</updated>
    
    <content type="html"><![CDATA[<p>[TOC]</p><h1 id="mitmproxy的使用"><a href="#mitmproxy的使用" class="headerlink" title="mitmproxy的使用"></a>mitmproxy的使用</h1><p><strong>mitmproxy</strong> is a free and open source interactive HTTPS proxy.<br>官网：<a href="https://mitmproxy.org/" target="_blank" rel="noopener">https://mitmproxy.org/</a><br>安装：<code>pip3 install mitmproxy</code> 或 <code>brew install mitmproxy</code><br>安装后有3个命令行工具：mitmproxy, mitmdump, mitmweb</p><a id="more"></a><p>这里不介绍<code>mitmweb</code>的使用，<code>mitmproxy</code>与<code>mitmdump</code>的功能重点：<br><code>mitmproxy</code>：交互式；查看流量数据(请求与响应)；执行自定义脚本<br><code>mitmdump</code>：执行自定义脚本，脚本在Mitmproxy中叫做<code>Addon</code></p><p>使用<code>mitmproxy</code>：因为是命令行界面，所以需要记住一些快捷键<br>使用<code>mitmdump</code>：偏向编写python代码</p><p>通过一个典型的调用，来认识下<code>Mitmproxy</code>下的核心概念：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --set scripts=ad_short_mitm.py &apos;~u baidu\.com&apos;</span><br></pre></td></tr></table></figure><table><thead><tr><th></th><th>在Mitmproxy的叫法</th></tr></thead><tbody><tr><td>set</td><td><code>Command</code></td></tr><tr><td>scripts</td><td><code>Options</code></td></tr><tr><td>ad_short_mitm.py</td><td><code>Addon</code></td></tr><tr><td>‘~u baidu\.com’</td><td><code>Filter expressions</code></td></tr></tbody></table><h2 id="mitmproxy"><a href="#mitmproxy" class="headerlink" title="mitmproxy"></a>mitmproxy</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure><p>输入上面命令，启动mitmproxy并显示<code>Flows界面</code>：</p><table><thead><tr><th>Flows界面</th></tr></thead><tbody><tr><td><img src="https://upload-images.jianshu.io/upload_images/281540-af5b56b103232a27.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Flows界面"></td></tr></tbody></table><h3 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h3><ul><li>第1个也是最重要的快捷键：<code>?</code>: 进入<code>Help界面</code>：</li></ul><table><thead><tr><th>进入Help界面</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td></tr></tbody></table><ul><li>第2个重要的快捷键：<code>:</code>: Command prompt,进入命令输入模式</li></ul><table><thead><tr><th>进入命令输入模式</th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5aqk3tgiej31r40kuwhs.jpg" alt="命令输入模式"></td></tr><tr><td>可以输入的命令：可以在<code>Command Reference界面</code>查看</td></tr><tr><td>可以按<code>tab</code>来命令补全：比如输入flow.m；再按tab; 补全为flow.mark</td></tr><tr><td>可以按<code>tab</code>来路径补全</td></tr><tr><td>按<code>enter</code>执行命令</td></tr><tr><td>常用的命令可以用快捷键，不用进入命令输入模式，省去输入的时间</td></tr></tbody></table><ul><li><strong>界面间跳转快捷键</strong></li></ul><table><thead><tr><th>快捷键</th><th>界面</th><th>截图</th></tr></thead><tbody><tr><td><code>?</code></td><td>Help界面</td><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5a4bm8fymj30xg0oqdjl.jpg" alt="Help界面"></td></tr><tr><td><code>K</code></td><td>Key Bindings界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4hkbne2j30xg0oqjv3.jpg" alt="Key Bindings界面"></td></tr><tr><td><code>P</code></td><td>Flow Details界面</td><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4l0oi7lj30xg0oqwi2.jpg" alt="Flow Details界面"></td></tr><tr><td><code>E</code></td><td>Events界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4mkekpvj30xg0oqaec.jpg" alt="Events界面"></td></tr><tr><td><code>C</code></td><td>Command Reference界面</td><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5a4nxo0cgj30xg0oqjv6.jpg" alt="Command Reference界面"></td></tr><tr><td><code>O</code></td><td>Options界面</td><td><img src="http://ww2.sinaimg.cn/large/006tNc79ly1g5a4pl36xyj30xg0oqadr.jpg" alt="Options界面"></td></tr><tr><td><strong>注意：上面的快捷键，都是大写字母，<code>mitmproxy</code>的快捷键是区分大小写的</strong></td><td></td><td></td></tr><tr><td><strong>Flows界面居然没有快捷键？</strong></td><td></td><td></td></tr></tbody></table><ul><li><strong>导航快捷键</strong></li></ul><table><thead><tr><th>快捷键</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>q</td><td>console.view.pop</td><td>返回：界面间的返回</td></tr><tr><td>g</td><td>console.nav.start</td><td>跳到第一行</td></tr><tr><td>G</td><td>console.nav.end</td><td>跳到最后一行</td></tr><tr><td>h</td><td>console.nav.left</td><td></td></tr><tr><td>j</td><td>console.nav.down</td><td>跳到下一行</td></tr><tr><td>k</td><td>console.nav.up</td><td>跳到上一行</td></tr><tr><td>l</td><td>console.nav.right</td><td></td></tr><tr><td>space</td><td>console.nav.pagedown</td><td></td></tr><tr><td>ctrl b</td><td>console.nav.pageup</td><td></td></tr><tr><td>ctrl f</td><td>console.nav.pagedown</td><td></td></tr><tr><td>tab</td><td>console.nav.next</td><td></td></tr><tr><td><strong>g\G\j\k等这样的导航键是通用的：在Flows、Events、Command、Options等界面都能用</strong></td><td></td><td></td></tr></tbody></table><p>刚开始学命令行界面时，有这么命令、快捷键要记，没记住怎么办？<br>这里介绍下mitmproxy的<code>--no-server, -n</code>应用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --help</span><br><span class="line">usage: mitmproxy [options]</span><br><span class="line">...</span><br><span class="line">Proxy Options:</span><br><span class="line">  --no-server, -n</span><br><span class="line">  --server              Start a proxy server. Enabled by default.</span><br></pre></td></tr></table></figure><ul><li>第1个Terminal窗口里正常启动mitmproxy：<code>➜  ~ mitmproxy</code></li><li>开启第2个Terminal窗口带<code>--no-server</code>选项启动mitmproxy：<code>➜  ~ mitmproxy --no-server</code>；按<code>K</code>/<code>C</code>/<code>O</code>/<code>?</code>查看快捷键、Command、Options、帮助</li></ul><table><thead><tr><th>第2个mitmproxy专门用于查看快捷键、Command、Options、帮助</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d9drzuxfj31ic0ku0uz.jpg" alt></td></tr></tbody></table><h3 id="案例实战"><a href="#案例实战" class="headerlink" title="案例实战"></a>案例实战</h3><p>以<code>东方头条App - 幸运大转盘</code>这个游戏为实战</p><table><thead><tr><th>东方头条App - 幸运大转盘</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d0cz6rndj30n00kgabm.jpg" alt></td></tr><tr><td>1.点击’领取金币’：会发出https://…/zhuanpan/get_zhuanpan_new网络请求</td></tr><tr><td>2.点击’立即领取’：会发出https://…/zhuanpan/get_gold网络请求</td></tr></tbody></table><p>应用目的：通过mitmproxy的replay功能来减少手动操作时间<br>知识点：<code>Filter expressions</code>, <code>Options</code>, <code>Command</code></p><ul><li>1.启动mitmproxy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy</span><br></pre></td></tr></table></figure><ul><li>2.点开<code>东方头条App</code>到<code>幸运大转盘</code>界面</li><li>3.点击’领取金币’；点击’立即领取’；</li><li>问题：这时候mitmrpoxy的<code>Flow界面</code>已包含上面的网络请求，网络请求非常多，怎么找到需要的请求</li><li>解答：应用mitmrpoxy的<code>Filter expressions</code></li><li>4.按<code>f</code>快捷键：设置<code>view_filter</code>这个<code>Option</code></li></ul><table><thead><tr><th>按<code>f</code>快捷键, 设置<code>view_filter</code></th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5d1kj7qvvj316z0u0adk.jpg" alt></td></tr><tr><td>* 5.输入<code>~u zhuanpan</code>, 按回车执行命令</td></tr></tbody></table><table><thead><tr><th>输入<code>~u zhuanpan</code></th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5d1zhmp90j316z0u0gr2.jpg" alt></td></tr><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5d1un59ssj316z0u0dl4.jpg" alt></td></tr></tbody></table><ul><li><p>知识点：<code>~u zhuanpan</code>是<code>Filter expressions</code>：<code>~u regex</code>，用来过滤URL符合regex正则表达式的网络请求；可以按<code>？</code>跳转到<code>Help界面</code>查看全部的<code>Filter expressions</code></p></li><li><p>6.用<code>j</code>导航快捷键定位到<code>zhuanpan/get_zhuanpan_new</code>网络请求；按下<code>m</code>快捷键将这条网络请求标记</p></li></ul><table><thead><tr><th>按下<code>m</code>标记网络请求</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2sgnjiqj316z0u0n2j.jpg" alt></td></tr></tbody></table><ul><li>7.用同样的操作，标记<code>zhuanpan/get_gold</code>网络请求</li></ul><table><thead><tr><th>按下<code>m</code>标记网络请求</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79gy1g5d2va55pyj316z0u079q.jpg" alt></td></tr></tbody></table><ul><li>8.按<code>:</code>快捷键, 进入命令输入模式；输入<code>rep</code>, 按<code>tab</code>补全命令; 输入<code>@marked</code>; 按回车执行命令</li></ul><table><thead><tr><th>按<code>tab</code>补全命令</th></tr></thead><tbody><tr><td><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g5d3gwr0noj316z0u07a6.jpg" alt> <img src="http://ww3.sinaimg.cn/large/006tNc79gy1g5d3q3ou9pj316z0u0q5x.jpg" alt></td></tr></tbody></table><p>出于演示使用mitmrpoxy的目的，才增加了许多不必要的步骤；简洁方法：</p><ul><li>去除步骤4、5、6、7</li><li>步骤8改为<code>: replay.client &quot;(~u zhuanpan/get_zhuanpan_new) | (~u zhuanpan/get_gold)&quot;</code></li></ul><p>案例到此结束，小结下用到的快捷键、命令：</p><table><thead><tr><th>快捷键</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td><code>f</code></td><td>: set view_fliter=</td><td>只显示符合条件的网络请求</td></tr><tr><td><code>m</code></td><td>flow.mark.toggle @focus</td><td>Toggle mark on this flow</td></tr><tr><td></td><td>: replay.client @marked</td><td>重放多条标记的网络请求</td></tr></tbody></table><p>相关快捷键：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>M</td><td>flowlist</td><td>view.marked.toggle</td><td>Toggle viewing marked flows</td></tr><tr><td>U</td><td>flowlist</td><td>flow.mark @all false</td><td>Un-set all marks</td></tr><tr><td>r</td><td>flowlist</td><td>replay.client @focus</td><td>Replay this flow</td></tr></tbody></table><p>一些用到<code>Filter expressions</code>的<code>Options</code>:<br>view_filter、save_stream_filter、intercept</p><p>相关文档：<br><a href="https://docs.mitmproxy.org/stable/concepts-options/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/concepts-options/</a><br><a href="https://docs.mitmproxy.org/stable/concepts-filters/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/concepts-filters/</a></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><p>上面的实战有以下几个问题：</p><ul><li>第1次收集操作时，不是每次都抽到金币，也有可能抽到广告；怎样每次都跳过广告？</li><li>游戏有20次机会，要手动输入多次<code>replay.client @marked</code>才能把20次机会用完；怎样才能减少手动操作？</li></ul><p>这些问题我们通过编写脚本来解决。这里使用<code>mitmproxy</code>的其它功能为编写脚本提供方便<br>把实战的已被标记的2个网络请求保存为文件，方便查看：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>flowlist</td><td>console.command save.file @shown</td><td>Save listed flows to file</td></tr></tbody></table><ul><li>1.按<code>w</code>快捷键, 把<code>@shown</code>修改为<code>@marked</code>; 指定保存路径；按回车执行命令</li></ul><table><thead><tr><th>按<code>w</code>保存为文件</th></tr></thead><tbody><tr><td><img src="http://ww1.sinaimg.cn/large/006tNc79ly1g5ggp27f86j31c80u0dll.jpg" alt> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ggphx21nj31c80u0ag4.jpg" alt></td></tr><tr><td>输入路径时，可以按<code>tab</code>来补全路径</td></tr><tr><td>最好不要使用<code>~</code>：像我自己Mac上输入<code>~/zhuanpan.mitm</code>，没有保存成功；当然你也可以测试下使用<code>~</code>的路径能否保存成功</td></tr><tr><td>输入的文件的后缀名是可以随意指定的；保存的文件为二进制格式</td></tr></tbody></table><ul><li>2.开启第2个Terminal窗口带–no-server选项启动mitmproxy</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmproxy --no-server</span><br></pre></td></tr></table></figure><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>L</td><td>flowlist</td><td>console.command view.load</td><td>Load flows from file</td></tr></tbody></table><ul><li>3.按<code>L</code>快捷键, 把步骤1保存的文件加载进来</li></ul><table><thead><tr><th>按<code>L</code>加载文件</th></tr></thead><tbody><tr><td><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g5ghc549tnj31c80u0q7b.jpg" alt> <img src="http://ww4.sinaimg.cn/large/006tNc79ly1g5ghcff17bj31c80u0q7e.jpg" alt></td></tr></tbody></table><p>好了，编写脚本的准备工作结束！<br>小结下用到的快捷键、命令：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>w</td><td>flowlist</td><td>console.command save.file @shown</td><td>Save listed flows to file</td></tr><tr><td>L</td><td>flowlist</td><td>console.command view.load</td><td>Load flows from file</td></tr></tbody></table><p>相关快捷键：</p><table><thead><tr><th>快捷键</th><th>界面</th><th>command</th><th>说明</th></tr></thead><tbody><tr><td>e</td><td>flowlist</td><td>console.command export.file {choice} @focus</td><td>Export this flow to file</td></tr></tbody></table><p>快捷键<code>w</code>与<code>e</code>的区别</p><table><thead><tr><th>w</th><th>e</th></tr></thead><tbody><tr><td>文件为二进制文件</td><td>文件为文本文件</td></tr><tr><td>保存的信息完整</td><td>只保存请求信息，不保存响应信息</td></tr><tr><td>能一次保存多条网络请求信息</td><td>一次只能保存一条网络请求信息</td></tr></tbody></table><h2 id="mitmdump"><a href="#mitmdump" class="headerlink" title="mitmdump"></a>mitmdump</h2><p><code>Mitmproxy</code>是用python实现的，编写相应的<code>Addon</code>脚本也是用python</p><h3 id="shell脚本"><a href="#shell脚本" class="headerlink" title="shell脚本"></a>shell脚本</h3><p>先用在<code>mitmproxy</code>的<code>e</code>快捷键来辅助编写shell脚本，来解决下上面的实战问题</p><ul><li><ol><li>用<code>e</code>快捷键分别保存<code>zhuanpan/get_zhuanpan_new</code>、<code>zhuanpan/get_gold</code>网络请求为文件<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code></li></ol></li></ul><p>get_zhuanpan_new.sh文件内容：[get_gold.sh内容类似，不再列出]</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -H &apos;Host:zhuanpan.dftoutiao.com&apos; -H &apos;Content-Type:application/x-www-form-urlencoded&apos; -H &apos;Connection:keep-alive&apos; -H &apos;Accept:*/*&apos; -H &apos;User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)&apos; -H &apos;Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8&apos; -H &apos;Content-Length:484&apos; -H &apos;Accept-Encoding:br, gzip, deflate&apos; -X POST &apos;https://zhuanpan.dftoutiao.com/zhuanpan/get_zhuanpan_new&apos; --data-binary &apos;accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;num=57&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368354&apos;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>把<code>get_zhuanpan_new.sh</code>、<code>get_gold.sh</code>的内容合并到最终的文件中<code>zhuanpan.sh</code></li></ol></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/usr/bin/env bash</span></span><br><span class="line"></span><br><span class="line">function zhuanpan</span><br><span class="line">&#123;</span><br><span class="line">    # mitmproxy用快捷键e导出的get_zhuanpan_new.sh文件内容原样写到这</span><br><span class="line">    curl -H 'Host:zhuanpan.dftoutiao.com' -H 'Content-Type:application/x-www-form-urlencoded' -H 'Connection:keep-alive' -H 'Accept:*/*' -H 'User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)' -H 'Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8' -H 'Content-Length:484' -H 'Accept-Encoding:br, gzip, deflate' -X POST 'https://zhuanpan.dftoutiao.com/zhuanpan/get_zhuanpan_new' --data-binary 'accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;num=57&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=5aac4e159e8d205c084c9f9e6cf4e41f&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368354'</span><br><span class="line"></span><br><span class="line">    # mitmproxy用快捷键e导出的get_gold.sh文件内容原样写到这</span><br><span class="line">    curl -H 'Host:zhuanpan.dftoutiao.com' -H 'Content-Type:application/x-www-form-urlencoded' -H 'Connection:keep-alive' -H 'Accept:*/*' -H 'User-Agent:DFTT/2.4.8 (iPhone; iOS 12.3.1; Scale/3.00)' -H 'Accept-Language:zh-Hans-CN;q=1, en-CN;q=0.9, zh-Hant-CN;q=0.8' -H 'Content-Length:487' -H 'Accept-Encoding:br, gzip, deflate' -X POST 'https://zhuanpan.dftoutiao.com/zhuanpan/get_gold' --data-binary 'accid=834536089&amp;appqid=AppStore190602&amp;apptypeid=DFTT&amp;appver=2.4.8&amp;device=iPhone%206s%20Plus%20%28A1634/A1687%29&amp;deviceid=AE9418A1-561A-4F5C-AF05-1EC222A50CF3&amp;fr=rwzx&amp;ime=F2B14555-E2EB-4556-B757-2C55799C92C2&amp;isfirst=0&amp;lt=d2RlWExGb015UjRqSkxMZk0rRkYwcTAzd0I3RmErMWRLbzZsYTc4dkFtakxLMmgvdW9xWFhYUEFNdU9XTHZMV3F6cWNhVXRPalBSMkJNUHlvTktRbnc9PQ%3D%3D&amp;network=wifi&amp;os=iOS%2012.3.1&amp;position=%E6%B5%99%E6%B1%9F&amp;sign=c6f61f80d1c001ac5382ef73632e0e9e&amp;softname=DFTTIOS&amp;softtype=TouTiao&amp;ts=1564368376'</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">for ((i=0; i&lt;20; i++));</span><br><span class="line">do</span><br><span class="line">    zhuanpan</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>ok，shell脚本以编写完成</p><h3 id="python脚本"><a href="#python脚本" class="headerlink" title="python脚本"></a>python脚本</h3><p>关于<code>Addon</code>的概念可以查看：<br><a href="https://docs.mitmproxy.org/stable/addons-overview/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/addons-overview/</a></p><p>编写<code>Addon</code>脚本写些什么呢？先上一下模板：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line">from mitmproxy import addonmanager</span><br><span class="line"></span><br><span class="line">class Myaddon(object):</span><br><span class="line"></span><br><span class="line">    def __init__(self):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def load(self, entry: addonmanager.Loader):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def request(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        pass</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Myaddon()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>编写<code>Addon</code>脚本:就是选择性的实现上面的方法</strong></p><p><strong>具体都有哪些方法可以选择性实现，可以查看如下文档：</strong></p><table><thead><tr><th></th><th></th></tr></thead><tbody><tr><td>文档</td><td><a href="https://docs.mitmproxy.org/stable/addons-events/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/addons-events/</a></td></tr><tr><td>源代码</td><td>docs/src/examples/addons/events.py</td></tr><tr><td>源代码</td><td>mitmproxy/eventsequence.py</td></tr></tbody></table><p>开始实现<code>Addon</code>脚本：</p><ul><li><ol><li>新建文件<code>zhuangpan_mitm.py</code>, 实现<code>__init__</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line">import re</span><br><span class="line"></span><br><span class="line">from mitmproxy import ctx</span><br><span class="line">from mitmproxy import flowfilter</span><br><span class="line">from mitmproxy import http</span><br><span class="line"></span><br><span class="line">class Zhuangpan(object):</span><br><span class="line">    def __init__(self):</span><br><span class="line">        self.filter = flowfilter.parse(r&apos;(~u zhuanpan/get_zhuanpan_new) | (~u zhuanpan/get_gold)&apos;)</span><br><span class="line">        self.new_fliter = flowfilter.parse(r&apos;~u zhuanpan/get_zhuanpan_new&apos;) </span><br><span class="line">        self.get_fliter = flowfilter.parse(r&apos;~u zhuanpan/get_gold&apos;)</span><br><span class="line">        self.flows = []</span><br><span class="line">        self.urls = set()</span><br><span class="line">        self.remain = 0</span><br><span class="line"></span><br><span class="line">addons = [</span><br><span class="line">    Zhuangpan()</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>这里用到了Mitmproxy的api:<code>flowfilter.parse</code>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># mitmproxy/flowfilter.py文件</span><br><span class="line">def parse(s: str) -&gt; TFilter:</span><br><span class="line"></span><br><span class="line"># 还定义了：</span><br><span class="line">def match(flt, flow):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">        Matches a flow against a compiled filter expression.</span><br><span class="line">        Returns True if matched, False if not.</span><br><span class="line">        ....</span><br><span class="line">    &quot;&quot;&quot;</span><br></pre></td></tr></table></figure><ul><li><ol start="2"><li>实现<code>request</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Zhuangpan(object):</span><br><span class="line">    ...</span><br><span class="line">    def request(self, flow: http.HTTPFlow):               </span><br><span class="line">        if flowfilter.match(self.filter, flow):</span><br><span class="line">            url = flow.request.url</span><br><span class="line">            if not url in self.urls: </span><br><span class="line">                ctx.log.alert(url)</span><br><span class="line">                self.flows.append(flow)</span><br><span class="line">                self.urls.add(url)</span><br></pre></td></tr></table></figure><ul><li><ol start="3"><li>实现<code>response</code>方法：</li></ol></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Zhuangpan(object):                       </span><br><span class="line">    ...</span><br><span class="line">    def response(self, flow: http.HTTPFlow):</span><br><span class="line">        if flowfilter.match(self.new_fliter, flow):</span><br><span class="line">            flow.response.replace(r&apos;&quot;gold&quot;:0&apos;, &apos;&quot;gold&quot;:999&apos;)</span><br><span class="line"></span><br><span class="line">            text = flow.response.text</span><br><span class="line">            data = json.loads(text)</span><br><span class="line">            self.remain = data.get(&apos;data&apos;).get(&apos;cur_num&apos;)</span><br><span class="line">            ctx.log.alert(&apos;remain count:&#123;&#125;&apos;.format(self.remain))</span><br><span class="line"></span><br><span class="line">        if flowfilter.match(self.get_fliter, flow):</span><br><span class="line">            if self.remain &gt; 0 and len(self.urls) &gt;= 2:                </span><br><span class="line">                flows = [f.copy() for f in self.flows]</span><br><span class="line">                ctx.master.commands.call(&quot;replay.client&quot;, flows)</span><br></pre></td></tr></table></figure><p>使用<code>ctx.log.xxx</code>等方法来代替使用<code>print</code>或<code>logging.warning</code>等方法：  </p><ul><li>在mitmproxy中，<code>ctx.log.xxx</code>记录的信息会出现在<code>Event</code>界面,         而其它方法不会出现在<code>Event</code>界面</li><li>在mitmdump中，<code>ctx.log.xxx</code>记录的信息事件显示的顺序正确,         而其它方法显示的顺序不正确</li></ul><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ mitmdump --scripts zhuangpan_mitm.py</span><br><span class="line">Loading script zhuangpan_mitm.py</span><br><span class="line">Proxy server listening at http://*:8080</span><br><span class="line"></span><br><span class="line">  # --scripts SCRIPT, -s SCRIPT</span><br><span class="line">                        Execute a script. May be passed multiple times.</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">mitmdump --set userid=zhj -s &quot;mitm_user_xxx.py&quot;  -s math_mitm.py &apos;~u mapi.hddgood.com&apos;</span><br><span class="line"></span><br><span class="line">mitmdump --set replacements=&apos;/~s/&quot;video_url&quot;:&quot;(.+)&quot;&#125;/&quot;video_url&quot;:&quot;https://vd3.bdstatic.com/abc.mp4&quot;&#125;&apos;</span><br><span class="line"></span><br><span class="line"># 代码里可以调用</span><br><span class="line">ctx.master.commands.call(&quot;replay.client&quot;, [flow])</span><br><span class="line"></span><br><span class="line">ctx.master.commands.execute(&quot;view.focus.go 0&quot;)</span><br></pre></td></tr></table></figure><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><p>问题：只关注某个域名下的流量，怎么设置？<br>解决：ignore_hosts<br><a href="https://docs.mitmproxy.org/stable/howto-ignoredomains/" target="_blank" rel="noopener">https://docs.mitmproxy.org/stable/howto-ignoredomains/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Ignore everything but example.com and mitmproxy.org:</span><br><span class="line">--ignore-hosts &apos;^(?!example\.com)(?!mitmproxy\.org)&apos;</span><br><span class="line"></span><br><span class="line">正则表达式：反前瞻</span><br><span class="line">反前瞻：要匹配某个模式时，需要在它 后面找不到含有给定前瞻模式的内容</span><br><span class="line">foo(?!bar)  Negative lookahead assertion. The pattern foo will only match if not followed by a match of pattern bar.</span><br></pre></td></tr></table></figure><h2 id="代码阅读"><a href="#代码阅读" class="headerlink" title="代码阅读"></a>代码阅读</h2><p>源码地址：<a href="https://github.com/mitmproxy/mitmproxy" target="_blank" rel="noopener">https://github.com/mitmproxy/mitmproxy</a></p><p>mitmproxy/tools/_main.py</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">入口方法：</span><br><span class="line">def mitmproxy(args=None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(console.master.ConsoleMaster)</span><br><span class="line"></span><br><span class="line">def mitmdump(args=None) -&gt; typing.Optional[int]:</span><br><span class="line">    run(dump.DumpMaster)</span><br><span class="line">    </span><br><span class="line">主要代码</span><br><span class="line">def run(master_cls):</span><br><span class="line"></span><br><span class="line">    opts   = options.Options()</span><br><span class="line">    master = master_cls(opts)</span><br><span class="line">    </span><br><span class="line">    pconf  = proxy.config.ProxyConfig(opts)</span><br><span class="line">    server = proxy.server.ProxyServer(pconf)</span><br><span class="line">    </span><br><span class="line">    master.server = server</span><br><span class="line">    master.run()</span><br><span class="line">    return master</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">master.Master</span><br><span class="line">    console.master.ConsoleMaster</span><br><span class="line">    dump.DumpMaster</span><br><span class="line">    web.master.WebMaster</span><br><span class="line"></span><br><span class="line">Server</span><br><span class="line">    proxy.server.ProxyServer</span><br><span class="line">    proxy.server.DummyServer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master与Server关系：</span><br><span class="line">    master.server = server</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Master和Server对象生成：</span><br><span class="line">    Master(opts: options.Options)</span><br><span class="line">    Server(config: config.ProxyConfig)</span><br><span class="line"></span><br><span class="line">ProxyConfig与Options关系：</span><br><span class="line">    ProxyConfig(options: options.Options)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">开始运行：</span><br><span class="line">    master.run()</span><br><span class="line">        master.start()</span><br><span class="line"></span><br><span class="line">    def start(self):</span><br><span class="line">        if self.server:</span><br><span class="line">            ServerThread(self.server).start()</span><br><span class="line"></span><br><span class="line">class ServerThread(basethread.BaseThread):</span><br><span class="line">    def __init__(self, server):</span><br><span class="line">        self.server = server</span><br><span class="line">        address = getattr(self.server, &quot;address&quot;, None)</span><br><span class="line">        super().__init__(</span><br><span class="line">            &quot;ServerThread (&#123;&#125;)&quot;.format(repr(address))</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    def run(self):</span><br><span class="line">        self.server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">线程：</span><br><span class="line">    ServerThread</span><br><span class="line">    connection_thread</span><br><span class="line"></span><br><span class="line">    def connection_thread(self, connection, client_address):</span><br><span class="line">        with self.handler_counter:</span><br><span class="line">            try:</span><br><span class="line">                self.handle_client_connection(connection, client_address)</span><br><span class="line">            finally:</span><br><span class="line">                close_socket(connection)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    def handle_client_connection(self, conn, client_address):</span><br><span class="line">        h = ConnectionHandler(</span><br><span class="line">            conn,</span><br><span class="line">            client_address,</span><br><span class="line">            self.config,</span><br><span class="line">            self.channel</span><br><span class="line">        )</span><br><span class="line">        h.handle()</span><br><span class="line"></span><br><span class="line">    def handle(self):</span><br><span class="line">        self.log(&quot;clientconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">        root_layer = None</span><br><span class="line">        root_layer = self._create_root_layer()</span><br><span class="line">        root_layer = self.channel.ask(&quot;clientconnect&quot;, root_layer)</span><br><span class="line">        root_layer()</span><br><span class="line"></span><br><span class="line">        self.log(&quot;clientdisconnect&quot;, &quot;info&quot;)</span><br><span class="line"></span><br><span class="line">    def _create_root_layer(self):</span><br><span class="line">        root_ctx = ...</span><br><span class="line">        mode = self.config.options.mode</span><br><span class="line">        if mode.startswith(&quot;upstream:&quot;):</span><br><span class="line">            return modes.HttpUpstreamProxy</span><br><span class="line">        elif mode == &quot;transparent&quot;:</span><br><span class="line">            return modes.TransparentProxy(root_ctx)</span><br><span class="line">        elif mode == &quot;regular&quot;:</span><br><span class="line">            return modes.HttpProxy(root_ctx)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">addons的运行过程[生命周期]</span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line"></span><br><span class="line">[1]. &quot;load&quot;</span><br><span class="line">DumpMaster.__init__(self,options):</span><br><span class="line">    super().__init__(options)</span><br><span class="line">    self.addons.add(*addons.default_addons())</span><br><span class="line"></span><br><span class="line">AddonManager.add(self, *addons):</span><br><span class="line">    for i in addons:</span><br><span class="line">        self.chain.append(self.register(i))</span><br><span class="line">        </span><br><span class="line">AddonManager.register(self, addon):</span><br><span class="line">    l = Loader(self.master)</span><br><span class="line">    self.invoke_addon(addon, &quot;load&quot;, l)</span><br><span class="line">    </span><br><span class="line">[2]. &quot;running&quot;</span><br><span class="line">master.run():</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    self.run_loop(loop.run_forever)</span><br><span class="line">        </span><br><span class="line">    master.run_loop(self, loop):</span><br><span class="line">        asyncio.ensure_future(self.running())</span><br><span class="line">        </span><br><span class="line">    master.running(self):</span><br><span class="line">        self.addons.trigger(&quot;running&quot;)</span><br><span class="line">        </span><br><span class="line">[3]. &quot;configure&quot;</span><br><span class="line">class AddonManager:</span><br><span class="line">    def __init__(self, master):</span><br><span class="line">        self.lookup = &#123;&#125;</span><br><span class="line">        self.chain = []</span><br><span class="line">        self.master = master</span><br><span class="line">        master.options.changed.connect(self._configure_all)</span><br><span class="line"></span><br><span class="line">    def _configure_all(self, options, updated):</span><br><span class="line">        self.trigger(&quot;configure&quot;, updated)</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script" target="_blank" rel="noopener">https://stackoverflow.com/questions/51893788/using-mitmproxy-inside-python-script</a></p><p><a href="https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg" target="_blank" rel="noopener">https://dev.to/kevcui/3-mitmproxy-tips-you-might-not-know-about-5dbg</a></p><p><a href="https://github.com/KevCui/mitm-scripts" target="_blank" rel="noopener">https://github.com/KevCui/mitm-scripts</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;[TOC]&lt;/p&gt;&lt;h1 id=&quot;mitmproxy的使用&quot;&gt;&lt;a href=&quot;#mitmproxy的使用&quot; class=&quot;headerlink&quot; title=&quot;mitmproxy的使用&quot;&gt;&lt;/a&gt;mitmproxy的使用&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;mitmproxy&lt;/strong&gt; is a free and open source interactive HTTPS proxy.&lt;br&gt;官网：&lt;a href=&quot;https://mitmproxy.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://mitmproxy.org/&lt;/a&gt;&lt;br&gt;安装：&lt;code&gt;pip3 install mitmproxy&lt;/code&gt; 或 &lt;code&gt;brew install mitmproxy&lt;/code&gt;&lt;br&gt;安装后有3个命令行工具：mitmproxy, mitmdump, mitmweb&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="mitmproxy" scheme="http://yoursite.com/tags/mitmproxy/"/>
    
      <category term="charles" scheme="http://yoursite.com/tags/charles/"/>
    
  </entry>
  
  <entry>
    <title>iOS快速设置代理</title>
    <link href="http://yoursite.com/2019/09/27/ios-switch-proxy/"/>
    <id>http://yoursite.com/2019/09/27/ios-switch-proxy/</id>
    <published>2019-09-27T14:30:52.000Z</published>
    <updated>2019-09-29T07:58:27.113Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>手动设置wifi的步骤非常长：</p><ol><li>点击“设置”</li><li>点击“无线局域网”</li><li>点击已连接的wifi</li><li>点击“配置代理”</li><li>点击“手动”</li><li>定位服务器输入框，输入ip</li><li>定位端口输入框，输入port</li><li>点击“存储”</li></ol><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><p>用iOS上的Shadowrocket和Mac上的Charles来快速设置代理<br>iOS和Mac在同一wifi</p><a id="more"></a><ol><li>启动Charles，假设代理地址为：192.168.0.100:8888</li><li>Shadowrocket设置<code>全局路由</code>为<code>代理</code></li><li>Shadowrocket添加<code>HTTP</code>类型的节点</li><li>Shadowrocket打开连接</li></ol><p><strong>添加<code>HTTP</code>类型的节点:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-3a3a4df908ac1248.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="添加节点"></p><p><strong>结果:</strong><br><img src="http://upload-images.jianshu.io/upload_images/281540-c94d3b52048e63e7.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="结果"></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问题&quot;&gt;&lt;/a&gt;问题&lt;/h2&gt;&lt;p&gt;手动设置wifi的步骤非常长：&lt;/p&gt;&lt;ol&gt;
&lt;li&gt;点击“设置”&lt;/li&gt;
&lt;li&gt;点击“无线局域网”&lt;/li&gt;
&lt;li&gt;点击已连接的wifi&lt;/li&gt;
&lt;li&gt;点击“配置代理”&lt;/li&gt;
&lt;li&gt;点击“手动”&lt;/li&gt;
&lt;li&gt;定位服务器输入框，输入ip&lt;/li&gt;
&lt;li&gt;定位端口输入框，输入port&lt;/li&gt;
&lt;li&gt;点击“存储”&lt;/li&gt;
&lt;/ol&gt;&lt;h2 id=&quot;解决&quot;&gt;&lt;a href=&quot;#解决&quot; class=&quot;headerlink&quot; title=&quot;解决&quot;&gt;&lt;/a&gt;解决&lt;/h2&gt;&lt;p&gt;用iOS上的Shadowrocket和Mac上的Charles来快速设置代理&lt;br&gt;iOS和Mac在同一wifi&lt;/p&gt;
    
    </summary>
    
    
    
      <category term="代理" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%90%86/"/>
    
      <category term="iOS" scheme="http://yoursite.com/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2019/09/27/hello-world/"/>
    <id>http://yoursite.com/2019/09/27/hello-world/</id>
    <published>2019-09-27T13:34:13.443Z</published>
    <updated>2019-09-27T13:34:13.444Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><a id="more"></a><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;documentation&lt;/a&gt; for more info. If you get any problems when using Hexo, you can find the answer in &lt;a href=&quot;https://hexo.io/docs/troubleshooting.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;troubleshooting&lt;/a&gt; or you can ask me on &lt;a href=&quot;https://github.com/hexojs/hexo/issues&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>我的阅读列表</title>
    <link href="http://yoursite.com/2019/09/27/%E6%88%91%E7%9A%84%E9%98%85%E8%AF%BB%E5%88%97%E8%A1%A8/"/>
    <id>http://yoursite.com/2019/09/27/我的阅读列表/</id>
    <published>2019-09-27T05:09:47.000Z</published>
    <updated>2019-09-28T05:16:24.496Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html" target="_blank" rel="noopener">汇编语言入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/11/byte-order.html" target="_blank" rel="noopener">理解字节序</a></li><li><a href="http://deerchao.net/tutorials/regex/regex.htm" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="noopener">YAML 语言教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">理解OAuth 2.0</a></li><li><a href="https://www.jianshu.com/p/65225f50fe76" target="_blank" rel="noopener">基于python flask详述 OAuth 2.0 的运作流程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html" target="_blank" rel="noopener">RESTful API 最佳实践</a></li></ul><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><ul><li><a href="https://book.douban.com/subject/30357170/" target="_blank" rel="noopener">《我的第一本算法书》</a></li><li><a href="https://time.geekbang.org/column/intro/126" target="_blank" rel="noopener">极客时间-数据结构与算法之美</a></li><li><a href="https://time.geekbang.org/course/intro/130" target="_blank" rel="noopener">极客时间-算法面试通关40讲</a></li></ul><h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><ul><li><a href="https://time.geekbang.org/column/intro/85" target="_blank" rel="noopener">极客时间-趣谈网络协议</a></li><li><a href="https://www.amazon.cn/dp/B00VE6RYPS" target="_blank" rel="noopener">《Wireshark网络分析就这么简单》</a></li><li><a href="https://mp.weixin.qq.com/s/WvjQQRRdpMIeArblGV94Tg" target="_blank" rel="noopener">《Wireshark网络抓包从入门到熟练》</a> </li><li><a href="http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html" target="_blank" rel="noopener">The First Few Milliseconds of an HTTPS Connection</a> </li><li><a href="https://blog.csdn.net/linuxnews/article/details/51900900" target="_blank" rel="noopener">为什么Wireshark无法解密HTTPS数据</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/curl-reference.html" target="_blank" rel="noopener">curl 的用法指南</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/09/curl.html" target="_blank" rel="noopener">curl 网站开发指南</a></li><li><a href="http://cizixs.com/2017/04/11/use-curl-to-analyze-request/" target="_blank" rel="noopener">使用 curl 命令分析请求的耗时情况</a></li><li><a href="https://mp.weixin.qq.com/s/nAY46Cs5TURFnINv_BLb7Q" target="_blank" rel="noopener">在Linux中使用curl命令参数详解</a></li></ul><a id="more"></a><h2 id="协议"><a href="#协议" class="headerlink" title="协议"></a>协议</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">WebSocket 教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_remote_login.html" target="_blank" rel="noopener">SSH原理与运用（一）：远程登录</a></li><li><a href="http://www.ruanyifeng.com/blog/2011/12/ssh_port_forwarding.html" target="_blank" rel="noopener">SSH原理与运用（二）：远程登录</a></li><li><a href="https://www.jianshu.com/p/defcfdc49b89?utm_campaign=hugo&utm_medium=reader_share&utm_content=note" target="_blank" rel="noopener">SSH 技巧</a></li><li><a href="https://mp.weixin.qq.com/s/KvP55uhq8fGd8NPvXdw0Vg" target="_blank" rel="noopener">ssh密钥对登录安全吗？原理篇</a></li><li><a href="https://imququ.com/post/multiple-ssh-keys-with-different-hosts.html" target="_blank" rel="noopener">针对不同主机使用不同 SSH Key</a></li></ul><h2 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript</h2><ul><li><a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">ECMAScript 6 入门</a></li><li><a href="http://www.jianshu.com/p/cd3fee40ef59" target="_blank" rel="noopener">前端基础进阶系列</a></li><li><a href="https://github.com/mqyqingfeng/Blog" target="_blank" rel="noopener">JavaScript深入系列</a></li></ul><h2 id="iOS"><a href="#iOS" class="headerlink" title="iOS"></a>iOS</h2><ul><li><a href="https://www.jianshu.com/p/a4d0a1c7baae" target="_blank" rel="noopener">iOS阅读列表</a></li></ul><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><ul><li><a href="https://www.jianshu.com/p/505ea52bfe93" target="_blank" rel="noopener">Python阅读列表</a></li></ul><h2 id="Node-js"><a href="#Node-js" class="headerlink" title="Node.js"></a>Node.js</h2><ul><li><a href="https://book.douban.com/subject/25985946/" target="_blank" rel="noopener">Node Cookbook Second Edition</a></li><li><a href="https://www.amazon.cn/%E5%9B%BE%E4%B9%A6/dp/B00GOM5IL4" target="_blank" rel="noopener">深入浅出Node.js</a></li></ul><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><ul><li><a href="https://book.douban.com/subject/30293851/" target="_blank" rel="noopener">Flask Web开发：基于Python的Web应用开发实战</a></li><li><a href="https://www.bignerdranch.com/books/front-end-web-development/" target="_blank" rel="noopener">Front-End Web Development The Big Nerd Ranch Guide</a></li><li><a href="http://www.imooc.com/learn/859" target="_blank" rel="noopener">Handlebars模板引擎</a></li></ul><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2019/08/xargs-tutorial.html" target="_blank" rel="noopener">xargs 命令教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2017/11/bash-set.html" target="_blank" rel="noopener">Bash 脚本 set 命令教程</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/09/bash-wildcards.html" target="_blank" rel="noopener">命令行通配符教程</a></li><li><a href="http://www.apress.com/br/book/9781484201220" target="_blank" rel="noopener">Pro Bash Programming, Second Edition</a></li><li><a href="https://weibo.com/u/2674868673" target="_blank" rel="noopener">linux命令行精选网</a></li><li><a href="https://blog.csdn.net/Hello_Hwc/article/details/40918385" target="_blank" rel="noopener">linux常用命令-帮助命令-授之以渔</a></li><li><a href="http://kishorelive.com/2011/12/05/printing-colors-in-the-terminal/" target="_blank" rel="noopener">Printing colors in the terminal</a></li></ul><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><ul><li><a href="https://cizixs.com/2017/02/10/network-virtualization-network-namespace/" target="_blank" rel="noopener">linux 网络虚拟化： network namespace 简介</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/08/linux_boot_process.html" target="_blank" rel="noopener">Linux 的启动流程</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html" target="_blank" rel="noopener">Systemd 入门教程：命令篇</a></li><li><a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-part-two.html" target="_blank" rel="noopener">Systemd 入门教程：实战篇</a></li><li><a href="https://cuiqingcai.com/6284.html" target="_blank" rel="noopener">详解 Linux 下的用户管理、用户组管理和权限管理</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/02/docker-tutorial.html" target="_blank" rel="noopener">Docker 入门教程</a></li></ul><h2 id="图书"><a href="#图书" class="headerlink" title="图书"></a>图书</h2><ul><li><a href="https://book.douban.com/subject/26762311/" target="_blank" rel="noopener">编译系统透视</a></li><li><a href="https://book.douban.com/subject/24841239/" target="_blank" rel="noopener">SQL基础教程（第2版）</a></li><li><a href="https://item.jd.com/11942019.html" target="_blank" rel="noopener">图解密码技术</a></li><li><a href="http://www.ituring.com.cn/book/1921" target="_blank" rel="noopener">深度学习入门：基于Python的理论与实现(英文名：Deep Learning From Scratch)</a></li><li><a href="http://www.ituring.com.cn/book/2599" target="_blank" rel="noopener">Python深度学习(英文名：Deep Learning With Python)</a></li><li><a href="https://germey.gitbooks.io/python3webspider/content/" target="_blank" rel="noopener">Python3网络爬虫开发实战</a></li><li><a href="http://item.jd.com/12207223.html?dist=" target="_blank" rel="noopener">精通Scrapy网络爬虫</a></li></ul><h2 id="网站"><a href="#网站" class="headerlink" title="网站"></a>网站</h2>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基础&quot;&gt;&lt;a href=&quot;#基础&quot; class=&quot;headerlink&quot; title=&quot;基础&quot;&gt;&lt;/a&gt;基础&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/01/assembly-language-primer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;汇编语言入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/11/byte-order.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解字节序&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://deerchao.net/tutorials/regex/regex.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;正则表达式30分钟入门教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2016/07/yaml.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;YAML 语言教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;理解OAuth 2.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.jianshu.com/p/65225f50fe76&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;基于python flask详述 OAuth 2.0 的运作流程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2018/10/restful-api-best-practices.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RESTful API 最佳实践&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;算法&quot;&gt;&lt;a href=&quot;#算法&quot; class=&quot;headerlink&quot; title=&quot;算法&quot;&gt;&lt;/a&gt;算法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://book.douban.com/subject/30357170/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《我的第一本算法书》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/126&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极客时间-数据结构与算法之美&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/course/intro/130&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极客时间-算法面试通关40讲&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h2 id=&quot;网络&quot;&gt;&lt;a href=&quot;#网络&quot; class=&quot;headerlink&quot; title=&quot;网络&quot;&gt;&lt;/a&gt;网络&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://time.geekbang.org/column/intro/85&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;极客时间-趣谈网络协议&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.amazon.cn/dp/B00VE6RYPS&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Wireshark网络分析就这么简单》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/WvjQQRRdpMIeArblGV94Tg&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;《Wireshark网络抓包从入门到熟练》&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.moserware.com/2009/06/first-few-milliseconds-of-https.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;The First Few Milliseconds of an HTTPS Connection&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://blog.csdn.net/linuxnews/article/details/51900900&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;为什么Wireshark无法解密HTTPS数据&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2019/09/curl-reference.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;curl 的用法指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.ruanyifeng.com/blog/2011/09/curl.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;curl 网站开发指南&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://cizixs.com/2017/04/11/use-curl-to-analyze-request/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;使用 curl 命令分析请求的耗时情况&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s/nAY46Cs5TURFnINv_BLb7Q&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;在Linux中使用curl命令参数详解&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
    
  </entry>
  
</feed>
